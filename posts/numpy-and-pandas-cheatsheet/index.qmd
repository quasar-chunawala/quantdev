---
title: "`numpy` and `pandas` CheatSheet"
author: "Quasar"
date: "2025-03-06"
categories: [Python]      
image: "python.jpeg"
toc: true
toc-depth: 3
---

## `np.arange(start,stop,step)`

`np.arange(start, stop, step)` returns evenly spaced values in a given interval.

```{python}
import numpy as np

np.arange(0.0, 1.1, 0.1)
```

## `np.zeros(shape)`

```{python}
np.zeros(shape=(3,3))
```

## `np.zeros_like`

```{python}
x = np.array([
    [1, 2, 3, 4],
    [5, 6, 7, 8],
    [9,10,11,12]
])

np.zeros_like(x)
```

## `np.ones(shape)`

```{python}
import numpy as np

# The matrix of all ones of size 3 x 3
np.ones(shape=(3,3))
```

## `np.eye(N_rows,M_cols)`

```{python}
import numpy as np

# Identity matrix of size 3 x 3
np.eye(3,3)
```

## `np.any(array_like, axis, keepdims)`

Tests whether any array element along a given axis evaluates to `True`.

```{python}
import numpy as np

np.any([[True, False], [True, True]])
```

```{python}
np.any([[True, False], [True, True]], axis=0)
```

```{python}
np.any([[True, False], [True, False]], axis=0)
```

```{python}
np.any([[True, False], [True, False]], axis=1)
```

```{python}
np.any([[True, False], [True, False]], axis=1, keepdims=True)
```

## `np.all(array_like, axis, keepdims)`

```{python}
import numpy as np

np.all([[True, False], [True, True]])
```

```{python}
np.all([[True, False], [True, True]], axis=0)
```

```{python}
np.all([[True, False], [True, False]], axis=1)
```

## `np.tile(array, reps)`

Constructs an array by repeating the array `reps` number of times.

```{python}
import numpy as np

a = np.array([0, 1, 2])
np.tile(a, 2)
```

```{python}
import numpy as np

a = np.array([0, 1, 2])
np.tile(a, (2, 2))
```

## `np.repeat(array, repeats, axis)`

Repeats each element of an array after themselves.

```{python}
np.repeat(3,4)
```

```{python}
x = np.array([
    [1, 2],
    [3, 4],
    [5, 6]
])

np.repeat(x, repeats=2,axis=0)
```

```{python}
np.repeat(x, repeats = 2, axis=1)
```

## Broadcasting

The term broadcasting describes how NumPy treats arrays with different shapes during arithmetic operations. Subject to certain constraints, the smaller array is broadcast across the larger array, so that they have compatible shapes. Broadcasting provides a means of vectorizing array operations so that looping occurs in C, instead of Python.

For example, let $\mathbf{x}=[x_0, x_1, \ldots, x_{n-1}]$ be a  column vector and let $k$ be a scalar. 

The scalar multiplication $\mathbf{y} = k \mathbf{x}$ multiplies each element $x_0, x_1, x_2, \ldots, x_{n-1}$ by $k$. 

We can think of the scalar $k$ as being stretched during the arithmetic operation into a vector with the same length as $\mathbf{x}$. The stretching analogy is only conceptual. NumPy is smart enough to use the original scalar value without actually making copies.

## `np.where(condition, x, y)`

For each element $x$ in the array, if the array-element satisfies the condition, then `x` values are returned, else `y` values are returned.

```{python}
import numpy as np

x = np.arange(10)
x > 5   # this returns a filter mask - an array of booleans
```

```{python}
x[x > 5]
```

```{python}
np.where(x > 5, x**2, x)
```

## `pandas.DataFrame(data,columns)`

A `pandas.DataFrame` represents a two dimensional, size-mutable, potentially heterogenous collection of data.

`data` can be any iterable, `dict` or another dataframe.

```{python}
import pandas as pd
from datetime import date
data = {
    'Date' : [ date(2025,1,31), date(2025,2,1)],
    'Close price' : [ 101.25, 103.00 ]
}

df = pd.DataFrame(data)
df
```

## Indexing a `DataFrame`

```{python}
# Access a single value for a row/column label pair
df.at[1, 'Close price']
```

```{python}
df.at[1, 'Close price'] = 102.50
```

```{python}
# Accessing a group of rows and columns by label(s) or boolean array
df.loc[0]
```

```{python}
df = pd.DataFrame({
    'A' : [1, 2, 3, 4, 5, 6],
    'B' : [7, 8, 9, 10, 11, 12],
    'C' : [13, 14, 15, 16, 17, 18]
})
df
```

```{python}
# Accessing a group of rows and columns by label(s) or boolean array
df.loc[0]
```

```{python}
# Integer location based indexing
df.iloc[1:3,1]
```

## Filtering data

```{python}
# This produces a filter mask
df['B'] >= 10
```

```{python}
df[df['B'] >= 10]
```

## Data transformation

```{python}
df['B'] = df.apply(lambda row: row['B'] ** 2 , axis=1)
df
```

