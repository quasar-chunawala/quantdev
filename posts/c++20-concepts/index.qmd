---
title: "C++20 concepts"
author: "Quasar"
date: "2024-12-07"
categories: [C++]      
image: "cpp.jpg"
toc: true
toc-depth: 3
comments:
  giscus: 
    repo: quasar-chunawala/quantdev
format:
    html:
        code-tools: true
        code-block-border-left: true
        code-annotations: below
        highlight-style: pygments
---

# Introduction

A class template, function template (include lambdas) may be associated with a **constraint**, which specifies requirements on the template arguments. This can be used to select the most appropriate function overload or template specialization.

A **concept** is a named set of such constraints. A **concept** is ultimately a logical predicate $P(x)$, evaluated at compile-time, where $x$ represents template parameters. A function or class template constrained by the concept $P$, will work only for template arguments that satisfy $P$.

Consider the templated function:

```cpp
#include <iostream>

template <typename T>
T sum(T const a, T const b)
{
  return (a + b);
}
```

The `sum` function returns the result of applying the binary `operator+(T,T)` on its arguments. The `sum` function only makes sense when we discuss mathematical types such as integers, floating-point numbers, `std::complex<double>`, vectors and matrices. For most types, overloading the operator `+` makes no sense at all. 

We can call this function as follows:

```cpp
int main()
{

}
```

