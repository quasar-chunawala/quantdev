{
  "hash": "9f8c57a6f19af44c77c4382f28f10cdd",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"`numpy` and `pandas` CheatSheet\"\nauthor: \"Quasar\"\ndate: \"2025-03-06\"\ncategories: [Python]      \nimage: \"python.jpeg\"\ntoc: true\ntoc-depth: 3\n---\n\n\n\n\n## `np.arange(start,stop,step)`\n\n`np.arange(start, stop, step)` returns evenly spaced values in a given interval.\n\n::: {#20744bf9 .cell execution_count=1}\n``` {.python .cell-code}\nimport numpy as np\n\nnp.arange(0.0, 1.1, 0.1)\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\narray([0. , 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1. ])\n```\n:::\n:::\n\n\n## `np.zeros(shape)`\n\n::: {#55b53855 .cell execution_count=2}\n``` {.python .cell-code}\nnp.zeros(shape=(3,3))\n```\n\n::: {.cell-output .cell-output-display execution_count=2}\n```\narray([[0., 0., 0.],\n       [0., 0., 0.],\n       [0., 0., 0.]])\n```\n:::\n:::\n\n\n## `np.zeros_like`\n\n::: {#28e5671f .cell execution_count=3}\n``` {.python .cell-code}\nx = np.array([\n    [1, 2, 3, 4],\n    [5, 6, 7, 8],\n    [9,10,11,12]\n])\n\nnp.zeros_like(x)\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```\narray([[0, 0, 0, 0],\n       [0, 0, 0, 0],\n       [0, 0, 0, 0]])\n```\n:::\n:::\n\n\n## `np.ones(shape)`\n\n::: {#b7309ef3 .cell execution_count=4}\n``` {.python .cell-code}\nimport numpy as np\n\n# The matrix of all ones of size 3 x 3\nnp.ones(shape=(3,3))\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```\narray([[1., 1., 1.],\n       [1., 1., 1.],\n       [1., 1., 1.]])\n```\n:::\n:::\n\n\n## `np.eye(N_rows,M_cols)`\n\n::: {#c183308c .cell execution_count=5}\n``` {.python .cell-code}\nimport numpy as np\n\n# Identity matrix of size 3 x 3\nnp.eye(3,3)\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```\narray([[1., 0., 0.],\n       [0., 1., 0.],\n       [0., 0., 1.]])\n```\n:::\n:::\n\n\n## `np.any(array_like, axis, keepdims)`\n\nTests whether any array element along a given axis evaluates to `True`.\n\n::: {#4327cb52 .cell execution_count=6}\n``` {.python .cell-code}\nimport numpy as np\n\nnp.any([[True, False], [True, True]])\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```\nnp.True_\n```\n:::\n:::\n\n\n::: {#23597fe4 .cell execution_count=7}\n``` {.python .cell-code}\nnp.any([[True, False], [True, True]], axis=0)\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```\narray([ True,  True])\n```\n:::\n:::\n\n\n::: {#cc7b6c40 .cell execution_count=8}\n``` {.python .cell-code}\nnp.any([[True, False], [True, False]], axis=0)\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```\narray([ True, False])\n```\n:::\n:::\n\n\n::: {#5c0a6c75 .cell execution_count=9}\n``` {.python .cell-code}\nnp.any([[True, False], [True, False]], axis=1)\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n```\narray([ True,  True])\n```\n:::\n:::\n\n\n::: {#20716a90 .cell execution_count=10}\n``` {.python .cell-code}\nnp.any([[True, False], [True, False]], axis=1, keepdims=True)\n```\n\n::: {.cell-output .cell-output-display execution_count=10}\n```\narray([[ True],\n       [ True]])\n```\n:::\n:::\n\n\n## `np.all(array_like, axis, keepdims)`\n\n::: {#aaf2cce9 .cell execution_count=11}\n``` {.python .cell-code}\nimport numpy as np\n\nnp.all([[True, False], [True, True]])\n```\n\n::: {.cell-output .cell-output-display execution_count=11}\n```\nnp.False_\n```\n:::\n:::\n\n\n::: {#1ad9d96f .cell execution_count=12}\n``` {.python .cell-code}\nnp.all([[True, False], [True, True]], axis=0)\n```\n\n::: {.cell-output .cell-output-display execution_count=12}\n```\narray([ True, False])\n```\n:::\n:::\n\n\n::: {#2cb51e9e .cell execution_count=13}\n``` {.python .cell-code}\nnp.all([[True, False], [True, False]], axis=1)\n```\n\n::: {.cell-output .cell-output-display execution_count=13}\n```\narray([False, False])\n```\n:::\n:::\n\n\n## `np.tile(array, reps)`\n\nConstructs an array by repeating the array `reps` number of times.\n\n::: {#c1400775 .cell execution_count=14}\n``` {.python .cell-code}\nimport numpy as np\n\na = np.array([0, 1, 2])\nnp.tile(a, 2)\n```\n\n::: {.cell-output .cell-output-display execution_count=14}\n```\narray([0, 1, 2, 0, 1, 2])\n```\n:::\n:::\n\n\n::: {#e40831d9 .cell execution_count=15}\n``` {.python .cell-code}\nimport numpy as np\n\na = np.array([0, 1, 2])\nnp.tile(a, (2, 2))\n```\n\n::: {.cell-output .cell-output-display execution_count=15}\n```\narray([[0, 1, 2, 0, 1, 2],\n       [0, 1, 2, 0, 1, 2]])\n```\n:::\n:::\n\n\n## `np.repeat(array, repeats, axis)`\n\nRepeats each element of an array after themselves.\n\n::: {#6b9cba89 .cell execution_count=16}\n``` {.python .cell-code}\nnp.repeat(3,4)\n```\n\n::: {.cell-output .cell-output-display execution_count=16}\n```\narray([3, 3, 3, 3])\n```\n:::\n:::\n\n\n::: {#bca0f600 .cell execution_count=17}\n``` {.python .cell-code}\nx = np.array([\n    [1, 2],\n    [3, 4],\n    [5, 6]\n])\n\nnp.repeat(x, repeats=2,axis=0)\n```\n\n::: {.cell-output .cell-output-display execution_count=17}\n```\narray([[1, 2],\n       [1, 2],\n       [3, 4],\n       [3, 4],\n       [5, 6],\n       [5, 6]])\n```\n:::\n:::\n\n\n::: {#23aab666 .cell execution_count=18}\n``` {.python .cell-code}\nnp.repeat(x, repeats = 2, axis=1)\n```\n\n::: {.cell-output .cell-output-display execution_count=18}\n```\narray([[1, 1, 2, 2],\n       [3, 3, 4, 4],\n       [5, 5, 6, 6]])\n```\n:::\n:::\n\n\n## Broadcasting\n\nThe term broadcasting describes how NumPy treats arrays with different shapes during arithmetic operations. Subject to certain constraints, the smaller array is broadcast across the larger array, so that they have compatible shapes. Broadcasting provides a means of vectorizing array operations so that looping occurs in C, instead of Python.\n\nFor example, let $\\mathbf{x}=[x_0, x_1, \\ldots, x_{n-1}]$ be a  column vector and let $k$ be a scalar. \n\nThe scalar multiplication $\\mathbf{y} = k \\mathbf{x}$ multiplies each element $x_0, x_1, x_2, \\ldots, x_{n-1}$ by $k$. \n\nWe can think of the scalar $k$ as being stretched during the arithmetic operation into a vector with the same length as $\\mathbf{x}$. The stretching analogy is only conceptual. NumPy is smart enough to use the original scalar value without actually making copies.\n\n## `np.where(condition, x, y)`\n\nFor each element $x$ in the array, if the array-element satisfies the condition, then `x` values are returned, else `y` values are returned.\n\n::: {#179c97e3 .cell execution_count=19}\n``` {.python .cell-code}\nimport numpy as np\n\nx = np.arange(10)\nx > 5   # this returns a filter mask - an array of booleans\n```\n\n::: {.cell-output .cell-output-display execution_count=19}\n```\narray([False, False, False, False, False, False,  True,  True,  True,\n        True])\n```\n:::\n:::\n\n\n::: {#538739cc .cell execution_count=20}\n``` {.python .cell-code}\nx[x > 5]\n```\n\n::: {.cell-output .cell-output-display execution_count=20}\n```\narray([6, 7, 8, 9])\n```\n:::\n:::\n\n\n::: {#3406a8d5 .cell execution_count=21}\n``` {.python .cell-code}\nnp.where(x > 5, x**2, x)\n```\n\n::: {.cell-output .cell-output-display execution_count=21}\n```\narray([ 0,  1,  2,  3,  4,  5, 36, 49, 64, 81])\n```\n:::\n:::\n\n\n## `pandas.DataFrame(data,columns)`\n\nA `pandas.DataFrame` represents a two dimensional, size-mutable, potentially heterogenous collection of data.\n\n`data` can be any iterable, `dict` or another dataframe.\n\n::: {#76173870 .cell execution_count=22}\n``` {.python .cell-code}\nimport pandas as pd\nfrom datetime import date\ndata = {\n    'Date' : [ date(2025,1,31), date(2025,2,1)],\n    'Close price' : [ 101.25, 103.00 ]\n}\n\ndf = pd.DataFrame(data)\ndf\n```\n\n::: {.cell-output .cell-output-display execution_count=22}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Date</th>\n      <th>Close price</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2025-01-31</td>\n      <td>101.25</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2025-02-01</td>\n      <td>103.00</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n## Indexing a `DataFrame`\n\n::: {#d9490676 .cell execution_count=23}\n``` {.python .cell-code}\n# Access a single value for a row/column label pair\ndf.at[1, 'Close price']\n```\n\n::: {.cell-output .cell-output-display execution_count=23}\n```\nnp.float64(103.0)\n```\n:::\n:::\n\n\n::: {#e3d6fb8e .cell execution_count=24}\n``` {.python .cell-code}\ndf.at[1, 'Close price'] = 102.50\n```\n:::\n\n\n::: {#8e155602 .cell execution_count=25}\n``` {.python .cell-code}\n# Accessing a group of rows and columns by label(s) or boolean array\ndf.loc[0]\n```\n\n::: {.cell-output .cell-output-display execution_count=25}\n```\nDate           2025-01-31\nClose price        101.25\nName: 0, dtype: object\n```\n:::\n:::\n\n\n::: {#b7e649c2 .cell execution_count=26}\n``` {.python .cell-code}\ndf = pd.DataFrame({\n    'A' : [1, 2, 3, 4, 5, 6],\n    'B' : [7, 8, 9, 10, 11, 12],\n    'C' : [13, 14, 15, 16, 17, 18]\n})\ndf\n```\n\n::: {.cell-output .cell-output-display execution_count=26}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>A</th>\n      <th>B</th>\n      <th>C</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>7</td>\n      <td>13</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>8</td>\n      <td>14</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>9</td>\n      <td>15</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>10</td>\n      <td>16</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5</td>\n      <td>11</td>\n      <td>17</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>6</td>\n      <td>12</td>\n      <td>18</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {#19ccaaab .cell execution_count=27}\n``` {.python .cell-code}\n# Accessing a group of rows and columns by label(s) or boolean array\ndf.loc[0]\n```\n\n::: {.cell-output .cell-output-display execution_count=27}\n```\nA     1\nB     7\nC    13\nName: 0, dtype: int64\n```\n:::\n:::\n\n\n::: {#4b72dc19 .cell execution_count=28}\n``` {.python .cell-code}\n# Integer location based indexing\ndf.iloc[1:3,1]\n```\n\n::: {.cell-output .cell-output-display execution_count=28}\n```\n1    8\n2    9\nName: B, dtype: int64\n```\n:::\n:::\n\n\n## Filtering data\n\n::: {#380b0b29 .cell execution_count=29}\n``` {.python .cell-code}\n# This produces a filter mask\ndf['B'] >= 10\n```\n\n::: {.cell-output .cell-output-display execution_count=29}\n```\n0    False\n1    False\n2    False\n3     True\n4     True\n5     True\nName: B, dtype: bool\n```\n:::\n:::\n\n\n::: {#451330f2 .cell execution_count=30}\n``` {.python .cell-code}\ndf[df['B'] >= 10]\n```\n\n::: {.cell-output .cell-output-display execution_count=30}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>A</th>\n      <th>B</th>\n      <th>C</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>10</td>\n      <td>16</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5</td>\n      <td>11</td>\n      <td>17</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>6</td>\n      <td>12</td>\n      <td>18</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n## Data transformation\n\n::: {#b653e4f8 .cell execution_count=31}\n``` {.python .cell-code}\ndf['B'] = df.apply(lambda row: row['B'] ** 2 , axis=1)\ndf\n```\n\n::: {.cell-output .cell-output-display execution_count=31}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>A</th>\n      <th>B</th>\n      <th>C</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>49</td>\n      <td>13</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>64</td>\n      <td>14</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>81</td>\n      <td>15</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>100</td>\n      <td>16</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5</td>\n      <td>121</td>\n      <td>17</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>6</td>\n      <td>144</td>\n      <td>18</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}