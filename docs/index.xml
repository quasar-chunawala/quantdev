<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>quantdev.blog</title>
<link>http://quantdev.blog/index.html</link>
<atom:link href="http://quantdev.blog/index.xml" rel="self" type="application/rss+xml"/>
<description>quantdev.blog</description>
<generator>quarto-1.3.450</generator>
<lastBuildDate>Wed, 22 Oct 2025 23:00:00 GMT</lastBuildDate>
<item>
  <title>AAD(Adjoint Algorithmic Differentiation)</title>
  <dc:creator>Quasar </dc:creator>
  <link>http://quantdev.blog/posts/aad/index.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>I was skimming through <a href="http://luca-capriotti.net/">Luca Capriotti</a> and Mike Giles’ paper <a href="https://people.maths.ox.ac.uk/~gilesm/files/AAD_Review.pdf">15 Years of Adjoint Algorithmic Differentiation in Finance</a> and wanted to write a toy implementation in Julia. Algorithmic differentiation (AD) is a set of techniques to accurately and efficiently compute derivatives of a function in the form of a computer program. Many of my toy examples are borrowed from the excellent <a href="https://www.amazon.co.uk/Algorithmic-Differentiation-Explained-Financial-Engineering/dp/3319539787/ref=sr_1_1?crid=3ICBI9FQDER6B&amp;dib=eyJ2IjoiMSJ9.OBdGni8_VOEiK_wWQ1g2PA.ChQjNVwVvAHPnbWhiXJDTSw2G9dyuIX9-hsH6BP_ZT4&amp;dib_tag=se&amp;keywords=Algorithmic+Differentiation+in+Finance+Explained&amp;qid=1761218601&amp;sprefix=algorithmic+differentiation+in+finance+explained%2Caps%2C91&amp;sr=8-1">Algorithmic Differentiation in Finance Explained</a>, by Marc Henrard.</p>
<section id="setup" class="level2">
<h2 class="anchored" data-anchor-id="setup">Setup</h2>
<p>As a quick example, suppose we have the scalar-valued function <img src="https://latex.codecogs.com/png.latex?f:%5Cmathbb%7BR%7D%5E%7Bp_a%7D%20%5Cto%20%5Cmathbb%7BR%7D">:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0Ay%20=%20%5Ccos(x_1%20+%20e%5E%7Bx_2%7D)(%5Csin%20x_3%20+%20%5Ccos%20x_4)%20+%20x_2%5E%7B3/2%7D%20+%20x_4%0A"></p>
<p>The function inputs are a vector <code>a[1...p_a]</code> of dimension <img src="https://latex.codecogs.com/png.latex?p_a">. All intermediate values in the program will be denoted by <code>b</code>s. The output of the function is denoted by the variable <code>z</code> of dimension <img src="https://latex.codecogs.com/png.latex?1">. So, the algorithm starts with the inputs <code>a</code>, goes to <code>z</code> through a lot of <code>b</code>s. The new variables are denoted by <code>b[j]</code> with <code>j</code> starting with <code>1</code> and going upto <img src="https://latex.codecogs.com/png.latex?p_b">. There are <img src="https://latex.codecogs.com/png.latex?p_b"> intermediate variables <img src="https://latex.codecogs.com/png.latex?b"> in the program.</p>
</section>
<section id="forward-mode-ad" class="level2">
<h2 class="anchored" data-anchor-id="forward-mode-ad">Forward-mode AD</h2>
<p>Standard algorithmic differentiation also called forward algorithmic differentiation or tangent algorithmic differentiation. Our goal is to compute <img src="https://latex.codecogs.com/png.latex?%5Cpartial%20z/%5Cpartial%20a_i">. We achieve this by computing for each <img src="https://latex.codecogs.com/png.latex?j">(<img src="https://latex.codecogs.com/png.latex?p_a%20+%201%20%5Cleq%20j%20%5Cleq%20p_b">) the value:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cdot%7Bb%7D%5Bj,i%5D%20=%20%5Cfrac%7B%5Cpartial%20b%5Bj%5D%7D%7B%5Cpartial%20a%5Bi%5D%7D%0A"></p>
<p>We first initialize the variables <img src="https://latex.codecogs.com/png.latex?b%5Bj%5D"> from <img src="https://latex.codecogs.com/png.latex?1%20%5Cleq%20j%20%5Cleq%20p_a"> with the inputs values <img src="https://latex.codecogs.com/png.latex?a%5Bj%5D">. Note that the derivative is denoted by dot on the variable and <img src="https://latex.codecogs.com/png.latex?%5Cdot%7Bb%7D%5Bj,i%5D"> is the derivative of <img src="https://latex.codecogs.com/png.latex?b%5Bj%5D"> with respect to some other variable <img src="https://latex.codecogs.com/png.latex?a%5Bi%5D">. For <img src="https://latex.codecogs.com/png.latex?j=1:p_a">, then, the derivative of <img src="https://latex.codecogs.com/png.latex?b%5Bj%5D"> with respect to <img src="https://latex.codecogs.com/png.latex?a%5Bi%5D"> is simply <img src="https://latex.codecogs.com/png.latex?1">, if <img src="https://latex.codecogs.com/png.latex?j=i"> and <img src="https://latex.codecogs.com/png.latex?0"> if <img src="https://latex.codecogs.com/png.latex?j%20%5Cneq%20i">. This is the starting point of a recursive algorithm. The starting part is the identity matrix :</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cdot%7Bb%7D%5Bj,i%5D%20=%20%5Cdelta_%7Bi,j%7D%0A"></p>
<p>where <img src="https://latex.codecogs.com/png.latex?%5Cdelta_%7Bi,j%7D"> represents Kronecker’s delta.</p>
<p>The successive derivatives <img src="https://latex.codecogs.com/png.latex?%5Cdot%7Bb%7D%5Bj,i%5D"> are given by the chain rule:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign*%7D%0A%5Cdot%7Bb%7D%5Bj,i%5D%20=%20%5Cfrac%7B%5Cpartial%20b%5Bj%5D%7D%7B%5Cpartial%20a%5Bi%5D%7D%20&amp;=%20%5Csum_%7Bk=p_a%20+%201%7D%5E%7Bk=j-1%7D%5Cfrac%7B%5Cpartial%20b%5Bj%5D%7D%7B%5Cpartial%20b%5Bk%5D%7D%20%5Ccdot%20%5Cfrac%7B%5Cpartial%20b%5Bk%5D%7D%7B%5Cpartial%20a%5Bi%5D%7D%5C%5C%0A&amp;=%20%5Csum_%7Bk=p_a%20+%201%7D%5E%7Bj-1%7D%20%5Cfrac%7B%5Cpartial%7D%7B%5Cpartial%20b%5Bk%5D%7D%20(b%5Bj%5D)%20%5Ccdot%20%5Cdot%7Bb%7D%5Bk,i%5D%5C%5C%0A&amp;=%20%5Csum_%7Bk=p_a%20+%201%7D%5E%7Bj-1%7D%20%5Cfrac%7B%5Cpartial%7D%7B%5Cpartial%20b%5Bk%5D%7D%20g_j(b%5Bp_a%20+%201%20:%20j%20-%201%5D)%20%5Ccdot%20%5Cdot%7Bb%7D%5Bk,i%5D%5C%5C%0A%5Cend%7Balign*%7D%0A"></p>
<p>The numbers <img src="https://latex.codecogs.com/png.latex?%5Cdot%7Bb%7D%5Bp_b,i%5D"> are equal to the derivatives of <img src="https://latex.codecogs.com/png.latex?z=b%5Bp_b%5D"> with respect to <img src="https://latex.codecogs.com/png.latex?a_i">, <img src="https://latex.codecogs.com/png.latex?1%20%5Cleq%20i%20%5Cleq%20p_a">. This concludes the algorithm for the computation of <img src="https://latex.codecogs.com/png.latex?%5Cpartial%20z/%5Cpartial%20a_i">.</p>
<p>The requirements for such an implementation is that all the intermediary functions <img src="https://latex.codecogs.com/png.latex?g_j"> have a derivative version. The algorithmic differentiation approach is a bottom-up approach : it can be implemented for an algorithm only if all the components below it, all the components entering into the composition have already been implemented.</p>
<div id="fig:forward_ad" class="quarto-figure quarto-figure-center anchored">
<figure class="figure">
<p><img src="http://quantdev.blog/posts/aad/forward_ad.jpg" class="img-fluid figure-img" data-scale="70%"></p>
<figcaption class="figure-caption">Forward AD</figcaption>
</figure>
</div>
</section>
<section id="naive-implementation-of-forward-ad" class="level2">
<h2 class="anchored" data-anchor-id="naive-implementation-of-forward-ad">Naive implementation of forward-AD</h2>
<div class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource julia number-lines code-with-copy"><code class="sourceCode julia"><span id="cb1-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">f</span>(a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Array{Real}</span>)</span>
<span id="cb1-2">    b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">zeros</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb1-3">    b[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> a[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">exp</span>(a[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>])</span>
<span id="cb1-4">    b[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sin</span>(a[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cos</span>(a[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>])</span>
<span id="cb1-5">    b[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> a[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span> (<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> a[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>]</span>
<span id="cb1-6">    b[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cos</span>(b[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> b[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>]</span>
<span id="cb1-7">    b[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>]</span>
<span id="cb1-8"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">end</span></span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="2">
<pre><code>f (generic function with 1 method)</code></pre>
</div>
</div>
<p>We create an AD version of the starter function as follows:</p>
<div class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource julia number-lines code-with-copy"><code class="sourceCode julia"><span id="cb3-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">f_AD</span>(x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Array{Real}</span>)</span>
<span id="cb3-2">    b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">zeros</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb3-3">    b[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> a[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">exp</span>(a[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>])</span>
<span id="cb3-4">    b[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sin</span>(a[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cos</span>(a[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>])</span>
<span id="cb3-5">    b[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> a[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span> (<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> a[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>]</span>
<span id="cb3-6">    b[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cos</span>(b[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> b[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>]</span>
<span id="cb3-7">    </span>
<span id="cb3-8">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Forward sweep - derivatives</span></span>
<span id="cb3-9">    n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(x)</span>
<span id="cb3-10"></span>
<span id="cb3-11">    b1dot <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">zeros</span>(n)</span>
<span id="cb3-12">    b1dot[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb3-13">    b1dot[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">exp</span>(b[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>])</span>
<span id="cb3-14"></span>
<span id="cb3-15">    b2dot <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">zeros</span>(n)</span>
<span id="cb3-16">    b2dot[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cos</span>(b[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>])</span>
<span id="cb3-17">    b2dot[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">-sin</span>(b[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>])</span>
<span id="cb3-18"></span>
<span id="cb3-19">    b3dot <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">zeros</span>(n)</span>
<span id="cb3-20">    b3dot[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">*</span>(b[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span> (<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>))</span>
<span id="cb3-21">    b3dot[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb3-22"></span>
<span id="cb3-23">    b4dot <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> b[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">-sin</span>(b[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> b1dot <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cos</span>(b[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> b2dot <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b3dot</span>
<span id="cb3-24">    (b[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>],b4dot)</span>
<span id="cb3-25"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">end</span></span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="3">
<pre><code>f_AD (generic function with 1 method)</code></pre>
</div>
</div>
<p>Note that, the output of the original function <code>f</code> is the function value - a <code>double</code>, whilst the output <code>f_ad</code> is a 2-tuple : the function value and the value of the jacobian(gradient).</p>
</section>
<section id="adjoint-algorithmic-differentiation" class="level2">
<h2 class="anchored" data-anchor-id="adjoint-algorithmic-differentiation">Adjoint Algorithmic Differentiation</h2>
<p>Our goal is to compute <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B%5Cpartial%20z%7D%7B%5Cpartial%20a_i%7D">. We achieve this by computing for each intermediate variable <img src="https://latex.codecogs.com/png.latex?j"> (<img src="https://latex.codecogs.com/png.latex?p_a%20+%201%20%5Cleq%20j%20%5Cleq%20p_b">) the value:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Coverline%7Bb%7D%5Bj%5D%20=%20%5Cfrac%7B%5Cpartial%20z%7D%7B%5Cpartial%20b%5Bj%5D%7D%0A"></p>
<p>Note that, <img src="https://latex.codecogs.com/png.latex?%5Coverline%7Bb%7D%5Bj%5D"> is the derivative of the output with respect to <code>b[j]</code>. It is important to switch the perception between the forward mode and the reverse mode. What is fixed in the reverse approach is the output, we always compute the derivative of the same variable, the output.</p>
<p>The starting point of the algorithm is easy. For <img src="https://latex.codecogs.com/png.latex?j%20=%20p_b">, the derivative of <img src="https://latex.codecogs.com/png.latex?z"> with respect to <img src="https://latex.codecogs.com/png.latex?b%5Bj%5D"> is simply the derivative of <img src="https://latex.codecogs.com/png.latex?z"> with respect to itself, which is <img src="https://latex.codecogs.com/png.latex?1">. This is the starting point of a recursive algorithm.</p>
<p>From there, we read the code in reverse order and just apply the chain rule. Each intermediary variable <img src="https://latex.codecogs.com/png.latex?b%5Bj%5D"> is used only in the lines of code that follow in the computation. The derivative <img src="https://latex.codecogs.com/png.latex?%5Coverline%7Bb%7D%5Bj%5D"> is given by:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Coverline%7Bb%7D%5Bj%5D%20=%20%5Cfrac%7B%5Cpartial%20z%7D%7B%5Cpartial%20b_j%7D%20=%20%5Csum_%7Bk=j+1%7D%5E%7Bp_b%7D%20%5Cfrac%7B%5Cpartial%20z%7D%7B%5Cpartial%20b_k%7D%20%5Ccdot%20%5Cfrac%7B%5Cpartial%20b_k%7D%7B%5Cpartial%20b_j%7D%20=%20%5Csum_%7Bk=j+1%7D%5E%7Bp_b%7D%20%5Coverline%7Bb%7D%5Bk%5D%20%5Ccdot%20%5Cfrac%7B%5Cpartial%20g_k%7D%7B%5Cpartial%20b_j%7D%0A"></p>
<p>I think it’s easy to visualize this in a computational graph:</p>
<div id="fig:reverse_ad" class="quarto-figure quarto-figure-center anchored">
<figure class="figure">
<p><img src="http://quantdev.blog/posts/aad/reverse_ad.jpg" class="img-fluid figure-img" data-scale="70%"></p>
<figcaption class="figure-caption">Reverse AD</figcaption>
</figure>
</div>
<div class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode numberSource julia number-lines code-with-copy"><code class="sourceCode julia"><span id="cb5-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">f_AAD</span>(a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Array{Real}</span>)</span>
<span id="cb5-2">    b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">zeros</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb5-3">    b[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> a[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">exp</span>(a[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>])</span>
<span id="cb5-4">    b[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sin</span>(a[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cos</span>(a[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>])</span>
<span id="cb5-5">    b[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> a[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span> (<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> a[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>]</span>
<span id="cb5-6">    b[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cos</span>(b[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> b[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>]</span>
<span id="cb5-7"></span>
<span id="cb5-8">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Backward sweep - derivatives</span></span>
<span id="cb5-9">    n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(a)</span>
<span id="cb5-10">    abar <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">zeros</span>(n)</span>
<span id="cb5-11">    b4bar <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span></span>
<span id="cb5-12">    b3bar <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> b4bar</span>
<span id="cb5-13">    b2bar <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cos</span>(b[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> b4bar</span>
<span id="cb5-14">    b1bar <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> b[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">-sin</span>(b[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> b4bar</span>
<span id="cb5-15"></span>
<span id="cb5-16">    abar[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">-sin</span>(a[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> b2bar <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> b3bar</span>
<span id="cb5-17">    abar[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cos</span>(a[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> b2bar</span>
<span id="cb5-18">    abar[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">exp</span>(a[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> b1bar <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> (<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (a[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span> (<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>)) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> b3bar</span>
<span id="cb5-19">    abar[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> b1bar</span>
<span id="cb5-20"></span>
<span id="cb5-21">    (b[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>], abar)</span>
<span id="cb5-22"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">end</span></span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="4">
<pre><code>f_AAD (generic function with 1 method)</code></pre>
</div>
</div>
</section>
</section>
<section id="algorithmic-differentiation-tools" class="level1">
<h1>Algorithmic Differentiation Tools</h1>
<p>Given any computer function <code>f(x)</code>, we can build code implementing the tangent or adjoint mode for the calculation of its derivatives. This involves representing the function as a computational graph, calculating the derivatives on each of the edges, and computing the tangents or adjoints in the appropriate direction. This process is mechanical in nature and can be easily automated.</p>
<p>Most AD tools fall into 2 categories : <em>source code transformation</em> and <em>operator overloading</em>.</p>


</section>

 ]]></description>
  <category>xVA</category>
  <guid>http://quantdev.blog/posts/aad/index.html</guid>
  <pubDate>Wed, 22 Oct 2025 23:00:00 GMT</pubDate>
  <media:content url="http://quantdev.blog/posts/aad/image.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Continuous probability puzzles</title>
  <dc:creator>Quasar </dc:creator>
  <link>http://quantdev.blog/posts/continuous_probability_puzzles/index.html</link>
  <description><![CDATA[ 




<section id="puzzles-on-continuous-probability" class="level2">
<h2 class="anchored" data-anchor-id="puzzles-on-continuous-probability">Puzzles on continuous probability</h2>
<div id="exm-puzzle-1" class="theorem example">
<p><span class="theorem-title"><strong>Example 1 </strong></span>What is the maximum possible variance of a random variable that takes the values in the set <img src="https://latex.codecogs.com/png.latex?%5B-1,1%5D">?</p>
</div>
<p><em>Solution</em>.</p>
<p>Intuitively speaking, the variance of a mass distribution is the probability weighted average of the sum of the squared distances from the mean. It is maximized if the masses are placed far away from the center of gravity. So, if we place two point masses with probability weights <img src="https://latex.codecogs.com/png.latex?1/2"> at <img src="https://latex.codecogs.com/png.latex?(-1,0)"> and <img src="https://latex.codecogs.com/png.latex?(1,0)">, the variance would be maximal. Hence, the maximum variance equals <img src="https://latex.codecogs.com/png.latex?1">.</p>
<div id="exm-puzzle-2" class="theorem example">
<p><span class="theorem-title"><strong>Example 2 </strong></span>What is the maximum possible variance of a random variable that takes the values in the set <img src="https://latex.codecogs.com/png.latex?%5B0,1%5D">?</p>
</div>
<p><em>Solution</em>.</p>
<p>Again, we can have point masses with probability weights <img src="https://latex.codecogs.com/png.latex?1/2"> at <img src="https://latex.codecogs.com/png.latex?X=0"> and <img src="https://latex.codecogs.com/png.latex?X=1">. The center of mass or expectation of this distribution <img src="https://latex.codecogs.com/png.latex?EX%20=%201/2">. So, the maximal variance would be <img src="https://latex.codecogs.com/png.latex?(1/2)(1/2)%5E2%20+%20(1/2)(1/2)%5E2=1/4">.</p>
<div id="exm-puzzle-3" class="theorem example">
<p><span class="theorem-title"><strong>Example 3 </strong></span>Let <img src="https://latex.codecogs.com/png.latex?X"> be a random variable such that <img src="https://latex.codecogs.com/png.latex?P(X%20%5Cne%200)%20%3E%200">. Suppose that for some real numbers <img src="https://latex.codecogs.com/png.latex?a"> and <img src="https://latex.codecogs.com/png.latex?b">, the random variables <img src="https://latex.codecogs.com/png.latex?aX"> and <img src="https://latex.codecogs.com/png.latex?bX"> have the same distribution. Is it true that <img src="https://latex.codecogs.com/png.latex?a%20=%20b">? What if we also assume that <img src="https://latex.codecogs.com/png.latex?a"> and <img src="https://latex.codecogs.com/png.latex?b"> are both positive.</p>
</div>
<p><em>Solution</em>.</p>
<p>If <img src="https://latex.codecogs.com/png.latex?aX"> and <img src="https://latex.codecogs.com/png.latex?bX"> have the same mass distribution, they have the same expectation and variance.</p>
<p>Hence, <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%7BE%7D%5BaX%5D%20=%20%5Cmathbb%7BE%7D%5BbX%5D">. So, <img src="https://latex.codecogs.com/png.latex?a%5Cmathbb%7BE%7D%5BX%5D%20=%20b%20%5Cmathbb%7BE%7D%5BX%5D">. Consequently, <img src="https://latex.codecogs.com/png.latex?(a-b)%5Cmathbb%7BE%7D%5BX%5D%20=%200">. If <img src="https://latex.codecogs.com/png.latex?a%20%5Cneq%20b">, then <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%7BE%7D%5BX%5D%20=%200">. For example, consider the <img src="https://latex.codecogs.com/png.latex?U%20%5Csim%20U%5B-1,1%5D"> random variable. Both <img src="https://latex.codecogs.com/png.latex?U"> and <img src="https://latex.codecogs.com/png.latex?-U"> have the same distribution. Also, their second moments must match. So, <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%7BE%7D%5BaX"></p>


</section>

 ]]></description>
  <category>Quant Puzzles</category>
  <guid>http://quantdev.blog/posts/continuous_probability_puzzles/index.html</guid>
  <pubDate>Tue, 21 Oct 2025 23:00:00 GMT</pubDate>
  <media:content url="http://quantdev.blog/posts/continuous_probability_puzzles/image.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Discrete probability puzzles</title>
  <dc:creator>Quasar </dc:creator>
  <link>http://quantdev.blog/posts/discrete-probability-puzzles/index.html</link>
  <description><![CDATA[ 




<section id="puzzles-on-discrete-probability" class="level2">
<h2 class="anchored" data-anchor-id="puzzles-on-discrete-probability">Puzzles on discrete probability</h2>
<div id="exm-puzzle-1" class="theorem example">
<p><span class="theorem-title"><strong>Example 1 </strong></span>We flip a fair coin until we obtain our first heads. If the first heads occurs on the <img src="https://latex.codecogs.com/png.latex?k">-th flip, we are given <img src="https://latex.codecogs.com/png.latex?k"> balls. We put them into 3 bins labeled 1, 2, and 3 at random. Find the probability that none of the three bins are empty.</p>
</div>
<p><em>Solution</em>.</p>
<p>Let <img src="https://latex.codecogs.com/png.latex?A_k"> be the event that the first head occurs on the <img src="https://latex.codecogs.com/png.latex?k">th flip. So, we are interested in the sequence <img src="https://latex.codecogs.com/png.latex?%5Cunderbrace%7BT%20%5Cldots%20T%7D_%7B(k-1)%5Ctext%7B-tails%7D%7DH">. We have:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cmathbb%7BP%7D(A_k)%20=%20%5Cleft(%5Cfrac%7B1%7D%7B2%7D%5Cright)%5E%7Bk-1%7D%20%5Ccdot%20%5Cfrac%7B1%7D%7B2%7D%20=%20%5Cfrac%7B1%7D%7B2%5Ek%7D%0A"></p>
<p>In assigning <img src="https://latex.codecogs.com/png.latex?k"> balls to the bins, we first place one ball in each of the three bins. Remember, the balls are indistinguishable. That leaves us with <img src="https://latex.codecogs.com/png.latex?(k-3)"> balls. <img src="https://latex.codecogs.com/png.latex?(k-3)"> indistinguishable balls can be assigned to <img src="https://latex.codecogs.com/png.latex?n=3"> boxes in <img src="https://latex.codecogs.com/png.latex?%7Bk-1%20%5Cchoose%202%7D"> distinguishable ways. Let <img src="https://latex.codecogs.com/png.latex?B_k"> be the event that none of the bins are empty, given <img src="https://latex.codecogs.com/png.latex?k"> balls</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cmathbb%7BP%7D(B_k%20%7C%20A_k%20)%20=%20%5Cfrac%7B%7Bk-1%20%5Cchoose%202%7D%7D%7B3%5Ek%7D%0A"></p>
<p>distinguishable ways. Hence, the probability that none of the three bins are empty is:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign*%7D%0A%5Cmathbb%7BP%7D(%5Ctext%7BNo%20empty%20bins%7D)%20&amp;=%20%5Cmathbb%7BP%7D(B_3%20%7C%20A_3%20)%5Cmathbb%7BP%7D(A_3)%20+%20%5Cmathbb%7BP%7D(B_4%20%7C%20A_4)%20%5Cmathbb%7BP%7D(A_4)%20+%20%5Cldots%20%5C%5C%0A&amp;=%20%5Csum_%7Bk=3%7D%5E%7B%5Cinfty%7D%5Cfrac%7B1%7D%7B2%5Ek%7D%20%5Cfrac%7B%7Bk-1%20%5Cchoose%202%7D%7D%7B3%5Ek%7D%5C%5C%0A&amp;=%20%5Csum_%7Bk=3%7D%5E%7B%5Cinfty%7D%20%5Cfrac%7B(k-1)k%7D%7B2%7D%5Cfrac%7B1%7D%7B6%5Ek%7D%5C%5C%0A%5Cend%7Balign*%7D%0A"></p>
<p>A closed form expression for the above arithmetico-geometric series can quickly be derived. We have:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign*%7D%0A%5Cfrac%7B1%7D%7B1%20-%20x%7D%20&amp;=%201%20+%20x%20+%20x%5E2%20+%20x%5E3%20+%20x%5E4%20+%20%5Cldots%5C%5C%0A%5Cfrac%7B1%7D%7B(1-x)%5E2%7D%20&amp;=%201%20+%202x%20+%203x%5E2%20+%204x%5E3%20+%20%5Cldots%20%5Cquad%20%5C%7B%5Ctext%7BDifferentiating%20both%20sides%7D%5C%7D%5C%5C%0A%5Cfrac%7B2%7D%7B(1-x)%5E3%7D%20&amp;=%202%20+%203%5Ccdot%202%20x%20+%204%20%5Ccdot%203%20x%5E2%20+%20%5Cldots%20%5Cquad%20%5C%7B%5Ctext%7BDifferentiating%20both%20sides%7D%5C%7D%5C%5C%0A%5Cfrac%7B2x%5E2%7D%7B(1-x)%5E3%7D%20&amp;=%202x%5E2%20+%203%5Ccdot%202%20x%5E3%20+%204%20%5Ccdot%203%20x%5E4%20+%20%5Cldots%20%5Cquad%20%5C%7B%5Ctext%7BMultiplying%20by%20%7Dx%5E2%5C%7D%5C%5C%0A%5Cfrac%7B2x%5E2(1%20-%20(1-x)%5E3)%20%7D%7B(1-x)%5E3%7D%20&amp;=%203%5Ccdot%202%20x%5E3%20+%204%20%5Ccdot%203%20x%5E4%20+%20%5Cldots%5C%5C%0A%5Cfrac%7Bx%5E2(1%20-%20(1-x)%5E3)%20%7D%7B(1-x)%5E3%7D%20&amp;=%20%5Cfrac%7B1%7D%7B2%7D%5Cleft(3%5Ccdot%202%20x%5E3%20+%204%20%5Ccdot%203%20x%5E4%20+%20%5Cldots%5Cright)%5C%5C%0A%5Cfrac%7B%5Cfrac%7B1%7D%7B6%5E2%7D%5Cleft(1-%5Cfrac%7B5%5E3%7D%7B6%5E3%7D%5Cright)%7D%7B%5Cfrac%7B5%5E3%7D%7B6%5E3%7D%7D%20&amp;=%20%5Cfrac%7B1%7D%7B2%7D%5Cleft(3%5Ccdot%202%20%5Cfrac%7B1%7D%7B6%5E3%7D%20+%204%20%5Ccdot%203%20%5Cfrac%7B1%7D%7B6%5E4%7D%20+%20%5Cldots%5Cright)%5C%5C%0A%5Cend%7Balign*%7D%0A"></p>
<p>The desired probability is:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0Ap=%5Cfrac%7B%5Cfrac%7B1%7D%7B6%5E2%7D%5Cleft(1-%5Cfrac%7B5%5E3%7D%7B6%5E3%7D%5Cright)%7D%7B%5Cfrac%7B5%5E3%7D%7B6%5E3%7D%7D%20=%20%5Cfrac%7B1%7D%7B6%5E2%7D%5Cleft(%5Cfrac%7B6%5E3%7D%7B5%5E3%7D%20-%201%5Cright)%20=%20%5Cfrac%7B1%7D%7B6%5E2%7D%20%5Ccdot%20%5Cfrac%7B91%7D%7B125%7D%0A"></p>
<div id="exm-puzzle-2" class="theorem example">
<p><span class="theorem-title"><strong>Example 2 </strong></span>Imagine you have <img src="https://latex.codecogs.com/png.latex?4"> <img src="https://latex.codecogs.com/png.latex?6">-sided dice. What is the probability that you roll a different number on each die?</p>
</div>
<p><em>Solution</em>.</p>
<p><img src="https://latex.codecogs.com/png.latex?%0Ap%20=%20%5Cfrac%7B6%5Ccdot%205%20%5Ccdot%204%20%5Ccdot%203%7D%7B6%5E4%7D%0A"></p>
<div id="exm-puzzle-3" class="theorem example">
<p><span class="theorem-title"><strong>Example 3 </strong></span>What is the probability of flipping exactly <img src="https://latex.codecogs.com/png.latex?5"> heads when flipping <img src="https://latex.codecogs.com/png.latex?10"> fair coins?</p>
</div>
<p><em>Solution</em>.</p>
<p><img src="https://latex.codecogs.com/png.latex?%0AP(k%20=%205)%20=%20%7B10%20%5Cchoose%205%7D%20%5Cfrac%7B1%7D%7B2%5E%7B10%7D%7D%0A"></p>
<div id="exm-puzzle-4" class="theorem example">
<p><span class="theorem-title"><strong>Example 4 </strong></span>Two players are at deuce in a tennis match — player <img src="https://latex.codecogs.com/png.latex?1"> has <img src="https://latex.codecogs.com/png.latex?60"> percent of winning the point and player <img src="https://latex.codecogs.com/png.latex?2"> has <img src="https://latex.codecogs.com/png.latex?40"> percent chance. What are the odds of player 1 winning?</p>
</div>
<p><em>Solution</em></p>
<p>When a game is at the 40-40 mark, a player still needs two clear points to win the game. We can quickly draw the following state diagram to represent the game (it is a discrete-time markov chain).</p>
<div id="fig:markov_chain_01" class="quarto-figure quarto-figure-center anchored">
<figure class="figure">
<p><img src="http://quantdev.blog/posts/discrete-probability-puzzles/markov_chain_01.jpg" class="img-fluid figure-img" data-scale="50%"></p>
<figcaption class="figure-caption">Winning the game</figcaption>
</figure>
</div>
<p>Let the state <img src="https://latex.codecogs.com/png.latex?s_1%20%5Cstackrel%7Bdef%7D%7B=%7D"> the two players are 40-40. And the state <img src="https://latex.codecogs.com/png.latex?s_3%20%5Cstackrel%7Bdef%7D%7B=%7D"> player <img src="https://latex.codecogs.com/png.latex?1"> wins. The states <img src="https://latex.codecogs.com/png.latex?3"> and <img src="https://latex.codecogs.com/png.latex?5"> are absorbing states. Let <img src="https://latex.codecogs.com/png.latex?p_%7B13%7D"> be the hitting probability of state <img src="https://latex.codecogs.com/png.latex?3"> from state <img src="https://latex.codecogs.com/png.latex?1">. We have:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign*%7D%0Ap_%7B13%7D%20&amp;=%200.6%20p_%7B23%7D%20+%200.4%20p_%7B43%7D%5C%5C%0Ap_%7B23%7D%20&amp;=%200.6%20(1)%20+%200.4p_%7B13%7D%5C%5C%0Ap_%7B43%7D%20&amp;=%200.6p_%7B13%7D%20+%200.4(0)%0A%5Cend%7Balign*%7D%0A"></p>
<p>It turns out that <img src="https://latex.codecogs.com/png.latex?p_%7B13%7D%20=%20%5Cfrac%7B9%7D%7B13%7D">.</p>
<div id="exm-puzzle-5" class="theorem example">
<p><span class="theorem-title"><strong>Example 5 </strong></span>You have a plate of spaghetti in front of you (no sauce!). You pick two ends and tie them together. Then you pick two more ends and tie them together. Continue until there are no free ends left. If there were <img src="https://latex.codecogs.com/png.latex?n"> spaghettis originally, what is the probability that you now have a single giant loop consisting of all the spaghettis?</p>
</div>
<p>Let <img src="https://latex.codecogs.com/png.latex?p_n"> be the probability of a single giant loop. <img src="https://latex.codecogs.com/png.latex?n"> spaghettis have <img src="https://latex.codecogs.com/png.latex?2n"> free ends. In each of the <img src="https://latex.codecogs.com/png.latex?n"> trials, you pick <img src="https://latex.codecogs.com/png.latex?2"> ends. At the start, the probability that you don’t tie a sphagetti to itself is</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cfrac%7B2n%7D%7B2n%7D%20%5Ccdot%20%5Cfrac%7B2n%20-%202%7D%7B2n%20-%201%7D%20=%20%5Cfrac%7B2n%20-%202%7D%7B2n%20-%201%7D%0A"></p>
<p>After the first draw, we have reduced the problem to <img src="https://latex.codecogs.com/png.latex?(n-1)"> spaghetti strands and <img src="https://latex.codecogs.com/png.latex?2n-2"> free ends. So, the probability of no-loops is:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0Ap_n%20=%20%20%5Cfrac%7B2n%20-%202%7D%7B2n%20-%201%7D%20%5Ccdot%20p_%7Bn-1%7D%0A"></p>
<p>Extending this to <img src="https://latex.codecogs.com/png.latex?k=(n-1)"> trials: <img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign*%7D%0Ap_n%20&amp;=%20%5Cfrac%7B2n%20-%202%7D%7B2n%20-%201%7D%20%5Ccdot%20%5Cfrac%7B2n-4%7D%7B2n-3%7D%20%5Ccdots%20%5Cfrac%7B2%7D%7B1%7D%5C%5C%0A&amp;=%202%5E%7Bn-1%7D%20%5Cfrac%7B(n-1)!%7D%7B(2n-1)(2n-3)%5Ccdots%201%7D%5C%5C%0A&amp;=%202%5E%7Bn-1%7D%20%5Cfrac%7B2%5En%20n!%20(n-1)!%7D%7B(2n)(2n-1)(2n-2)(2n-3)%20%5Ccdots%201%7D%5C%5C%0A&amp;=%202%5E%7B2n-1%7D%20%5Cfrac%7Bn!%20(n-1)!%7D%7B(2n)!%7D%5C%5C%0A%5Cend%7Balign*%7D%0A"></p>
<div id="exm-puzzle-7" class="theorem example">
<p><span class="theorem-title"><strong>Example 6 </strong></span>An electronic safe has a three digit passcode. You are given three constraints regarding the code. Firstly, the code is not an odd number. Secondly, the code does not contain the number six. Lastly, one of the digits appears more than once. How many possible three digit entries satisfy these three requirements?</p>
</div>
<p><em>Solution</em>.</p>
<p>Since it’s a <img src="https://latex.codecogs.com/png.latex?3">-digit electronic passcode to a safe, <img src="https://latex.codecogs.com/png.latex?0"> is a valid first digit. The last digit must be one of <img src="https://latex.codecogs.com/png.latex?0,2,4,8">. The first digit must be one of <img src="https://latex.codecogs.com/png.latex?%5C%7B0,1,2,%5Cldots,5,7,8,9%5C%7D">. The middle digit must be must be one of <img src="https://latex.codecogs.com/png.latex?%5C%7B0,1,2,%5Cldots,5,7,8,9%5C%7D"></p>
<p>Case I. The first two digits are identical.</p>
<p>There are <img src="https://latex.codecogs.com/png.latex?9%20%5Ctimes%201%20%5Ctimes%204%20=%2036"> such distinguishable codes.</p>
<p>Case II. The last two digits are identical.</p>
<p>There are <img src="https://latex.codecogs.com/png.latex?9%20%5Ctimes%201%20%5Ctimes%204%20=%2036"> such distinguishable codes.</p>
<p>Case III. The first and the third digits are identical.</p>
<p>There are <img src="https://latex.codecogs.com/png.latex?1%20%5Ctimes%209%20%5Ctimes%204%20=%2036"> such distinguishable codes.</p>
<p>Also, <img src="https://latex.codecogs.com/png.latex?000">, <img src="https://latex.codecogs.com/png.latex?222">, <img src="https://latex.codecogs.com/png.latex?444"> and <img src="https://latex.codecogs.com/png.latex?888"> have been overcounted <img src="https://latex.codecogs.com/png.latex?3"> times. They should be accounted for only once. Hence, the number of possible three digit entries satisfying the above requirements are <img src="https://latex.codecogs.com/png.latex?108%20-%208%20=%20100">.</p>
<div id="exm-puzzle-8" class="theorem example">
<p><span class="theorem-title"><strong>Example 7 </strong></span>Suppose we roll <img src="https://latex.codecogs.com/png.latex?5"> standard fair dice and sum the faces of the largest <img src="https://latex.codecogs.com/png.latex?3"> values showing. Find the probability that the sum is <img src="https://latex.codecogs.com/png.latex?18">.</p>
</div>
<p><em>Solution</em>.</p>
<p>To reach a sum of <img src="https://latex.codecogs.com/png.latex?18"> on the largest three die faces, we must get atleast <img src="https://latex.codecogs.com/png.latex?3"> sixes in <img src="https://latex.codecogs.com/png.latex?5"> dice rolls.</p>
<p>Define success as getting a <img src="https://latex.codecogs.com/png.latex?6"> on a die, <img src="https://latex.codecogs.com/png.latex?p%20=%20%5Cfrac%7B1%7D%7B6%7D">, <img src="https://latex.codecogs.com/png.latex?q=%5Cfrac%7B5%7D%7B6%7D"> and let <img src="https://latex.codecogs.com/png.latex?X"> be the number of sixes in <img src="https://latex.codecogs.com/png.latex?5"> die rolls.</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign*%7D%0AP(X%20%5Cge%203)%20&amp;=%201%20-%20(P(X=0)%20+%20P(X=1)%20+%20P(X=2))%5C%5C%0A&amp;=%201%20-%20%5Cleft(%5Cfrac%7B5%7D%7B6%7D%5Cright)%5E5%20-%20%7B5%20%5Cchoose%201%7D%20%5Cleft(%5Cfrac%7B1%7D%7B6%7D%5Cright)%5Cleft(%5Cfrac%7B5%7D%7B6%7D%5Cright)%5E4%20-%20%7B5%20%5Cchoose%202%7D%20%5Cleft(%5Cfrac%7B1%7D%7B6%7D%5Cright)%5E2%5Cleft(%5Cfrac%7B5%7D%7B6%7D%5Cright)%5E3%5C%5C%0A&amp;=%20%5Cfrac%7B23%7D%7B648%7D%0A%5Cend%7Balign*%7D%0A"></p>


</section>

 ]]></description>
  <category>Quant Puzzles</category>
  <guid>http://quantdev.blog/posts/discrete-probability-puzzles/index.html</guid>
  <pubDate>Tue, 21 Oct 2025 23:00:00 GMT</pubDate>
  <media:content url="http://quantdev.blog/posts/discrete-probability-puzzles/image.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Uniformly sampling from the unit disk</title>
  <dc:creator>Quasar </dc:creator>
  <link>http://quantdev.blog/posts/sampling-uniformly-on-the-unit-disk/index.html</link>
  <description><![CDATA[ 




<section id="uniformly-sampling-from-the-unit-disk" class="level1">
<h1>Uniformly sampling from the unit disk</h1>
<p>I was asked this puzzle in a recent quant interview and thought it would be interesting to solve this. We are asked to generate points that are uniformly distributed on the unit circle. This is a really elegant question.</p>
<p>A first approach would be to generate points from the unit square distribution - that is pick <img src="https://latex.codecogs.com/png.latex?U_1%20%5Csim%20U%5B0,1%5D"> and <img src="https://latex.codecogs.com/png.latex?U_2%20%5Csim%20U%5B0,1%5D">, and apply the transform <img src="https://latex.codecogs.com/png.latex?U_1'%20=%20-1%20+%202U_1">, <img src="https://latex.codecogs.com/png.latex?U_2'%20=%20-1%20+%202U_2">, so that the transformed random variables are <img src="https://latex.codecogs.com/png.latex?U%5B-1,1%5D">. We then accept all points that satisfy <img src="https://latex.codecogs.com/png.latex?u_1'%5E2%20+%20u_2'%5E2%20%5Cleq%201"> and reject all points that violate this condition. However, this is not computationally efficient as we are wasting <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B4%20-%20%5Cpi%7D%7B4%7D%20%5Capprox%2020%5C%25"> of the points.</p>
<p>One thing is, if you divide circle in concentric rings of size <img src="https://latex.codecogs.com/png.latex?%5CDelta%20R">, note that the further you are away from the origin, the more area the ring contains. However, we would like a distant ring to have the same density as a ring closer to the origin. So, we need to pick more points in the outer ring then in the inner ring. If we pick points with a probability proportional to the square of the distance from the origin, we should end up with a uniform scattering.</p>
<p>Let <img src="https://latex.codecogs.com/png.latex?u%20=%20F(r)%20=%20r%5E2">. So, <img src="https://latex.codecogs.com/png.latex?r%20=%20%5Csqrt%7Bu%7D">. Thus, <img src="https://latex.codecogs.com/png.latex?R%20%5Cstackrel%7Bdef%7D%7B=%7D%20F%5E%7B-1%7D(U)%20=%20%5Csqrt%7BU%7D"> must have the CDF <img src="https://latex.codecogs.com/png.latex?F_R(r)%20=%20r%5E2"> and density <img src="https://latex.codecogs.com/png.latex?f_R(r)%20=%202r">. We also pick <img src="https://latex.codecogs.com/png.latex?%5CTheta%20%5Csim%20U%5B0,2%5Cpi%5D">. If we project the point <img src="https://latex.codecogs.com/png.latex?%5Cleft(r,%20%5Ctheta%20%5Cright)"> onto the <img src="https://latex.codecogs.com/png.latex?x">- and <img src="https://latex.codecogs.com/png.latex?y">-axis, then we have:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign*%7D%0AX%20&amp;=%20%5Csqrt%7BU%7D%20%5Ccos%20%5CTheta%5C%5C%0AY%20&amp;=%20%5Csqrt%7BU%7D%20%5Csin%20%5CTheta%5C%5C%0A%5Cend%7Balign*%7D%0A"></p>
<p>Then, we have:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign*%7D%0Af_%7BX,Y%7D(x,y)%20&amp;=%20f_%7BR,%5CTheta%7D(r(x,y),%5Ctheta(x,y))%20%5Cfrac%7B%5Cpartial(r,%5Ctheta)%7D%7B%5Cpartial(x,y)%7D%5C%5C%0A&amp;=%202r%20%5Ccdot%20%5Cfrac%7B1%7D%7B2%5Cpi%7D%20%5Cleft%7C%5Cbegin%7Bmatrix%7D%0A%5Cfrac%7B%5Cpartial%7D%7B%5Cpartial%20x%7D%20%5Cfrac%7B1%7D%7B%5Csqrt%7Bx%5E2%20+%20y%5E2%7D%7D%20&amp;%20%5Cfrac%7B%5Cpartial%7D%7B%5Cpartial%20y%7D%20%5Cfrac%7B1%7D%7B%5Csqrt%7Bx%5E2%20+%20y%5E2%7D%7D%20%5C%5C%0A%5Cfrac%7B%5Cpartial%7D%7B%5Cpartial%20x%7D%20%5Carctan%20(y/x)%20&amp;%20%5Cfrac%7B%5Cpartial%7D%7B%5Cpartial%20y%7D%20%5Carctan%20(y/x)%0A%5Cend%7Bmatrix%7D%5Cright%7C%5C%5C%0A&amp;=%202%5Csqrt%7Bx%5E2%20+%20y%5E2%7D%20%5Ccdot%20%5Cfrac%7B1%7D%7B2%5Cpi%7D%20%5Cleft%7C%5Cbegin%7Bmatrix%7D%0A%5Cfrac%7Bx%7D%7B%5Csqrt%7Bx%5E2%20+%20y%5E2%7D%7D%20&amp;%20%5Cfrac%7By%7D%7B%5Csqrt%7Bx%5E2%20+%20y%5E2%7D%7D%20%5C%5C%0A-%5Cfrac%7By%7D%7Bx%5E2%20+%20y%5E2%7D%20&amp;%20%5Cfrac%7Bx%7D%7Bx%5E2%20+%20y%5E2%7D%0A%5Cend%7Bmatrix%7D%5Cright%7C.%5C%5C%0A&amp;%20=%20%5Cfrac%7B1%7D%7B%5Cpi%7D%0A%5Cend%7Balign*%7D%0A"></p>
<section id="numerical-simulation" class="level2">
<h2 class="anchored" data-anchor-id="numerical-simulation">Numerical simulation</h2>
<div class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.patches <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> patches</span>
<span id="cb1-4"></span>
<span id="cb1-5">u <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.uniform(low<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span>, high<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>, size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10000</span>)</span>
<span id="cb1-6">r <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.sqrt(u)</span>
<span id="cb1-7">theta <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>np.pi<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>np.random.uniform(low<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span>, high<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>, size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10000</span>)</span>
<span id="cb1-8">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> r <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> np.cos(theta)</span>
<span id="cb1-9">y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> r <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> np.sin(theta)</span>
<span id="cb1-10"></span>
<span id="cb1-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create fig and axes</span></span>
<span id="cb1-12">fig, ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots()</span>
<span id="cb1-13"></span>
<span id="cb1-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Use patches.Circle() to create the circle. The xy argument is a tuple for the center (x,y) and radius is a float</span></span>
<span id="cb1-15">circle <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> patches.Circle((<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span>), radius <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>, fill<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb1-16"></span>
<span id="cb1-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add the circle to the axes</span></span>
<span id="cb1-18">ax.add_patch(circle)</span>
<span id="cb1-19"></span>
<span id="cb1-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add the (x,y) samples to the axes using the 'scatter' method</span></span>
<span id="cb1-21">ax.scatter(x, y, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'blue'</span>, s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.5</span>)</span>
<span id="cb1-22"></span>
<span id="cb1-23"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Ensure the aspect ratio is equal so the circle isn't distorted</span></span>
<span id="cb1-24">ax.set_aspect(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'equal'</span>, adjustable<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'box'</span>)</span>
<span id="cb1-25"></span>
<span id="cb1-26"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set the plot limits</span></span>
<span id="cb1-27">ax.set_xlim(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb1-28">ax.set_ylim(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb1-29"></span>
<span id="cb1-30">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Uniform sampling from the unit circle'</span>)</span>
<span id="cb1-31">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="http://quantdev.blog/posts/sampling-uniformly-on-the-unit-disk/index_files/figure-html/cell-2-output-1.png" class="img-fluid"></p>
</div>
</div>


</section>
</section>

 ]]></description>
  <category>Quant Puzzles</category>
  <guid>http://quantdev.blog/posts/sampling-uniformly-on-the-unit-disk/index.html</guid>
  <pubDate>Mon, 20 Oct 2025 23:00:00 GMT</pubDate>
  <media:content url="http://quantdev.blog/posts/sampling-uniformly-on-the-unit-disk/image.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Gaussian Processes</title>
  <dc:creator>Quasar </dc:creator>
  <link>http://quantdev.blog/posts/gaussian-processes/index.html</link>
  <description><![CDATA[ 




<section id="gaussian-processes." class="level1">
<h1>Gaussian Processes.</h1>
<section id="random-vectors." class="level2">
<h2 class="anchored" data-anchor-id="random-vectors.">Random Vectors.</h2>
<p>Consider a probability space <img src="https://latex.codecogs.com/png.latex?(%5COmega,%5Cmathcal%7BF%7D,%5Cmathbb%7BP%7D)">. We can define several random variables on <img src="https://latex.codecogs.com/png.latex?%5COmega">. A <img src="https://latex.codecogs.com/png.latex?n">-tuple of random variables on this space is called a random vector. For example, if <img src="https://latex.codecogs.com/png.latex?X_%7B1%7D,X_%7B2%7D,%5Cldots,X_%7Bn%7D"> are random variables on <img src="https://latex.codecogs.com/png.latex?(%5COmega,%5Cmathcal%7BF%7D,%5Cmathbb%7BP%7D)">, then the <img src="https://latex.codecogs.com/png.latex?n">-tuple <img src="https://latex.codecogs.com/png.latex?(X_%7B1%7D,X_%7B2%7D,%5Cldots,X_%7Bn%7D)"> is a random vector on <img src="https://latex.codecogs.com/png.latex?(%5COmega,%5Cmathcal%7BF%7D,%5Cmathbb%7BP%7D)">. The vector is said to be <img src="https://latex.codecogs.com/png.latex?n">-dimensional because it contains <img src="https://latex.codecogs.com/png.latex?n">-variables. We will sometimes denote a random vector by <img src="https://latex.codecogs.com/png.latex?X">.</p>
<p>A good point of view is to think of a random vector <img src="https://latex.codecogs.com/png.latex?X=(X_%7B1%7D,%5Cldots,X_%7Bn%7D)"> as a random variable (point) in <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BR%7D%5E%7Bn%7D">. In other words, for an outcome <img src="https://latex.codecogs.com/png.latex?%5Comega%5Cin%5COmega">, <img src="https://latex.codecogs.com/png.latex?X(%5Comega)"> is a point sampled in <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BR%7D%5E%7Bn%7D">, where <img src="https://latex.codecogs.com/png.latex?X_%7Bj%7D(%5Comega)"> represents the <img src="https://latex.codecogs.com/png.latex?j">-th coordinate of the point. The distribution of <img src="https://latex.codecogs.com/png.latex?X">, denoted <img src="https://latex.codecogs.com/png.latex?%5Cmu_%7BX%7D"> is the probability on <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BR%7D%5E%7Bn%7D">defined by the events related to the values of <img src="https://latex.codecogs.com/png.latex?X">:</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cmathbb%7BP%7D%5C%7BX%5Cin%20A%5C%7D=%5Cmu_%7BX%7D(A)%5Cquad%5Ctext%7Bfor%20a%20subset%20%7DA%5Ctext%7B%20in%20%7D%5Cmathbf%7BR%7D%5E%7Bn%7D"></p>
<p>In other words, <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%7BP%7D(X%5Cin%20A)=%5Cmu_%7BX%7D(A)"> is the probability that the random point <img src="https://latex.codecogs.com/png.latex?X"> falls in <img src="https://latex.codecogs.com/png.latex?A">. The distribution of the vector <img src="https://latex.codecogs.com/png.latex?X"> is also called the joint distribution of <img src="https://latex.codecogs.com/png.latex?(X_%7B1%7D,%5Cldots,X_%7Bn%7D)">.</p>
<div id="def-joint-distribution" class="theorem definition">
<p><span class="theorem-title"><strong>Definition 1 (Joint Distribution) </strong></span>The <strong>joint distribution function</strong> of <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BX%7D=(X,Y)"> is the function <img src="https://latex.codecogs.com/png.latex?F:%5Cmathbf%7BR%7D%5E%7B2%7D%5Cto%5B0,1%5D"> given by:</p>
<p><img src="https://latex.codecogs.com/png.latex?F_%7B%5Cmathbf%7BX%7D%7D(x,y)=%5Cmathbb%7BP%7D(X%5Cleq%20x,Y%5Cleq%20y)"></p>
</div>
<div id="def-joint-density-function" class="theorem definition">
<p><span class="theorem-title"><strong>Definition 2 (Joint density) </strong></span>The joint <strong>PDF</strong> <img src="https://latex.codecogs.com/png.latex?f_%7B%5Cmathbf%7BX%7D%7D(x_%7B1%7D,%5Cldots,x_%7Bn%7D)"> of a random vector <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BX%7D"> is a function <img src="https://latex.codecogs.com/png.latex?f_%7B%5Cmathbf%7BX%7D%7D:%5Cmathbf%7BR%7D%5E%7Bn%7D%5Cto%5Cmathbf%7BR%7D"> such that the probability that <img src="https://latex.codecogs.com/png.latex?X"> falls in a subset <img src="https://latex.codecogs.com/png.latex?A"> of <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BR%7D%5E%7Bn%7D"> and is expressed as the multiple integral of <img src="https://latex.codecogs.com/png.latex?f(x_%7B1%7D,x_%7B2,%7D%5Cldots,x_%7Bn%7D)"> over <img src="https://latex.codecogs.com/png.latex?A">.</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cmathbb%7BP%7D(X%5Cin%20A)=%5Cint_%7BA%7Df(x_%7B1%7D,x_%7B2%7D,%5Cldots,x_%7Bn%7D)dx_%7B1%7Ddx_%7B2%7D%5Cldots%20dx_%7Bn%7D"></p>
</div>
<p>Note that: we must have that the integral of <img src="https://latex.codecogs.com/png.latex?f"> over the whole of <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BR%7D%5E%7Bn%7D"> is <img src="https://latex.codecogs.com/png.latex?1">.</p>
<p>If <img src="https://latex.codecogs.com/png.latex?F"> is differentiable at the point <img src="https://latex.codecogs.com/png.latex?(x,y)">, then we usually specify:</p>
<p><img src="https://latex.codecogs.com/png.latex?f(x,y)=%5Cfrac%7B%5Cpartial%5E%7B2%7D%7D%7B%5Cpartial%20x%5Cpartial%20y%7DF(x,y)"></p>
<div id="thm-law-of-total-probability" class="theorem">
<p><span class="theorem-title"><strong>Theorem 1 (Law of total probability) </strong></span>Let <img src="https://latex.codecogs.com/png.latex?(X,Y)"> be the random variables with joint density function <img src="https://latex.codecogs.com/png.latex?f_%7BX,Y%7D(x,y)">. The marginal density function <img src="https://latex.codecogs.com/png.latex?f_%7BX%7D(x)"> and <img src="https://latex.codecogs.com/png.latex?f_%7BY%7D(y)"> of the random variables <img src="https://latex.codecogs.com/png.latex?X"> and <img src="https://latex.codecogs.com/png.latex?Y"> respectively is given by:</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Baligned%7D%0Af_%7BX%7D(x)%20&amp;%20=%5Cint_%7B-%5Cinfty%7D%5E%7B+%5Cinfty%7Df_%7B(X,Y)%7D(x,y)dy%5C%5C%20f_%7BY%7D(y)%20&amp;%20=%5Cint_%7B-%5Cinfty%7D%5E%7B+%5Cinfty%7Df_%7B(X,Y)%7D(x,y)dx%5Cend%7Baligned%7D"></p>
</div>
<p><em>Proof.</em></p>
<p>We have:</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Baligned%7D%0AF_%7BX%7D(x)%20&amp;%20=P(X%5Cleq%20x)%5C%5C%20&amp;%20=%5Cint_%7B-%5Cinfty%7D%5E%7Bx%7D%5Cint_%7By=-%5Cinfty%7D%5E%7By=+%5Cinfty%7Df(x,y)dydx%5Cend%7Baligned%7D"></p>
<p>Differentiating both sides with respect to <img src="https://latex.codecogs.com/png.latex?x">,</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Baligned%7D%0Af_%7BX%7D(x)%20&amp;%20=%5Cint_%7By=-%5Cinfty%7D%5E%7By=+%5Cinfty%7Df(x,y)dydx%5Cend%7Baligned%7D">&nbsp;</p>
<p>This closes the proof. <img src="https://latex.codecogs.com/png.latex?%5Cblacksquare"></p>
<div id="def-conditional-density-function" class="theorem definition">
<p><span class="theorem-title"><strong>Definition 3 (Conditional density function) </strong></span>For continuous random variables <img src="https://latex.codecogs.com/png.latex?X"> and <img src="https://latex.codecogs.com/png.latex?Y"> with the joint density function <img src="https://latex.codecogs.com/png.latex?f_%7B(X,Y)%7D">, the conditional density of <img src="https://latex.codecogs.com/png.latex?Y"> given <img src="https://latex.codecogs.com/png.latex?X=x"> is:</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Baligned%7D%0Af_%7BY%7CX%7D(y%7Cx)%20&amp;%20=%5Cfrac%7Bf_%7B(X,Y)%7D(x,y)%7D%7Bf_%7BX%7D(x)%7D%5Cend%7Baligned%7D"></p>
<p>for all <img src="https://latex.codecogs.com/png.latex?x"> with <img src="https://latex.codecogs.com/png.latex?f_%7BX%7D(x)%3E0">. This is considered as a function of <img src="https://latex.codecogs.com/png.latex?y"> for a fixed <img src="https://latex.codecogs.com/png.latex?x">. As a convention, in order to make <img src="https://latex.codecogs.com/png.latex?f_%7BY%7CX%7D(y%7Cx)"> well-defined for all real <img src="https://latex.codecogs.com/png.latex?x">, let <img src="https://latex.codecogs.com/png.latex?f_%7BY%7CX%7D(y%7Cx)=0"> for all <img src="https://latex.codecogs.com/png.latex?x"> with <img src="https://latex.codecogs.com/png.latex?f_%7BX%7D(x)=0">.</p>
</div>
<p>We are essentially slicing the the joint density function of <img src="https://latex.codecogs.com/png.latex?f_%7B(X,Y)%7D(x,y)"> by a thin plane <img src="https://latex.codecogs.com/png.latex?X=x">. How can we speak of conditioning on <img src="https://latex.codecogs.com/png.latex?X=x"> for <img src="https://latex.codecogs.com/png.latex?X"> being a continuous random variable, considering that this event has probability zero. Rigorously speaking, we are actually conditioning on the event that <img src="https://latex.codecogs.com/png.latex?X"> falls within a small interval containing <img src="https://latex.codecogs.com/png.latex?x">, say <img src="https://latex.codecogs.com/png.latex?X%5Cin(x-%5Cepsilon,x+%5Cepsilon)"> and then taking the limit as <img src="https://latex.codecogs.com/png.latex?%5Cepsilon"> approaches zero from the right.</p>
<p>We can recover the joint PDF <img src="https://latex.codecogs.com/png.latex?f_%7B(X,Y)%7D"> if we have the conditional PDF <img src="https://latex.codecogs.com/png.latex?f_%7BY%7CX%7D"> and the corresponding marginal <img src="https://latex.codecogs.com/png.latex?f_%7BX%7D">:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Baligned%7D%0Af_%7B(X,Y)%7D(x,y)%20&amp;%20=f_%7BY%7CX%7D(y%7Cx)%5Ccdot%20f_%7BX%7D(x)%0A%5Cend%7Baligned%7D%0A"></p>
<div id="thm-bayes-rule-and-lotp" class="theorem">
<p><span class="theorem-title"><strong>Theorem 2 (Bayes rule and LOTP) </strong></span>Let <img src="https://latex.codecogs.com/png.latex?(X,Y)"> be continuous random variables. We have the following continuous form of the Bayes rule:</p>
<p><img src="https://latex.codecogs.com/png.latex?f_%7BY%7CX%7D(y%7Cx)=%5Cfrac%7Bf_%7BX%7CY%7D(x%7Cy)%5Ccdot%20f_%7BY%7D(y)%7D%7Bf_%7BX%7D(x)%7D"></p>
<p>And we have the following continuous form of the law of total probability:</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Baligned%7D%0Af_%7BX%7D(x)%20&amp;%20=%5Cint_%7By=-%5Cinfty%7D%5E%7By=+%5Cinfty%7Df_%7BX%7CY%7D(x%7Cy)%5Ccdot%20f_%7BY%7D(y)dy%5Cend%7Baligned%7D"></p>
</div>
<p><em>Proof.</em></p>
<p>By the definition of conditional PDFs, we have:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Baligned%7D%0Af_%7BX%7CY%7D(x%7Cy)%5Ccdot%20f_%7BY%7D(y)%20&amp;%20=f_%7B(X,Y)%7D(x,y)=f_%7BY%7CX%7D(y%7Cx)%5Ccdot%20f_%7BX%7D(x)%5Cend%7Baligned%7D%0A"></p>
<p>Dividing throughout by <img src="https://latex.codecogs.com/png.latex?f_%7BX%7D(x)">, we have:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Baligned%7D%0Af_%7BY%7CX%7D(x)%20&amp;%20=%5Cfrac%7Bf_%7BX%7CY%7D(x%7Cy)%5Ccdot%20f_%7BY%7D(y)%7D%7Bf_%7BX%7D(x)%7D=%5Cfrac%7Bf_%7B(X,Y)%7D(x,y)%7D%7Bf_%7BX%7D(x)%7D%5Cend%7Baligned%7D%0A">&nbsp;</p>
<p>This closes the proof. <img src="https://latex.codecogs.com/png.latex?%5Cblacksquare"></p>
<div id="exm-sampling-uniformly" class="theorem example">
<p><span class="theorem-title"><strong>Example 1 </strong></span>(Sampling uniformly in the unit disc). Consider the random vector <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BX%7D=(X,Y)"> corresponding to a random point chosen uniformly in the unit disc <img src="https://latex.codecogs.com/png.latex?%5C%7B(x,y):x%5E%7B2%7D+y%5E%7B2%7D%5Cleq1%5C%7D">. <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BX%7D"> is said to have uniform on the unit circle distribution. In this case the PDF is <img src="https://latex.codecogs.com/png.latex?0"> outside the disc and <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B1%7D%7B%5Cpi%7D"> inside the disc:</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Baligned%7D%0Af(x,y)%20&amp;%20=%5Cfrac%7B1%7D%7B%5Cpi%7D%5Cquad%5Ctext%7B%20if%20%7Dx%5E%7B2%7D+y%5E%7B2%7D%5Cleq1%5Cend%7Baligned%7D"></p>
<p>The random point <img src="https://latex.codecogs.com/png.latex?(X,Y)"> has <img src="https://latex.codecogs.com/png.latex?x">-coordinate <img src="https://latex.codecogs.com/png.latex?X"> and <img src="https://latex.codecogs.com/png.latex?Y"> coordinate <img src="https://latex.codecogs.com/png.latex?Y">. Each of these are random variables and their PDFs and CDFs can be computed. This is a valid PDF, because:</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Baligned%7D%0A%5Cint%5Cint_%7BD%7Df(x,y)dydx%20&amp;%20=%5Cint_%7B-1%7D%5E%7B1%7D%5Cint_%7B-%5Csqrt%7B1-x%5E%7B2%7D%7D%7D%5E%7B%5Csqrt%7B1-x%5E%7B2%7D%7D%7D%5Cfrac%7B1%7D%7B%5Cpi%7Ddydx%5C%5C%20&amp;%20=%5Cfrac%7B1%7D%7B%5Cpi%7D%5Cint_%7B-1%7D%5E%7B1%7D%5Cleft%5By%5Cright%5D_%7B-%5Csqrt%7B1-x%5E%7B2%7D%7D%7D%5E%7B+%5Csqrt%7B1-x%5E%7B2%7D%7D%7Ddx%5C%5C%20&amp;%20=%5Cfrac%7B2%7D%7B%5Cpi%7D%5Cint_%7B-1%7D%5E%7B1%7D%5Csqrt%7B1-x%5E%7B2%7D%7Ddx%5Cend%7Baligned%7D"></p>
<p>Substituting <img src="https://latex.codecogs.com/png.latex?x=%5Csin%5Ctheta">, we have: <img src="https://latex.codecogs.com/png.latex?dx=%5Ccos%5Ctheta%20d%5Ctheta"> and <img src="https://latex.codecogs.com/png.latex?%5Csqrt%7B1-x%5E%7B2%7D%7D=%5Ccos%5Ctheta">. The limits of integration are <img src="https://latex.codecogs.com/png.latex?%5Ctheta=-%5Cpi/2"> to <img src="https://latex.codecogs.com/png.latex?%5Ctheta=%5Cpi/2">. Thus,</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Baligned%7D%0A%5Cint%5Cint_%7BD%7Df(x,y)dydx%20&amp;%20=%5Cfrac%7B2%7D%7B%5Cpi%7D%5Cint_%7B-%5Cpi/2%7D%5E%7B%5Cpi/2%7D%5Ccos%5E%7B2%7D%5Ctheta%20d%5Ctheta%5C%5C%20&amp;%20=%5Cfrac%7B1%7D%7B%5Cpi%7D%5Cint_%7B-%5Cpi/2%7D%5E%7B%5Cpi/2%7D(1+%5Ccos2%5Ctheta)d%5Ctheta%5C%5C%20&amp;%20=%5Cfrac%7B1%7D%7B%5Cpi%7D%5Cleft%5B%5Ctheta+%5Cfrac%7B1%7D%7B2%7D%5Csin2%5Ctheta%5Cright%5D_%7B-%5Cpi/2%7D%5E%7B%5Cpi/2%7D%5C%5C%20&amp;%20=%5Cfrac%7B1%7D%7B%5Cpi%7D%5Ccdot%5Cpi%5C%5C%20&amp;%20=1%5Cend%7Baligned%7D"></p>
<p>The CDF of <img src="https://latex.codecogs.com/png.latex?X"> is given by:</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Baligned%7D%0AF_%7BX%7D(a)%20&amp;%20=%5Cint_%7B-1%7D%5E%7Ba%7D%5Cint_%7B-%5Csqrt%7B1-x%5E%7B2%7D%7D%7D%5E%7B%5Csqrt%7B1-x%5E%7B2%7D%7D%7D%5Cfrac%7B1%7D%7B%5Cpi%7Ddydx%5C%5C%20&amp;%20=%5Cfrac%7B2%7D%7B%5Cpi%7D%5Cint_%7B-1%7D%5E%7Ba%7D%5Csqrt%7B1-x%5E%7B2%7D%7Ddx%5Cend%7Baligned%7D"></p>
<p>I leave it in this integral form. The PDF of <img src="https://latex.codecogs.com/png.latex?X"> is obtained by differentiating the CDF, so it is:</p>
<p><img src="https://latex.codecogs.com/png.latex?f_%7BX%7D(x)=%5Cfrac%7B2%7D%7B%5Cpi%7D%5Csqrt%7B1-x%5E%7B2%7D%7D%5Clabel%7Beq:marginal-pdf-of-X%7D"></p>
</div>
<p>Let’s quickly plot the density of <img src="https://latex.codecogs.com/png.latex?X"> over the domain of the definition <img src="https://latex.codecogs.com/png.latex?-1%5Cleq%20x%5Cleq1">.</p>
<p>::: center Figure. The PDF of the random variable <img src="https://latex.codecogs.com/png.latex?X">. :::</p>
<p>Not suprisingly the distribution of the <img src="https://latex.codecogs.com/png.latex?x">-coordinate is no longer uniform!</p>
<p>If <img src="https://latex.codecogs.com/png.latex?(X_%7B1%7D,X_%7B2%7D,%5Cldots,X_%7Bn%7D)"> is a random vector, the distribution of a single coordinate, say <img src="https://latex.codecogs.com/png.latex?X_%7B1%7D"> is called the <em>marginal distribution</em>. In the example [Uniform-on-the-unit-circle-distribution], the marginal distribution of <img src="https://latex.codecogs.com/png.latex?X"> is determined by the PDF [eq:marginal-pdf-of-X].</p>
<p>Random variables <img src="https://latex.codecogs.com/png.latex?X_%7B1%7D,X_%7B2%7D,%5Cldots,X_%7Bn%7D"> defined on the same probability space are said to be independent if for any intervals <img src="https://latex.codecogs.com/png.latex?A_%7B1%7D,A_%7B2%7D,%5Cldots,A_%7Bn%7D"> in <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BR%7D">, the probability factors:</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cmathbb%7BP%7D(X_%7B1%7D%5Cin%20A_%7B1%7D,X_%7B2%7D%5Cin%20A_%7B2%7D,%5Cldots,X_%7Bn%7D%5Cin%20A_%7Bn%7D)=%5Cmathbb%7BP%7D(X_%7B1%7D%5Cin%20A_%7B1%7D)%5Ctimes%5Cmathbb%7BP%7D(X_%7B2%7D%5Cin%20A_%7B2%7D)%5Ctimes%5Cldots%5Ctimes%5Cmathbb%7BP%7D(X_%7Bn%7D%5Cin%20A_%7Bn%7D)"> We say that the random variables are independent and identically distributed (IID) if they are independent and their marginal distributions are the same.</p>
<p>When the random vector <img src="https://latex.codecogs.com/png.latex?(X_%7B1%7D,X_%7B2%7D,%5Cldots,X_%7Bn%7D)"> has a joint PDF <img src="https://latex.codecogs.com/png.latex?f(x_%7B1%7D,x_%7B2%7D,%5Cldots,x_%7Bn%7D)">, the independence of random variables is equivalent to saying that the joint PDF is given by the product of the marginal PDFs:</p>
<p><img src="https://latex.codecogs.com/png.latex?f(x_%7B1%7D,x_%7B2%7D,%5Cldots,x_%7Bn%7D)=f_%7B1%7D(x_%7B1%7D)%5Ctimes%20f_%7B2%7D(x_%7B2%7D)%5Ctimes%5Cldots%5Ctimes%20f_%7Bn%7D(x_%7Bn%7D)"></p>
</section>
<section id="basic-probabilistic-inequalities." class="level2">
<h2 class="anchored" data-anchor-id="basic-probabilistic-inequalities.">Basic Probabilistic Inequalities.</h2>
<p>Inequalities are extremely useful tools in the theoretical development of probability theory.</p>
<section id="jensens-inequality." class="level3">
<h3 class="anchored" data-anchor-id="jensens-inequality.">Jensen’s inequality.</h3>
<div id="thm-jensens-inequality" class="theorem">
<p><span class="theorem-title"><strong>Theorem 3 </strong></span>If <img src="https://latex.codecogs.com/png.latex?g"> is a convex function, and <img src="https://latex.codecogs.com/png.latex?a%3E0">, <img src="https://latex.codecogs.com/png.latex?b%3E0">, with <img src="https://latex.codecogs.com/png.latex?p%5Cin%5B0,1%5D">, it follows that:</p>
<p><img src="https://latex.codecogs.com/png.latex?g(pa+(1-p)b)%5Cleq%20pg(a)+(1-p)g(b)"></p>
</div>
<p><em>Proof.</em> This directly follows from the definition of convex functions.&nbsp;<img src="https://latex.codecogs.com/png.latex?%5Cblacksquare"></p>
</section>
<section id="jensens-inequality-for-random-variables." class="level3">
<h3 class="anchored" data-anchor-id="jensens-inequality-for-random-variables.">Jensen’s inequality for Random variables.</h3>
<div id="thm-jensens-inequality-for-random-variables" class="theorem">
<p><span class="theorem-title"><strong>Theorem 4 </strong></span>If <img src="https://latex.codecogs.com/png.latex?g"> is a convex function, then it follows that:</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cmathbb%7BE%7D(g(X))%5Cgeq%20g(%5Cmathbb%7BE%7DX)"></p>
</div>
<p><em>Proof.</em></p>
<p>Another way to express the idea, that a function is convex is to observe that the tangent line at an arbitrary point <img src="https://latex.codecogs.com/png.latex?(t,g(t))"> always lies below the curve. Let <img src="https://latex.codecogs.com/png.latex?y=a+bx"> be the tangent to <img src="https://latex.codecogs.com/png.latex?g"> at the point <img src="https://latex.codecogs.com/png.latex?t">. Then, it follows that:</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Baligned%7D%0Aa+bt%20&amp;%20=g(t)%5C%5C%20a+bx%20&amp;%20%5Cleq%20g(x)%5Cend%7Baligned%7D"></p>
<p>for all <img src="https://latex.codecogs.com/png.latex?x">.</p>
<p>Thus, it follows that, for any point <img src="https://latex.codecogs.com/png.latex?t">, there exists <img src="https://latex.codecogs.com/png.latex?b"> such that:</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Baligned%7D%0Ag(x)-g(t)%20&amp;%20%5Cgeq%20b(x-t)%5Cend%7Baligned%7D"></p>
<p>for all <img src="https://latex.codecogs.com/png.latex?x">. Set <img src="https://latex.codecogs.com/png.latex?t=%5Cmathbb%7BE%7DX"> and <img src="https://latex.codecogs.com/png.latex?x=X">. Then,</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Baligned%7D%0Ag(X)-g(%5Cmathbb%7BE%7DX)%20&amp;%20%5Cgeq%20b(X-%5Cmathbb%7BE%7DX)%5Cend%7Baligned%7D"></p>
<p>Taking expectations on both sides and simplifying:</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Baligned%7D%0A%5Cmathbb%7BE%7D%5Cleft(g(X)%5Cright)-g(%5Cmathbb%7BE%7DX)%20&amp;%20%5Cgeq%20b(%5Cmathbb%7BE%7DX-%5Cmathbb%7BE%7DX)=0%5C%5C%20%5Cmathbb%7BE%7Dg(X)%20&amp;%20%5Cgeq%20g(%5Cmathbb%7BE%7DX)%5Cend%7Baligned%7D">&nbsp;</p>
<p>This closes the proof. <img src="https://latex.codecogs.com/png.latex?%5Cblacksquare"></p>
</section>
<section id="youngs-inequality." class="level3">
<h3 class="anchored" data-anchor-id="youngs-inequality.">Young’s Inequality.</h3>
<div id="thm-youngs-inequality" class="theorem">
<p><span class="theorem-title"><strong>Theorem 5 </strong></span>If <img src="https://latex.codecogs.com/png.latex?a%5Cgeq0"> and <strong><img src="https://latex.codecogs.com/png.latex?b%5Cgeq0"></strong> are non-negative real numbers and if <img src="https://latex.codecogs.com/png.latex?p%3E1"> and <img src="https://latex.codecogs.com/png.latex?q%3E1"> are real numbers such that <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B1%7D%7Bp%7D+%5Cfrac%7B1%7D%7Bq%7D=1">, then:</p>
<p><img src="https://latex.codecogs.com/png.latex?ab%5Cleq%5Cfrac%7Ba%5E%7Bp%7D%7D%7Bp%7D+%5Cfrac%7Bb%5E%7Bq%7D%7D%7Bq%7D"></p>
</div>
<p><em>Proof.</em></p>
<p>Consider <img src="https://latex.codecogs.com/png.latex?g(x)=%5Clog%20x">. Being a concave function, Jensen’s inequality can be reversed. We have:</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Baligned%7D%0Ag%5Cleft(%5Cfrac%7B1%7D%7Bp%7Da%5E%7Bp%7D+%5Cfrac%7B1%7D%7Bq%7Db%5E%7Bq%7D%5Cright)%20&amp;%20%5Cgeq%5Cfrac%7B1%7D%7Bp%7Dg(a%5E%7Bp%7D)+%5Cfrac%7B1%7D%7Bq%7Dg(b%5E%7Bq%7D)%5C%5C%20%5Clog%5Cleft(%5Cfrac%7B1%7D%7Bp%7Da%5E%7Bp%7D+%5Cfrac%7B1%7D%7Bq%7Db%5E%7Bq%7D%5Cright)%20&amp;%20%5Cgeq%5Cfrac%7B1%7D%7Bp%7D%5Clog(a%5E%7Bp%7D)+%5Cfrac%7B1%7D%7Bq%7D%5Clog(b%5E%7Bq%7D)%5C%5C%20%5Clog%5Cleft(%5Cfrac%7B1%7D%7Bp%7Da%5E%7Bp%7D+%5Cfrac%7B1%7D%7Bq%7Db%5E%7Bq%7D%5Cright)%20&amp;%20%5Cgeq%5Cfrac%7B1%7D%7Bp%7D%5Ccdot%20p%5Clog(a)+%5Cfrac%7B1%7D%7Bq%7D%5Ccdot%20q%5Clog(b)%5C%5C%20%5Clog%5Cleft(%5Cfrac%7B1%7D%7Bp%7Da%5E%7Bp%7D+%5Cfrac%7B1%7D%7Bq%7Db%5E%7Bq%7D%5Cright)%20&amp;%20%5Cgeq%5Clog%20ab%5Cend%7Baligned%7D"></p>
<p>By the Monotonicity of the <img src="https://latex.codecogs.com/png.latex?%5Clog%20x"> function, it follows that :</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Baligned%7D%0Aab%20&amp;%20%5Cleq%5Cfrac%7Ba%5E%7Bp%7D%7D%7Bp%7D+%5Cfrac%7Bb%5E%7Bq%7D%7D%7Bq%7D%5Cend%7Baligned%7D">&nbsp;</p>
<p>This closes the proof. <img src="https://latex.codecogs.com/png.latex?%5Cblacksquare"></p>
</section>
<section id="chebyshevs-inequality." class="level3">
<h3 class="anchored" data-anchor-id="chebyshevs-inequality.">Chebyshev’s inequality.</h3>
<p>One of the simplest and very useful probabilistic inequalities is a tail bound by expectation: the so called Chebyshev’s inequality.</p>
<div id="thm-chebyshevs-inequality" class="theorem">
<p><span class="theorem-title"><strong>Theorem 6 (Chebyshev’s inequality) </strong></span>If <img src="https://latex.codecogs.com/png.latex?X"> is a non-negative random variable, then for every <img src="https://latex.codecogs.com/png.latex?t%5Cgeq0">:</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cmathbb%7BP%7D(X%5Cgeq%20t)%5Cleq%5Cfrac%7B1%7D%7Bt%7D%5Cmathbb%7BE%7DX"></p>
</div>
<p><em>Proof.</em></p>
<p>We have:</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Baligned%7D%0At%5Ccdot%5Cmathbf%7B1%7D_%7B%5C%7BX%5Cgeq%20t%5C%7D%7D%20&amp;%20%5Cleq%20X%5Ccdot%5Cmathbf%7B1%7D_%7B%5C%7BX%5Cgeq%20t%5C%7D%7D%5Cend%7Baligned%7D"></p>
<p>By the monotonicity of expectations, we have:</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Baligned%7D%0A%5Cmathbb%7BE%7D%5Cmathbf%7B1%7D_%7B%5C%7BX%5Cgeq%20t%5C%7D%7D%20&amp;%20%5Cleq%5Cfrac%7B1%7D%7Bt%7D%5Cmathbb%7BE%7DX%5C%5C%20%5Cimplies%5Cmathbb%7BP%7D%5C%7BX%5Cgeq%20t%5C%7D%20&amp;%20%5Cleq%5Cfrac%7B1%7D%7Bt%7D%5Cmathbb%7BE%7DX%5Cend%7Baligned%7D"></p>
<p>This closes the proof.&nbsp;<img src="https://latex.codecogs.com/png.latex?%5Cblacksquare"></p>
<p>There are several variants, easily deduced from Chebyshev’s inequality using monotonicity of several functions. For a non-negative random variable <img src="https://latex.codecogs.com/png.latex?X"> and <img src="https://latex.codecogs.com/png.latex?t%3E0">, using the power function <img src="https://latex.codecogs.com/png.latex?x%5E%7Bp%7D">, <img src="https://latex.codecogs.com/png.latex?p%3E0">, we get:</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cmathbb%7BP%7D(X%5Cgeq%20t)=%5Cmathbb%7BP%7D(X%5E%7Bp%7D%5Cgeq%20t%5E%7Bp%7D)%5Cleq%5Cfrac%7B1%7D%7Bt%5E%7Bp%7D%7D%5Cmathbb%7BE%7DX%5E%7Bp%7D"></p>
<p>For a real valued random variable <img src="https://latex.codecogs.com/png.latex?X">, every <img src="https://latex.codecogs.com/png.latex?t%5Cin%5Cmathbf%7BR%7D">, using the square function <img src="https://latex.codecogs.com/png.latex?x%5E%7B2%7D"> and variance, we have:</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cmathbb%7BP%7D(%7CX-%5Cmathbb%7BE%7DX%7C%5Cgeq%20t)%5Cleq%5Cfrac%7B1%7D%7Bt%5E%7B2%7D%7D%5Cmathbb%7BE%7D%7CX-%5Cmathbb%7BE%7DX%7C%5E%7B2%7D=%5Cfrac%7B1%7D%7Bt%5E%7B2%7D%7DVar(X)"></p>
<p>For a real-valued random variable <img src="https://latex.codecogs.com/png.latex?X">, every <img src="https://latex.codecogs.com/png.latex?t%5Cin%5Cmathbf%7BR%7D"> and <img src="https://latex.codecogs.com/png.latex?%5Clambda%3E0">, using the exponential function <img src="https://latex.codecogs.com/png.latex?e%5E%7B%5Clambda%20x%7D">(which is monotonic), we have:</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cmathbb%7BP%7D(X%5Cgeq%20t)=%5Cmathbb%7BP%7D(%5Clambda%20X%5Cgeq%5Clambda%20t)=%5Cmathbb%7BP%7D(e%5E%7B%5Clambda%20X%7D%5Cgeq%20e%5E%7B%5Clambda%20t%7D)%5Cleq%5Cfrac%7B1%7D%7Be%5E%7B%5Clambda%20t%7D%7D%5Cmathbb%7BE%7De%5E%7B%5Clambda%20X%7D"></p>
<p>Our next inequality, the so-called Holder’s inequality is a very effective inequality to factor out the expectation of a product.</p>
</section>
<section id="holders-inequality." class="level3">
<h3 class="anchored" data-anchor-id="holders-inequality.">Holder’s inequality.</h3>
<div id="thm-holders-inequality" class="theorem">
<p><span class="theorem-title"><strong>Theorem 7 </strong></span>Let <img src="https://latex.codecogs.com/png.latex?p,q%5Cgeq1"> be such that <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B1%7D%7Bp%7D+%5Cfrac%7B1%7D%7Bq%7D=1">, For random variables <img src="https://latex.codecogs.com/png.latex?X"> and <img src="https://latex.codecogs.com/png.latex?Y">, we have:</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Baligned%7D%0A%5Cmathbb%7BE%7D%7CXY%7C%20&amp;%20%5Cleq%5Cleft(%5Cmathbb%7BE%7D%7CX%5E%7Bp%7D%7C%5Cright)%5E%7B1/p%7D%5Cleft(%5Cmathbb%7BE%7D%7CY%5E%7Bq%7D%7C%5Cright)%5E%7B1/q%7D%5Cend%7Baligned%7D"></p>
</div>
<p><em>Proof.</em> From the Young’s inequality, for any <img src="https://latex.codecogs.com/png.latex?a,b%5Cin%5Cmathbf%7BR%7D">, <img src="https://latex.codecogs.com/png.latex?p,q%5Cgeq1">, we have:</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Baligned%7D%0Aab%20&amp;%20%5Cleq%5Cfrac%7Ba%5E%7Bp%7D%7D%7Bp%7D+%5Cfrac%7Bb%5E%7Bq%7D%7D%7Bq%7D%5Cend%7Baligned%7D"></p>
<p>Setting <img src="https://latex.codecogs.com/png.latex?a=%5Cfrac%7B%7CX%7C%7D%7B%5Cleft(%5Cmathbb%7BE%7D%7CX%5E%7Bp%7D%7C%5Cright)%5E%7B1/p%7D%7D"> and <img src="https://latex.codecogs.com/png.latex?b=%5Cfrac%7B%7CY%7C%7D%7B%5Cleft(%5Cmathbb%7BE%7D%7CY%5E%7Bq%7D%7C%5Cright)%5E%7B1/q%7D%7D">, we get:</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Baligned%7D%0A%5Cfrac%7B%7CXY%7C%7D%7B%5Cleft(%5Cmathbb%7BE%7D%7CX%5E%7Bp%7D%7C%5Cright)%5E%7B1/p%7D%5Cleft(%5Cmathbb%7BE%7D%7CY%5E%7Bq%7D%7C%5Cright)%5E%7B1/q%7D%7D%20&amp;%20%5Cleq%5Cfrac%7B1%7D%7Bp%7D%5Ccdot%5Cfrac%7B%7CX%7C%5E%7Bp%7D%7D%7B%5Cmathbb%7BE%7D%7CX%5E%7Bp%7D%7C%7D+%5Cfrac%7B1%7D%7Bq%7D%5Ccdot%5Cfrac%7B%7CY%7C%5E%7Bq%7D%7D%7B%5Cmathbb%7BE%7D%7CY%5E%7Bq%7D%7C%7D%5Cend%7Baligned%7D"></p>
<p>Taking expectations on both sides, and using the monotonicity of expectation property, we get:</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Baligned%7D%0A%5Cfrac%7B%5Cmathbb%7BE%7D%7CXY%7C%7D%7B%5Cleft(%5Cmathbb%7BE%7D%7CX%5E%7Bp%7D%7C%5Cright)%5E%7B1/p%7D%5Cleft(%5Cmathbb%7BE%7D%7CY%5E%7Bq%7D%7C%5Cright)%5E%7B1/q%7D%7D%20&amp;%20%5Cleq%5Cfrac%7B1%7D%7Bp%7D%5Ccdot%5Cfrac%7B%5Cmathbb%7BE%7D%7CX%7C%5E%7Bp%7D%7D%7B%5Cmathbb%7BE%7D%7CX%5E%7Bp%7D%7C%7D+%5Cfrac%7B1%7D%7Bq%7D%5Ccdot%5Cfrac%7B%5Cmathbb%7BE%7D%7CY%7C%5E%7Bq%7D%7D%7B%5Cmathbb%7BE%7D%7CY%5E%7Bq%7D%7C%7D=%5Cfrac%7B1%7D%7Bp%7D+%5Cfrac%7B1%7D%7Bq%7D=1%5Cend%7Baligned%7D"></p>
<p>Consequently,</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Baligned%7D%0A%5Cmathbb%7BE%7D%7CXY%7C%20&amp;%20%5Cleq%5Cleft(%5Cmathbb%7BE%7D%7CX%5E%7Bp%7D%7C%5Cright)%5E%7B1/p%7D%5Cleft(%5Cmathbb%7BE%7D%7CY%5E%7Bq%7D%7C%5Cright)%5E%7B1/q%7D%5Cend%7Baligned%7D"></p>
<p>Let <img src="https://latex.codecogs.com/png.latex?p=2"> and <img src="https://latex.codecogs.com/png.latex?q=2">. Then, we get the Cauchy-Schwarz inequality:</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Baligned%7D%0A%5Cmathbb%7BE%7D%7CXY%7C%20&amp;%20%5Cleq%5Cleft%5B%5Cmathbb%7BE%7D(X%5E%7B2%7D)%5Cright%5D%5E%7B1/2%7D%5Cleft%5B%5Cmathbb%7BE%7D(Y%5E%7B2%7D)%5Cright%5D%5E%7B1/2%7D%5Cend%7Baligned%7D"></p>
<p>In some ways, the <img src="https://latex.codecogs.com/png.latex?p">-th moment of a random variable can be thought of as it’s length or <img src="https://latex.codecogs.com/png.latex?p">-norm.</p>
<p>Define:</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cleft%5CVert%20X%5Cright%5CVert%20_%7Bp%7D=%5Cleft(%5Cmathbb%7BE%7D%7CX%7C%5E%7Bp%7D%5Cright)%5E%7B1/p%7D">&nbsp;</p>
<p>This closes the proof. <img src="https://latex.codecogs.com/png.latex?%5Cblacksquare"></p>
</section>
<section id="minkowskis-inequality." class="level3">
<h3 class="anchored" data-anchor-id="minkowskis-inequality.">Minkowski’s Inequality.</h3>
<div id="thm-minkowskis-inequality" class="theorem">
<p><span class="theorem-title"><strong>Theorem 8 </strong></span>For random variables <img src="https://latex.codecogs.com/png.latex?X"> and <img src="https://latex.codecogs.com/png.latex?Y">, and for all <img src="https://latex.codecogs.com/png.latex?p%5Cgeq1"> we have:</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cleft%5CVert%20X+Y%5Cright%5CVert%20_%7Bp%7D%5Cleq%5Cleft%5CVert%20X%5Cright%5CVert%20_%7Bp%7D+%5Cleft%5CVert%20Y%5Cright%5CVert%20_%7Bp%7D"></p>
</div>
<p><em>Proof.</em></p>
<p>The basic idea of the proof is to use Holder’s inequality. Let <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B1%7D%7Bq%7D=1-%5Cfrac%7B1%7D%7Bp%7D"> or in other words, <img src="https://latex.codecogs.com/png.latex?q=%5Cfrac%7Bp%7D%7Bp-1%7D">. We have:</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Baligned%7D%0A%5Cmathbb%7BE%7D%7CX%7C%7CX+Y%7C%5E%7Bp-1%7D%20&amp;%20%5Cleq%5Cleft(%5Cmathbb%7BE%7D%7CX%7C%5E%7Bp%7D%5Cright)%5E%7B1/p%7D%5Cleft(%5Cmathbb%7BE%7D%7CX+Y%7C%5E%7B(p-1)q%7D%5Cright)%5E%7B1/q%7D%20&amp;%20(a)%5C%5C%20%5Cmathbb%7BE%7D%7CY%7C%7CX+Y%7C%5E%7Bp-1%7D%20&amp;%20%5Cleq%5Cleft(%5Cmathbb%7BE%7D%7CY%7C%5E%7Bp%7D%5Cright)%5E%7B1/p%7D%5Cleft(%5Cmathbb%7BE%7D%7CX+Y%7C%5E%7B(p-1)q%7D%5Cright)%5E%7B1/q%7D%20&amp;%20(b)%5Cend%7Baligned%7D"></p>
<p>Adding the above two equations, we get:</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Baligned%7D%0A%5Cmathbb%7BE%7D(%7CX+Y%7C%7CX+Y%7C%5E%7Bp-1%7D)%5Cleq%5Cmathbb%7BE%7D(%7CX%7C+%7CY%7C)(%7CX+Y%7C%5E%7Bp-1%7D)%20&amp;%20%5Cleq%5Cleft%5C%7B%20%5Cleft(%5Cmathbb%7BE%7D%7CX%7C%5E%7Bp%7D%5Cright)%5E%7B1/p%7D+%5Cleft(%5Cmathbb%7BE%7D%7CY%7C%5E%7Bp%7D%5Cright)%5E%7B1/p%7D%5Cright%5C%7D%20%5Cleft(%5Cmathbb%7BE%7D%7CX+Y%7C%5E%7B(p-1)q%7D%5Cright)%5E%7B1/q%7D%5C%5C%20%5Cmathbb%7BE%7D%7CX+Y%7C%5E%7Bp%7D%20&amp;%20%5Cleq%5Cleft%5C%7B%20%5Cleft%5CVert%20X%5Cright%5CVert%20_%7Bp%7D+%5Cleft%5CVert%20Y%5Cright%5CVert%20_%7Bp%7D%5Cright%5C%7D%20%5Cleft(%5Cmathbb%7BE%7D%7CX+Y%7C%5E%7Bp%7D%5Cright)%5E%7B1/q%7D%5C%5C%20%5Cleft(%5Cmathbb%7BE%7D%7CX+Y%7C%5E%7Bp%7D%5Cright)%5E%7B1/p%7D%20&amp;%20%5Cleq%5Cleft%5CVert%20X%5Cright%5CVert%20_%7Bp%7D+%5Cleft%5CVert%20Y%5Cright%5CVert%20_%7Bp%7D%5C%5C%20%5Cleft%5CVert%20X+Y%5Cright%5CVert%20_%7Bp%7D%20&amp;%20%5Cleq%5Cleft%5CVert%20X%5Cright%5CVert%20_%7Bp%7D+%5Cleft%5CVert%20Y%5Cright%5CVert%20_%7Bp%7D%5Cend%7Baligned%7D">&nbsp;</p>
<p>This closes the proof. <img src="https://latex.codecogs.com/png.latex?%5Cblacksquare"></p>
</section>
</section>
<section id="a-quick-refresher-of-linear-algebra." class="level2">
<h2 class="anchored" data-anchor-id="a-quick-refresher-of-linear-algebra.">A quick refresher of linear algebra.</h2>
<p>Many of the concepts in this chapter have very elegant interpretations, if we think of real-valued random variables on a probability space as vectors in a vector space. In particular, variance is related to the concept of norm and distance, while covariance is related to inner-products. These concepts can help unify some of the ideas in this chapter from a geometric point of view. Of course, real-valued random variables are simply measurable, real-valued functions on the abstract space <img src="https://latex.codecogs.com/png.latex?%5COmega."></p>
<div id="def-vector-space" class="theorem definition">
<p><span class="theorem-title"><strong>Definition 4 (Vector Space.) </strong></span>By a vector space, we mean a non-empty set <img src="https://latex.codecogs.com/png.latex?V"> with two operations: :::</p>
<ul>
<li><p>Vector addition: <img src="https://latex.codecogs.com/png.latex?+:(%5Cmathbf%7Bx%7D,%5Cmathbf%7By%7D)%5Cto%5Cmathbf%7Bx%7D+%5Cmathbf%7By%7D"></p></li>
<li><p>Scalar multiplication: <img src="https://latex.codecogs.com/png.latex?%5Ccdot:(%5Calpha,%5Cmathbf%7Bx%7D)%5Cto%5Calpha%5Cmathbf%7Bx%7D"></p></li>
</ul>
<p>such that the following conditions are satisfied:</p>
<p>(A1) Commutativity. <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7Bx%7D+%5Cmathbf%7By%7D=%5Cmathbf%7By%7D+%5Cmathbf%7Bx%7D"> for all <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7Bx%7D,%5Cmathbf%7By%7D%5Cin%20V"></p>
<p>(A2) Associativity: <img src="https://latex.codecogs.com/png.latex?(%5Cmathbf%7Bx%7D+%5Cmathbf%7By%7D)+%5Cmathbf%7Bz%7D=%5Cmathbf%7Bx%7D+(%5Cmathbf%7By%7D+%5Cmathbf%7Bz%7D)"> for all <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7Bx%7D,%5Cmathbf%7By%7D,%5Cmathbf%7Bz%7D%5Cin%20V"></p>
<p>(A3) Zero Element: There exists a zero element, denoted <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7B0%7D"> in <img src="https://latex.codecogs.com/png.latex?V">, for all <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7Bx%7D%5Cin%20V">, such that <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7Bx%7D+%5Cmathbf%7B0%7D=%5Cmathbf%7Bx%7D">.</p>
<p>(A4) Additive Inverse: For all <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7Bx%7D%5Cin%20V">, there exists an additive inverse(negative element) denoted <img src="https://latex.codecogs.com/png.latex?-%5Cmathbf%7Bx%7D"> in <img src="https://latex.codecogs.com/png.latex?V">, such that <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7Bx%7D+(-%5Cmathbf%7Bx%7D)=%5Cmathbf%7B0%7D">.</p>
<p>(M1) Scalar multiplication by identity element in <img src="https://latex.codecogs.com/png.latex?F">: For all <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7Bx%7D%5Cin%20V">, <img src="https://latex.codecogs.com/png.latex?1%5Ccdot%5Cmathbf%7Bx%7D=%5Cmathbf%7Bx%7D">, where <img src="https://latex.codecogs.com/png.latex?1"> denotes the multiplicative identity in <img src="https://latex.codecogs.com/png.latex?F">.</p>
<p>(M2) Scalar multiplication and field multiplication mix well: For all <img src="https://latex.codecogs.com/png.latex?%5Calpha,%5Cbeta%5Cin%20F"> and <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7Bv%7D%5Cin%20V">, <img src="https://latex.codecogs.com/png.latex?(%5Calpha%5Cbeta)%5Cmathbf%7Bv%7D=%5Calpha(%5Cbeta%5Cmathbf%7Bv%7D)">.</p>
<p>(D1) Distribution of scalar multiplication over vector addition: For all <img src="https://latex.codecogs.com/png.latex?%5Calpha%5Cin%20F">, and <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7Bu%7D,%5Cmathbf%7Bv%7D%5Cin%20V">, <img src="https://latex.codecogs.com/png.latex?%5Calpha(%5Cmathbf%7Bu%7D+%5Cmathbf%7Bv%7D)=%5Calpha%5Cmathbf%7Bu%7D+%5Calpha%5Cmathbf%7Bv%7D">.</p>
<p>(D2) Distribution of field addition over scalar multiplication: For all <img src="https://latex.codecogs.com/png.latex?%5Calpha,%5Cbeta%5Cin%20F">, and <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7Bv%7D%5Cin%20V">, <img src="https://latex.codecogs.com/png.latex?(%5Calpha+%5Cbeta)%5Cmathbf%7Bv%7D=%5Calpha%5Cmathbf%7Bv%7D+%5Cbeta%5Cmathbf%7Bv%7D">.</p>
</div>
<p>As usual, our starting point is a random experiment modeled by a probability space <img src="https://latex.codecogs.com/png.latex?(%5COmega,%5Cmathcal%7BF%7D,%5Cmathbb%7BP%7D)">, so that <img src="https://latex.codecogs.com/png.latex?%5COmega"> is the set of outcomes, <img src="https://latex.codecogs.com/png.latex?%5Cmathscr%7B%5Cmathcal%7BF%7D%7D"> is the <img src="https://latex.codecogs.com/png.latex?%5Csigma">-algebra of events and <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%7BP%7D"> is the probability measure on the measurable space <img src="https://latex.codecogs.com/png.latex?(%5COmega,%5Cmathcal%7BF%7D)">. Our basic vector space <img src="https://latex.codecogs.com/png.latex?V"> consists of all real-valued random variables defined on <img src="https://latex.codecogs.com/png.latex?(%5COmega,%5Cmathcal%7BF%7D,%5Cmathbb%7BP%7D)">. We define vector addition and scalar multiplication in the usual way point-wise.</p>
<ul>
<li><p>Vector addition: <img src="https://latex.codecogs.com/png.latex?(X+Y)(%5Comega)=X(%5Comega)+Y(%5Comega)">.</p></li>
<li><p>Scalar multiplication: <img src="https://latex.codecogs.com/png.latex?(%5Calpha%20X)(%5Comega)=%5Calpha%20X(%5Comega)"></p></li>
</ul>
<p>Clearly, any function <img src="https://latex.codecogs.com/png.latex?g"> of a random variable <img src="https://latex.codecogs.com/png.latex?X(%5Comega)"> is also a random variable on the same probability space and any linear combination of random variables on <img src="https://latex.codecogs.com/png.latex?(%5COmega,%5Cmathcal%7BF%7D,%5Cmathbb%7BP%7D)"> also define a new random variable on the same probability space. Thus, <img src="https://latex.codecogs.com/png.latex?V"> is closed under vector addition and scalar-multiplication. Since vector-addition and scalar multiplication is defined point-wise, it is easy to see that - all the axioms of a vector space (A1)-(A4), (M1-M2), (D1), (D2) are satisfied. The constantly zero random variable <img src="https://latex.codecogs.com/png.latex?0(%5Comega)=0"> and the indicator random variable <img src="https://latex.codecogs.com/png.latex?I_%7B%5COmega%7D(%5Comega)"> can be thought of as the zero and identity vectors in this vector space.</p>
<p>Clearly, any function <img src="https://latex.codecogs.com/png.latex?g"> of a random variable <img src="https://latex.codecogs.com/png.latex?X(%5Comega)"> is also a random variable on the same probability space and any linear combination of random variables on <img src="https://latex.codecogs.com/png.latex?(%5COmega,%5Cmathcal%7BF%7D,%5Cmathbb%7BP%7D)"> also define a new random variable on the same probability space. Thus, <img src="https://latex.codecogs.com/png.latex?V"> is closed under vector addition and scalar-multiplication. Since vector-addition and scalar multiplication is defined point-wise, it is easy to see that - all the axioms of a vector space (A1)-(A4), (M1-M2), (D1), (D2) are satisfied. The constantly zero random variable <img src="https://latex.codecogs.com/png.latex?0(%5Comega)=0"> and the indicator random variable <img src="https://latex.codecogs.com/png.latex?I_%7B%5COmega%7D(%5Comega)"> can be thought of as the zero and identity vectors in this vector space.</p>
<section id="inner-products." class="level3">
<h3 class="anchored" data-anchor-id="inner-products.">Inner Products.</h3>
<p>In Euclidean geometry, the angle between two vectors is specified by their dot product, which is itself formalized by the abstract concept of inner products.</p>
<div id="def-inner-product" class="theorem definition">
<p><span class="theorem-title"><strong>Definition 5 (Inner Product.) </strong></span>An inner product on the real vector space <img src="https://latex.codecogs.com/png.latex?V"> is a pairing that takes two vectors <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7Bv%7D,%5Cmathbf%7Bw%7D%5Cin%20V"> and produces a real number <img src="https://latex.codecogs.com/png.latex?%5Cleft%5Clangle%20%5Cmathbf%7Bv%7D,%5Cmathbf%7Bw%7D%5Cright%5Crangle%20%5Cin%5Cmathbf%7BR%7D">. The inner product is required to satisfy the following three axioms for all <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7Bu%7D,%5Cmathbf%7Bv%7D,%5Cmathbf%7Bw%7D%5Cin%20V"> and scalars <img src="https://latex.codecogs.com/png.latex?c,d%5Cin%5Cmathbf%7BR%7D">.</p>
<ol type="1">
<li>Bilinearity: <img src="https://latex.codecogs.com/png.latex?%0A%5Cleft%5Clangle%20c%5Cmathbf%7Bu%7D+d%5Cmathbf%7Bv%7D,%5Cmathbf%7Bw%7D%5Cright%5Crangle%20=c%5Cleft%5Clangle%20%5Cmathbf%7Bu%7D,%5Cmathbf%7Bw%7D%5Cright%5Crangle%20+d%5Cleft%5Clangle%20%5Cmathbf%7Bv%7D,%5Cmathbf%7Bw%7D%5Cright%5Crangle%0A"></li>
</ol>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cleft%5Clangle%20%5Cmathbf%7Bu%7D,c%5Cmathbf%7Bv%7D+d%5Cmathbf%7Bw%7D%5Cright%5Crangle%20=c%5Cleft%5Clangle%20%5Cmathbf%7Bu%7D,%5Cmathbf%7Bv%7D%5Cright%5Crangle%20+d%5Cleft%5Clangle%20%5Cmathbf%7Bu%7D,%5Cmathbf%7Bw%7D%5Cright%5Crangle%0A"></p>
<ol start="2" type="1">
<li>Symmetry:</li>
</ol>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cleft%5Clangle%20%5Cmathbf%7Bv%7D,%5Cmathbf%7Bw%7D%5Cright%5Crangle%20=%5Cleft%5Clangle%20%5Cmathbf%7Bw%7D,%5Cmathbf%7Bv%7D%5Cright%5Crangle%0A"></p>
<ol start="3" type="1">
<li>Positive Definiteness:</li>
</ol>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cleft%5Clangle%20%5Cmathbf%7Bv%7D,%5Cmathbf%7Bv%7D%5Cright%5Crangle%20%3E0%5Cquad%5Ctext%7B%20whenever%20%7D%5Cmathbf%7Bv%5Cneq%5Cmathbf%7B0%7D%7D%0A"></p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cleft%5Clangle%20%5Cmathbf%7Bv%7D,%5Cmathbf%7Bv%7D%5Cright%5Crangle%20=0%5Cquad%5Ctext%7B%20whenever%20%7D%5Cmathbf%7Bv=0%7D%0A"></p>
</div>
<div id="def-norm" class="theorem definition">
<p><span class="theorem-title"><strong>Definition 6 </strong></span>(Norm). A norm on a real vector space <img src="https://latex.codecogs.com/png.latex?V"> is a function <img src="https://latex.codecogs.com/png.latex?%5Cleft%5CVert%20%5Ccdot%5Cright%5CVert%20:V%5Cto%5Cmathbf%7BR%7D"> satisfying :</p>
<p>(i) Positive Definiteness.</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cleft%5CVert%20%5Cmathbf%7Bv%7D%5Cright%5CVert%20%5Cgeq0"></p>
<p>and <img src="https://latex.codecogs.com/png.latex?%5Cleft%5CVert%20%5Cmathbf%7Bv%7D%5Cright%5CVert%20=0%5Cquad%5Ctext%7Bif%20and%20only%20if%20%7D%5Cmathbf%7Bv%7D=%5Cmathbf%7B0%7D"></p>
<p>(ii) Scalar multiplication.</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cleft%5CVert%20%5Calpha%5Cmathbf%7Bv%7D%5Cright%5CVert%20=%7C%5Calpha%7C%5Cleft%5CVert%20%5Cmathbf%7Bv%7D%5Cright%5CVert"></p>
<p>(iii) Triangle Inequality.</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cleft%5CVert%20%5Cmathbf%7Bx+y%7D%5Cright%5CVert%20%5Cleq%5Cleft%5CVert%20%5Cmathbf%7Bx%7D%5Cright%5CVert%20+%5Cleft%5CVert%20%5Cmathbf%7By%7D%5Cright%5CVert"></p>
</div>
<p>As mentioned earlier, we can define the <img src="https://latex.codecogs.com/png.latex?p">-norm of a random variable as:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Baligned%7D%0A%5Cleft%5CVert%20X%5Cright%5CVert%20_%7Bp%7D%20&amp;%20=%5Cleft(%5Cmathbb%7BE%7D%7CX%7C%5E%7Bp%7D%5Cright)%5E%7B1/p%7D%0A%5Cend%7Baligned%7D%0A"></p>
<p>(i) Positive semi-definiteness: Since <img src="https://latex.codecogs.com/png.latex?%7CX%7C"> is a non-negative random variable, <img src="https://latex.codecogs.com/png.latex?%7CX%7C%5E%7Bp%7D%5Cgeq0"> and the expectation of a non-negative random variable is also non-negative. Hence, <img src="https://latex.codecogs.com/png.latex?(%5Cmathbb%7BE%7D%7CX%7C%5E%7Bp%7D)%5E%7B1/p%7D%5Cgeq0">. Moreover, <img src="https://latex.codecogs.com/png.latex?%5Cleft%5CVert%20X%5Cright%5CVert%20_%7Bp%7D=0"> implies that <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%7BE%7D%7CX%7C%5E%7Bp%7D=0">. From property (iv) of expectations, <img src="https://latex.codecogs.com/png.latex?X=0">.</p>
<p>(ii) Scalar-multiplication: We have:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Baligned%7D%0A%5Cleft%5CVert%20cX%5Cright%5CVert%20_%7Bp%7D%20&amp;%20=%5Cleft(%5Cmathbb%7BE%7D%7CcX%7C%5E%7Bp%7D%5Cright)%5E%7B1/p%7D%5C%5C%0A&amp;%20=%5Cleft(%7Cc%7C%5E%7Bp%7D%5Cright)%5E%7B1/p%7D%5Cleft(%5Cmathbb%7BE%7D%7CX%7C%5E%7Bp%7D%5Cright)%5E%7B1/p%7D%5C%5C%0A&amp;%20=%7Cc%7C%5Ccdot%5Cleft%5CVert%20X%5Cright%5CVert%20_%7Bp%7D%0A%5Cend%7Baligned%7D%0A"></p>
<p>(iii) Triangle Inequality. This followed from the Minkowski’s inequality.</p>
<p>The space of all random variables defined on <img src="https://latex.codecogs.com/png.latex?(%5COmega,%5Cmathcal%7B%5Cmathcal%7BF%7D%7D,%5Cmathbb%7BP%7D)"> such that <img src="https://latex.codecogs.com/png.latex?%7C%7CX%7C%7C_%7Bp%7D%3C%5Cinfty"> is finite is called the <img src="https://latex.codecogs.com/png.latex?L%5E%7Bp%7D"> space.</p>
</section>
<section id="orthogonal-matrices." class="level3">
<h3 class="anchored" data-anchor-id="orthogonal-matrices.">Orthogonal Matrices.</h3>
<div id="def-orthogonal-matrices" class="theorem definition">
<p><span class="theorem-title"><strong>Definition 7 (Orthogonal Matrix.) </strong></span>Let <img src="https://latex.codecogs.com/png.latex?A"> be an <img src="https://latex.codecogs.com/png.latex?n%5Ctimes%20n"> square matrix. We say that the matrix <img src="https://latex.codecogs.com/png.latex?A"> is orthogonal, if its transpose is equal toits inverse.</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Baligned%7D%0AA'%20&amp;%20=A%5E%7B-1%7D%0A%5Cend%7Baligned%7D%0A"></p>
</div>
<p>This may seem like an odd property to study, but the following theorem explains why it is so useful. Essentially, an orthogonal matrix rotates (or reflects) vectors without distorting angles or distances.</p>
<div id="prp-properties-of-orthogonal-matrix" class="theorem proposition">
<p><span class="theorem-title"><strong>Proposition 1 (Properties of an orthogonal matrix) </strong></span>Faor an <img src="https://latex.codecogs.com/png.latex?n%5Ctimes%20n"> square matrix <img src="https://latex.codecogs.com/png.latex?A">, the following are equivalent:</p>
<p>(1) <img src="https://latex.codecogs.com/png.latex?A"> is orthogonal. That is, <img src="https://latex.codecogs.com/png.latex?A'A=I">.</p>
<p>(2) <img src="https://latex.codecogs.com/png.latex?A"> preserves norms. That is, for all <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7Bx%7D">,</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Baligned%7D%0A%5Cleft%5CVert%20A%5Cmathbf%7Bx%7D%5Cright%5CVert%20&amp;=%5Cleft%5CVert%20%5Cmathbf%7Bx%7D%5Cright%5CVert%20%5Cend%7Baligned%7D"></p>
<p>(3) <img src="https://latex.codecogs.com/png.latex?A"> preserves inner products, that is, for every <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7Bx%7D">, <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7By%7D"><img src="https://latex.codecogs.com/png.latex?%5Cin%5Cmathbf%7BR%7D%5E%7Bn%7D">:</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Baligned%7D%0A(A%5Cmathbf%7Bx%7D)%5Ccdot(A%5Cmathbf%7By%7D)%20&amp;=%5Cmathbf%7Bx%7D%5Ccdot%5Cmathbf%7By%7D%5Cend%7Baligned%7D"></p>
</div>
<p><em>Proof.</em></p>
<p>We have:</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Baligned%7D%0A%5Cleft%5CVert%20A%5Cmathbf%7Bx%7D%5Cright%5CVert%20%5E%7B2%7D%20&amp;%20=%5Cleft(A%5Cmathbf%7Bx%7D%5Cright)'(A%5Cmathbf%7Bx%7D)%5C%5C%0A&amp;%20=%5Cmathbf%7Bx%7D'(A'A)%5Cmathbf%7Bx%7D%5C%5C%0A&amp;%20=%5Cmathbf%7Bx%7D'I%5Cmathbf%7Bx%7D%5C%5C%0A&amp;%20=%5Cmathbf%7Bx%7D'%5Cmathbf%7Bx%7D%5C%5C%0A&amp;%20=%7C%7C%5Cmathbf%7Bx%7D%7C%7C%5E%7B2%7D%5Cend%7Baligned%7D"></p>
<p>Consequently, <img src="https://latex.codecogs.com/png.latex?%7C%7CA%5Cmathbf%7Bx%7D%7C%7C=%7C%7C%5Cmathbf%7Bx%7D%7C%7C">. The matrix <img src="https://latex.codecogs.com/png.latex?A"> preserves norms. Thus, (1) implies (2).</p>
<p>Moreover, consider</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Baligned%7D%0A%7C%7CA(%5Cmathbf%7Bx%7D+%5Cmathbf%7By%7D)%7C%7C%5E%7B2%7D%20&amp;%20=%5Cleft(A%5Cmathbf%7Bx%7D+A%5Cmathbf%7By%7D%5Cright)%5Ccdot%5Cleft(A%5Cmathbf%7Bx%7D+A%5Cmathbf%7By%7D%5Cright)%5C%5C%0A&amp;%20=(A%5Cmathbf%7Bx%7D)%5Ccdot(A%5Cmathbf%7Bx%7D)+(A%5Cmathbf%7Bx%7D)%5Ccdot(A%5Cmathbf%7By%7D)+(A%5Cmathbf%7By%7D)%5Ccdot(A%5Cmathbf%7Bx%7D)+(A%5Cmathbf%7By%7D)%5Ccdot(A%5Cmathbf%7By%7D)%5C%5C%0A&amp;%20=%7C%7CA%5Cmathbf%7Bx%7D%7C%7C%5E%7B2%7D+2(A%5Cmathbf%7Bx%7D)%5Ccdot(A%5Cmathbf%7By%7D)+%7C%7CA%5Cmathbf%7By%7D%7C%7C%5E%7B2%7D%20&amp;%20%5C%7B%5Cmathbf%7Bx%7D%5Ccdot%5Cmathbf%7By%7D=%5Cmathbf%7By%7D%5Ccdot%5Cmathbf%7Bx%7D%5C%7D%5C%5C%0A&amp;%20=%7C%7C%5Cmathbf%7Bx%7D%7C%7C%5E%7B2%7D+2(A%5Cmathbf%7Bx%7D)%5Ccdot(A%5Cmathbf%7By%7D)+%7C%7C%5Cmathbf%7By%7D%7C%7C%5E%7B2%7D%20&amp;%20%5C%7BA%5Ctext%7B%20preserves%20norms%7D%5C%7D%5Cend%7Baligned%7D"></p>
<p>But, <img src="https://latex.codecogs.com/png.latex?%7C%7CA(%5Cmathbf%7Bx%7D+%5Cmathbf%7By%7D)%7C%7C%5E%7B2%7D=%7C%7C%5Cmathbf%7Bx%7D+%5Cmathbf%7By%7D%7C%7C%5E%7B2%7D=%7C%7C%5Cmathbf%7Bx%7D%7C%7C%5E%7B2%7D+2%5Cmathbf%7Bx%7D%5Ccdot%5Cmathbf%7By%7D+%7C%7C%5Cmathbf%7By%7D%7C%7C%5E%7B2%7D">.</p>
<p>Equating the two expressions, we have the desired result. Hence, (2) implies (3).</p>
<p>Lastly, if <img src="https://latex.codecogs.com/png.latex?A"> preserves inner products, we may write:</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Baligned%7D%0A%5Cleft%5Clangle%20A%5Cmathbf%7Bx%7D,A%5Cmathbf%7Bx%7D%5Cright%5Crangle%20%20&amp;%20=%5Cleft%5Clangle%20%5Cmathbf%7Bx%7D,%5Cmathbf%7Bx%7D%5Cright%5Crangle%20%5C%5C%0A%5Cleft(A%5Cmathbf%7Bx%7D%5Cright)'(A%5Cmathbf%7Bx%7D)%20&amp;%20=%5Cmathbf%7Bx%7D'%5Cmathbf%7Bx%7D%5C%5C%0A%5Cmathbf%7Bx%7D'A'A%5Cmathbf%7Bx%7D%20&amp;%20=0%5Cend%7Baligned%7D"></p>
<p>Since <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7Bx%7D%5Cneq%5Cmathbf%7B0%7D">, it must be true that <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7Bx%7D'A'A-%5Cmathbf%7Bx%7D'=0">. Again, since <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7Bx%7D'%5Cneq%5Cmathbf%7B0%7D">, it follows that <img src="https://latex.codecogs.com/png.latex?A'A-I=0">.</p>
<div id="thm-linear-independence-of-orthogonal-vectors" class="theorem">
<p><span class="theorem-title"><strong>Theorem 9 (Linear Independence of orthogonal vectors) </strong></span>If <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7Bq%7D_%7B1%7D,%5Cmathbf%7Bq%7D_%7B2%7D,%5Cldots,%5Cmathbf%7Bq%7D_%7Bk%7D%5Cin%20V"> be mutually orthogonal elements, such that <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7Bq%7D_%7Bi%7D%5Cneq%5Cmathbf%7B0%7D"> for all <img src="https://latex.codecogs.com/png.latex?i">, then <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7Bq%7D_%7B1%7D,%5Cmathbf%7Bq%7D_%7B2%7D,%5Cldots,%5Cmathbf%7Bq%7D_%7Bk%7D"> are linearly independent.</p>
</div>
<p><em>Proof.</em></p>
<p>Let</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Baligned%7D%0Ac_%7B1%7D%5Cmathbf%7Bq%7D_%7B1%7D+c_%7B2%7D%5Cmathbf%7Bq%7D_%7B2%7D+%5Cldots+c_%7Bk%7D%5Cmathbf%7Bq%7D_%7Bk%7D%20&amp;%20=%5Cmathbf%7B0%7D%5Cend%7Baligned%7D"></p>
<p>Since <img src="https://latex.codecogs.com/png.latex?%5Cleft%5Clangle%20%5Cmathbf%7Bq%7D_%7Bi%7D,%5Cmathbf%7Bq%7D_%7Bi%7D%5Cright%5Crangle%20=1"> and <img src="https://latex.codecogs.com/png.latex?%5Cleft%5Clangle%20%5Cmathbf%7Bq%7D_%7Bi%7D,%5Cmathbf%7Bq%7D_%7Bj%7D%5Cright%5Crangle%20=0"> where <img src="https://latex.codecogs.com/png.latex?i%5Cneq%20j">, we can take the inner product of the vector <img src="https://latex.codecogs.com/png.latex?c_1%20%5Cmathbf%7Bq%7D_%7B1%7D%20+%20c_2%20%5Cmathbf%7Bq%7D_%7B2%7D%20+%20%5Cldots%20+%20c_i%20%5Cmathbf%7Bq%7D_%7Bi%7D+%5Cldots%20+%20c_%7Bk%7D%5Cmathbf%7Bq%7D_%7Bk%7D"> with <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7Bq%7D_%7Bi%7D"> for each <img src="https://latex.codecogs.com/png.latex?i=1,2,3,%5Cldots,k">. It results in <img src="https://latex.codecogs.com/png.latex?c_%7Bi%7D%7C%7C%5Cmathbf%7Bq%7D_%7Bi%7D%7C%7C%5E%7B2%7D=0">. Since <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7Bq%7D_%7Bi%7D%5Cneq%5Cmathbf%7B0%7D">, <img src="https://latex.codecogs.com/png.latex?%7C%7C%5Cmathbf%7Bq%7D_%7Bi%7D%7C%7C%5E%7B2%7D%3E0">. So, <img src="https://latex.codecogs.com/png.latex?c_%7Bi%7D=0">. We conclude that <img src="https://latex.codecogs.com/png.latex?c_%7B1%7D=c_%7B2%7D=%5Cldots=c_%7Bk%7D%20=0">. Consequently, <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7Bq%7D_%7B1%7D,%5Cmathbf%7Bq%7D_%7B2%7D,%5Cldots,%5Cmathbf%7Bq%7D_%7Bk%7D"> are linearly independent.&nbsp;<img src="https://latex.codecogs.com/png.latex?%5Cblacksquare"></p>
<div id="thm-orthogonal-vectors-form-a-basis" class="theorem">
<p><span class="theorem-title"><strong>Theorem 10 (Orthogonal vectors form a basis) </strong></span>Let <img src="https://latex.codecogs.com/png.latex?Q=%5Cleft%5B%5Cbegin%7Barray%7D%7Bcccc%7D%20%5Cmathbf%7Bq%7D_%7B1%7D%20&amp;%20%5Cmathbf%7Bq%7D_%7B2%7D%20&amp;%20%5Cldots%20&amp;%20%5Cmathbf%7Bq%7D_%7Bn%7D%5Cend%7Barray%7D%5Cright%5D"> be an <img src="https://latex.codecogs.com/png.latex?n%5Ctimes%20n"> orthogonal matrix. Then, <img src="https://latex.codecogs.com/png.latex?%5C%7B%5Cmathbf%7Bq%7D_%7B1%7D,%5Cldots,%5Cmathbf%7Bq%7D_%7Bn%7D%5C%7D"> form an orthonormal basis for <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BR%7D%5E%7Bn%7D">.</p>
</div>
<p><em>Proof.</em></p>
<p>We have <img src="https://latex.codecogs.com/png.latex?Q%5Cmathbf%7Be%7D_%7Bi%7D=%5Cmathbf%7Bq%7D_%7Bi%7D">. Consequently,</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Baligned%7D%0A%5Cleft%5Clangle%20%5Cmathbf%7Bq%7D_%7Bi%7D,%5Cmathbf%7Bq%7D_%7Bi%7D%5Cright%5Crangle%20%20&amp;%20=%5Cmathbf%7Bq%7D_%7Bi%7D'%5Cmathbf%7Bq%7D_%7Bi%7D%5C%5C%0A&amp;%20=(Q%5Cmathbf%7Be%7D_%7Bi%7D)'(Q%5Cmathbf%7Be%7D_%7Bi%7D)%5C%5C%0A&amp;%20=%5Cmathbf%7Be%7D_%7Bi%7D'Q'Q%5Cmathbf%7Be%7D_%7Bi%7D%5C%5C%0A&amp;%20=%5Cmathbf%7Be%7D_%7Bi%7D'I%5Cmathbf%7Be%7D_%7Bi%7D%5C%5C%0A&amp;%20=%5Cmathbf%7Be%7D_%7Bi%7D'%5Cmathbf%7Be%7D_%7Bi%7D%5C%5C%0A&amp;%20=1%5Cend%7Baligned%7D"></p>
<p>Assume that <img src="https://latex.codecogs.com/png.latex?i%5Cneq%20j">. We have:</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Baligned%7D%0A%5Cleft%5Clangle%20%5Cmathbf%7Bq%7D_%7Bi%7D,%5Cmathbf%7Bq%7D_%7Bj%7D%5Cright%5Crangle%20%20&amp;%20=%5Cmathbf%7Bq%7D_%7Bi%7D'%5Cmathbf%7Bq%7D_%7Bj%7D%5C%5C%0A&amp;%20=%5Cmathbf%7Be%7D_%7Bi%7D'Q'Q%5Cmathbf%7Be%7D_%7Bj%7D%5C%5C%0A&amp;%20=%5Cmathbf%7Be%7D_%7Bi%7D'%5Cmathbf%7Be%7D_%7Bj%7D%5C%5C%0A&amp;%20=0%5Cend%7Baligned%7D"></p>
<p>From Theorem&nbsp;9, <img src="https://latex.codecogs.com/png.latex?%5C%7B%5Cmathbf%7Bq%7D_%7B1%7D,%5Cldots,%5Cmathbf%7Bq%7D_%7Bn%7D%5C%7D"> are linearly independent and hence form an orthonormal basis for <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BR%7D%5E%7Bn%7D">.</p>
</section>
<section id="quadratic-forms." class="level3">
<h3 class="anchored" data-anchor-id="quadratic-forms.">Quadratic Forms.</h3>
<p>An expression of the form:</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7Bx%7D'A%5Cmathbf%7Bx%7D"></p>
<p>where <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7Bx%7D"> is a <img src="https://latex.codecogs.com/png.latex?n%5Ctimes1"> column vector and <img src="https://latex.codecogs.com/png.latex?A"> is an <img src="https://latex.codecogs.com/png.latex?n%5Ctimes%20n"> matrix is called a quadratic form in <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7Bx%7D"> and</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Baligned%7D%0A%5Cmathbf%7Bx%7D'A%5Cmathbf%7Bx%7D%20&amp;%20=%5Csum_%7Bi=1%7D%5E%7Bn%7D%5Csum_%7Bj=1%7D%5E%7Bn%7Da_%7Bij%7Dx_%7Bi%7Dx_%7Bj%7D%5Cend%7Baligned%7D"></p>
<p>If <img src="https://latex.codecogs.com/png.latex?A"> and <img src="https://latex.codecogs.com/png.latex?B"> are <img src="https://latex.codecogs.com/png.latex?n%5Ctimes%20n"> and <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7Bx%7D,%5Cmathbf%7By%7D"> are <img src="https://latex.codecogs.com/png.latex?n">-vectors, then</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Baligned%7D%0A%5Cmathbf%7Bx%7D'(A+B)%5Cmathbf%7By%7D%20&amp;%20=%5Cmathbf%7Bx%7D'A%5Cmathbf%7By%7D+%5Cmathbf%7Bx%7D'B%5Cmathbf%7By%7D%5Cend%7Baligned%7D"></p>
<p>The quadratic form of the matrix <img src="https://latex.codecogs.com/png.latex?A"> is called positive definite if:</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Baligned%7D%0A%5Cmathbf%7Bx%7D'A%5Cmathbf%7Bx%7D%20&amp;%20%3E0%5Cquad%5Ctext%7Bwhenever%20%7D%5Cmathbf%7Bx%7D%5Cneq%5Cmathbf%7B0%7D%5Cend%7Baligned%7D"></p>
<p>and positive semidefinite if:</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Baligned%7D%0A%5Cmathbf%7Bx%7D'A%5Cmathbf%7Bx%7D%20&amp;%20%5Cgeq0%5Cquad%5Ctext%7Bwhenever%20%7D%5Cmathbf%7Bx%7D%5Cneq%5Cmathbf%7B0%7D%5Cend%7Baligned%7D"></p>
<p>Letting <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7Be%7D_%7Bi%7D"> be the unit vector with it’s <img src="https://latex.codecogs.com/png.latex?i">th coordinate vector <img src="https://latex.codecogs.com/png.latex?1">, we have:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Baligned%7D%0A%5Cmathbf%7Be%7D_%7Bi%7D'A%5Cmathbf%7Be%7D_%7Bi%7D%20&amp;%20=%5Cleft%5Ba_%7Bi1%7Da_%7Bi2%7D%5Cldots%20a_%7Bii%7D%5Cldots%20a_%7Bin%7D%5Cright%5D%5Cleft%5B%5Cbegin%7Barray%7D%7Bc%7D%0A0%5C%5C%0A0%5C%5C%0A%5Cvdots%5C%5C%0A1%5C%5C%0A%5Cvdots%5C%5C%0A0%0A%5Cend%7Barray%7D%5Cright%5D=a_%7Bii%7D%0A%5Cend%7Baligned%7D%0A"></p>
</section>
<section id="eigenthingies-and-diagonalizability." class="level3">
<h3 class="anchored" data-anchor-id="eigenthingies-and-diagonalizability.">Eigenthingies and diagonalizability.</h3>
<p>Let <img src="https://latex.codecogs.com/png.latex?V"> and <img src="https://latex.codecogs.com/png.latex?W"> be finite dimensional vector spaces with <img src="https://latex.codecogs.com/png.latex?dim(V)=n"> and <img src="https://latex.codecogs.com/png.latex?dim(W)=m">. A linear transformation <img src="https://latex.codecogs.com/png.latex?T:V%5Cto%20W">, is defined by its action on the basis vectors. Suppose:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Baligned%7D%0AT(%5Cmathbf%7Bv%7D_%7Bj%7D)%20&amp;%20=%5Csum_%7Bi=1%7D%5E%7Bn%7Da_%7Bij%7D%5Cmathbf%7Bw%7D_%7Bi%7D%0A%5Cend%7Baligned%7D%0A"></p>
<p>for all <img src="https://latex.codecogs.com/png.latex?1%5Cleq%20i%5Cleq%20m">.</p>
<p>Then, the matrix <img src="https://latex.codecogs.com/png.latex?A=%5BT%5D_%7B%5Cmathcal%7BB%7D_%7BV%7D%7D%5E%7B%5Cmathcal%7BB%7D_%7BW%7D%7D"> of the linear transformation is defined as:</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Baligned%7D%0AA%20&amp;%20=%5Cleft%5B%5Cbegin%7Barray%7D%7Bcccc%7D%0Aa_%7B11%7D%20&amp;%20a_%7B12%7D%20&amp;%20%5Cldots%20&amp;%20a_%7B1n%7D%5C%5C%0Aa_%7B21%7D%20&amp;%20a_%7B22%7D%20&amp;%20%5Cldots%20&amp;%20a_%7B2n%7D%5C%5C%0A%5Cvdots%20&amp;%20%5Cvdots%20&amp;%20%5Cddots%20&amp;%20%5Cvdots%5C%5C%0Aa_%7Bm1%7D%20&amp;%20a_%7Bm2%7D%20&amp;%20%5Cldots%20&amp;%20a_%7Bmn%7D%0A%5Cend%7Barray%7D%5Cright%5D%5Cend%7Baligned%7D"></p>
<div id="def-diagonalizable" class="theorem definition">
<p><span class="theorem-title"><strong>Definition 8 </strong></span>A linear transformation <img src="https://latex.codecogs.com/png.latex?T:V%5Cto%20V"> is said to be <strong>diagonalizable</strong> if there exists an ordered basis <img src="https://latex.codecogs.com/png.latex?%5Cmathcal%7BB%7D=%5C%7B%5Cmathbf%7Bv%7D_%7B1%7D,%5Cldots,%5Cmathbf%7Bv%7D_%7Bn%7D%5C%7D"> for <img src="https://latex.codecogs.com/png.latex?V"> so that the matrix for <img src="https://latex.codecogs.com/png.latex?T"> with respect to <img src="https://latex.codecogs.com/png.latex?%5Cmathcal%7BB%7D"> is diagonal. This means precisely that, for some scalars <img src="https://latex.codecogs.com/png.latex?%5Clambda_%7B1%7D,%5Clambda_%7B2%7D,%5Cldots,%5Clambda_%7Bn%7D">, we have:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Baligned%7D%0AT(%5Cmathbf%7Bv%7D_%7B1%7D)%20&amp;%20=%5Clambda_%7B1%7D%5Cmathbf%7Bv%7D_%7B1%7D%5C%5C%0AT(%5Cmathbf%7Bv%7D_%7B2%7D)%20&amp;%20=%5Clambda_%7B2%7D%5Cmathbf%7Bv%7D_%7B2%7D%5C%5C%0A%5Cvdots%5C%5C%0AT(%5Cmathbf%7Bv%7D_%7Bn%7D)%20&amp;%20=%5Clambda_%7Bn%7D%5Cmathbf%7Bv%7D_%7Bn%7D%0A%5Cend%7Baligned%7D%0A"></p>
</div>
<p>In other words, if <img src="https://latex.codecogs.com/png.latex?A=%5BT%5D_%7B%5Cmathcal%7BB%7D%7D">, then we have:</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Baligned%7D%0AA%5Cmathbf%7Bv%7D_%7Bi%7D%20&amp;%20=%5Clambda_%7Bi%7D%5Cmathbf%7Bv%7D_%7Bi%7D%5Cend%7Baligned%7D"></p>
<p>Thus, if we let <img src="https://latex.codecogs.com/png.latex?P"> be the <img src="https://latex.codecogs.com/png.latex?n%5Ctimes%20n"> matrix whose columns are the vectors <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7Bv%7D_%7B1%7D,%5Cmathbf%7Bv%7D_%7B2%7D,%5Cldots,%5Cmathbf%7Bv%7D_%7Bn%7D"> and <img src="https://latex.codecogs.com/png.latex?%5CLambda"> be the <img src="https://latex.codecogs.com/png.latex?n%5Ctimes%20n"> diagonal matrix with diagonal entries <img src="https://latex.codecogs.com/png.latex?%5Clambda_%7B1%7D,%5Clambda_%7B2%7D,%5Cldots,%5Clambda_%7Bn%7D">, then we have:</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Baligned%7D%0AA%5Cleft%5B%5Cbegin%7Barray%7D%7Bcccc%7D%0A%5Cmathbf%7Bv%7D_%7B1%7D%20&amp;%20%5Cmathbf%7Bv%7D_%7B2%7D%20&amp;%20%5Cldots%20&amp;%20%5Cmathbf%7Bv%7D_%7Bn%7D%5Cend%7Barray%7D%5Cright%5D%20&amp;%20=%5Cleft%5B%5Cbegin%7Barray%7D%7Bcccc%7D%0A%5Cmathbf%7Bv%7D_%7B1%7D%20&amp;%20%5Cmathbf%7Bv%7D_%7B2%7D%20&amp;%20%5Cldots%20&amp;%20%5Cmathbf%7Bv%7D_%7Bn%7D%5Cend%7Barray%7D%5Cright%5D%5Cleft%5B%5Cbegin%7Barray%7D%7Bcccc%7D%0A%5Clambda_%7B1%7D%5C%5C%0A&amp;%20%5Clambda_%7B2%7D%5C%5C%0A&amp;%20%20&amp;%20%5Cddots%5C%5C%0A&amp;%20%20&amp;%20%20&amp;%20%5Clambda_%7Bn%7D%0A%5Cend%7Barray%7D%5Cright%5D%5C%5C%0AAP%20&amp;%20=P%5CLambda%5C%5C%0AA%20&amp;%20=P%5CLambda%20P%5E%7B-1%7D%5Cend%7Baligned%7D"></p>
<p>There exists a large class of diagonalizable matrices - the symmetric matrices. A square matrix <img src="https://latex.codecogs.com/png.latex?A"> is symmetric, if <img src="https://latex.codecogs.com/png.latex?A=A'">.</p>
<div id="def-eigenvector" class="theorem definition">
<p><span class="theorem-title"><strong>Definition 9 (Eigenvectors) </strong></span>Let <img src="https://latex.codecogs.com/png.latex?T:V%5Cto%20V"> be a linear transformation. A <strong>non-zero</strong> vector <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7Bv%7D%5Cin%20V"> is called the eigenvector of <img src="https://latex.codecogs.com/png.latex?T">, if there is a scalar <img src="https://latex.codecogs.com/png.latex?%5Clambda"> so that <img src="https://latex.codecogs.com/png.latex?T(%5Cmathbf%7Bv%7D)=%5Clambda%5Cmathbf%7Bv%7D">. The scalar <img src="https://latex.codecogs.com/png.latex?%5Clambda"> is called the eigenvalue of <img src="https://latex.codecogs.com/png.latex?T">.</p>
</div>


</section>
</section>
</section>

 ]]></description>
  <category>Stochastic Calculus</category>
  <guid>http://quantdev.blog/posts/gaussian-processes/index.html</guid>
  <pubDate>Sat, 18 Oct 2025 23:00:00 GMT</pubDate>
  <media:content url="http://quantdev.blog/posts/gaussian-processes/image.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>A short note on the Dupire PDE</title>
  <dc:creator>Quasar </dc:creator>
  <link>http://quantdev.blog/posts/dupire-pde/index.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>If the Black-Scholes model were good, the implied volatility <img src="https://latex.codecogs.com/png.latex?%5Chat%7B%5Csigma%7D"> parameter would be the same for all call option market prices. However, in reality, Black-Scholes implied volatility depends strongly on strike <img src="https://latex.codecogs.com/png.latex?K">, and maturity <img src="https://latex.codecogs.com/png.latex?T">.</p>
<p>In Dupire’s 1993 paper, he proposes the following dynamics for the spot process:</p>
<p><span id="eq-local-volatility-model"><img src="https://latex.codecogs.com/png.latex?%0AdS_t%20=%20r(t)S_t%20dt%20+%20%5Csigma_%7BLV%7D(t,%20S_t)%20S_t%20dW_t%5E%7BQ%7D%0A%5Ctag%7B1%7D"></span></p>
<p>where <img src="https://latex.codecogs.com/png.latex?%5Csigma_%7BLV%7D(t,S_t)"> is a deterministic function of the variables <img src="https://latex.codecogs.com/png.latex?(S_t,t)">.</p>
<p>The function <img src="https://latex.codecogs.com/png.latex?%5Csigma_%7BLV%7D(t,s)"> such that the call option prices are given by the model in Equation&nbsp;1 coinicide with the market option prices <img src="https://latex.codecogs.com/png.latex?%5Chat%7BC%7D(K,T)"> is called <strong>local volatility</strong>.</p>
</section>
<section id="derivation-of-the-dupire-pde" class="level1">
<h1>Derivation of the Dupire PDE</h1>
<p>Recall, that the Fokker-Planck PDE describes the dynamics of the transition probability density forward in time. We represent the transition probability density function by <img src="https://latex.codecogs.com/png.latex?p(x,t)">. Were we to be more rigorous, we should write <img src="https://latex.codecogs.com/png.latex?p(x,t%7Cx_0,%20t_0)">. The call option price has a similar representation. It is a function of strike <img src="https://latex.codecogs.com/png.latex?K"> and expiration <img src="https://latex.codecogs.com/png.latex?T">, given the current spot value <img src="https://latex.codecogs.com/png.latex?S_t"> and current time <img src="https://latex.codecogs.com/png.latex?t">. So, its a function <img src="https://latex.codecogs.com/png.latex?C(K,T%20%7C%20S_t,%20t)">; we can suppress the variables <img src="https://latex.codecogs.com/png.latex?(S_t,%20t)"> and write <img src="https://latex.codecogs.com/png.latex?C(K,T)">. This is standard terminology in the industry.</p>
<p>The call option payoff at maturity <img src="https://latex.codecogs.com/png.latex?T"> is given by:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Baligned%7D%0AC(K,T%7CS_T,T)%20=%20(S_T%20-%20K)%5E%7B+%7D%0A%5Cend%7Baligned%7D%0A"></p>
<p>We can’t exactly apply Ito’s formula, but there is the Tanaka-Meyer formula - an implication of which is that we can use Ito’s lemma for the absolute value function and the maximum function.</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Baligned%7D%0Ad(S_T%20-%20K)%5E%7B+%7D%20&amp;=%20%5Cfrac%7B%5Cpartial%20%7D%7B%5Cpartial%20S_T%7D(S_T%20-%20K)%5E%7B+%7DdS_T%20+%20%5Cfrac%7B1%7D%7B2%7D%5Cfrac%7B%5Cpartial%5E2%7D%7B%5Cpartial%20S_T%5E2%7D%20(S_T%20-%20K)%5E%7B+%7D%20dS_T%5E2%0A%5Cend%7Baligned%7D%0A"></p>
<p>We can write:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign*%7D%0A%5Cfrac%7B%5Cpartial%7D%7B%5Cpartial%20S_T%7D(S_T%20-%20K)%5E%7B+%7D%20=%201_%7BS_T%20%3E%20K%7D%20%5Cfrac%7B%5Cpartial%7D%7B%5Cpartial%20S_T%7D%20(S_T%20-%20K)%20=%201_%7BS_T%20%3E%20K%7D%0A%5Cend%7Balign*%7D%0A"></p>
<p>Now, we calculate the second derivative:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign*%7D%0A%5Cfrac%7B%5Cpartial%7D%7B%5Cpartial%5E2%20S_T%7D(S_T%20-%20K)%5E%7B+%7D%20=%20%5Cfrac%7B%5Cpartial%7D%7B%5Cpartial%20S_T%7D%201_%7BS_T%20%3E%20K%7D%20=%20%5Cdelta(S_T%20-%20K)%0A%5Cend%7Balign*%7D%0A"></p>
<p>The indicator function goes from <img src="https://latex.codecogs.com/png.latex?0"> to <img src="https://latex.codecogs.com/png.latex?1"> at <img src="https://latex.codecogs.com/png.latex?K">, so the derivative at <img src="https://latex.codecogs.com/png.latex?K"> is <img src="https://latex.codecogs.com/png.latex?%5Cinfty"> and <img src="https://latex.codecogs.com/png.latex?0"> otherwise, and this is basically the definition of the Dirac-Delta function. Now, we can substitute these derivatives into the Tanaka formula and get:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign*%7D%0Ad(S_T%20-%20K)%5E%7B+%7D%20&amp;=%201_%7BS_T%20%3E%20K%7D%20dS_T%20+%20%5Cfrac%7B1%7D%7B2%7D%5Cdelta(S_T%20-%20K)dS_T%5E2%0A%5Cend%7Balign*%7D%0A"></p>
<p>Next, let’s calculate the partial derivatives of the payoff with respect to <img src="https://latex.codecogs.com/png.latex?K">. We have:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign*%7D%0A%5Cfrac%7B%5Cpartial%7D%7B%5Cpartial%20K%7D(S_T%20-%20K)%5E%7B+%7D%20=%201_%7BS_T%20%3E%20K%7D%20%5Cfrac%7B%5Cpartial%7D%7B%5Cpartial%20K%7D%20(S_T%20-%20K)%20=%20-1_%7BS_T%20%3E%20K%7D%0A%5Cend%7Balign*%7D%0A"></p>
<p>Differentiating this result again with respect to <img src="https://latex.codecogs.com/png.latex?K">:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign*%7D%0A%5Cfrac%7B%5Cpartial%5E2%7D%7B%5Cpartial%20K%5E2%7D%20(S_T%20-%20K)%5E%7B+%7D%20&amp;=%20-%20%5Cfrac%7B%5Cpartial%7D%7B%5Cpartial%20K%7D%201_%7BS_T%20%3E%20K%7D%20%5C%5C%0A&amp;=%20-%5Cfrac%7B%5Cpartial%7D%7B%5Cpartial%20K%7D1_%7BS_T%20-%20K%20%3E%200%7D%20%5C%5C%0A&amp;=%20-%5Cfrac%7B%5Cpartial%7D%7B%5Cpartial%20K%7DH(S_T%20-%20K)%0A%5Cend%7Balign*%7D%0A"></p>
<p>Define <img src="https://latex.codecogs.com/png.latex?y%20=%20(S_T%20-%20K)">. We have:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign*%7D%0A%5Cfrac%7B%5Cpartial%5E2%7D%7B%5Cpartial%20K%5E2%7D%20(S_T%20-%20K)%5E%7B+%7D%20&amp;=%20%20-%5Cfrac%7B%5Cpartial%7D%7B%5Cpartial%20K%7DH(S_T%20-%20K)%20%5C%5C%0A&amp;=-%5Cfrac%7B%5Cpartial%20H(y)%7D%7B%5Cpartial%20y%7D%5Ccdot%20%5Cfrac%7B%5Cpartial%20y%7D%7B%5Cpartial%20K%7D%5C%5C%0A&amp;=-%5Cdelta(y)%5Cfrac%7B%5Cpartial%7D%7B%5Cpartial%20K%7D(S_T%20-%20K)%5C%5C%0A&amp;=%5Cdelta(S_T%20-%20K)%0A%5Cend%7Balign*%7D%0A"></p>
<p>Now, substituting for <img src="https://latex.codecogs.com/png.latex?dS_T"> and <img src="https://latex.codecogs.com/png.latex?dS_T%5E2"> in Ito’s lemma, we have:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign*%7D%0Ad(S_T%20-%20K)%5E%7B+%7D%20&amp;=%201_%7BS_T%20%3E%20K%7D(rS_T%20dT%20+%20%5Csigma(S_T,%20T)S_TdW_T)%20+%20%5Cfrac%7B1%7D%7B2%7D%5Cdelta(S_T%20-%20K)%20%5Csigma(S_T,T)%5E2%20S_T%5E2%20dT%5C%5C%0A&amp;=%20%5Cleft(rS_T%201_%7BS_T%20%3E%20K%7D%20+%20%5Cfrac%7B1%7D%7B2%7D%5Cdelta(S_T%20-%20K)%5Csigma(S_T,T)%5E2%20S_T%5E2%20%5Cright)dT%20+%201_%7BS_T%20%3E%20K%7D%20%5Csigma(S_T,%20T)%20S_T%20dW_T%0A%5Cend%7Balign*%7D%0A"></p>
<p>Taking expectations on both sides, the <img src="https://latex.codecogs.com/png.latex?dB_T"> becomes zero. So, we have:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign*%7D%0A%5Cmathbb%7BE%7D%5E%7B%5Cmathbb%7BQ%7D%7D%5Cleft%5Bd(S_T%20-%20K)%5E%7B+%7D%5Cright%5D%20=%5Cmathbb%7BE%7D%5E%7BQ%7D%5Cleft%5BrS_T1_%7BS_T%20%3E%20K%7D%20+%20%5Cfrac%7B1%7D%7B2%7D%5Csigma(S_T,T)%5E2%20S_T%5E2%5Cright%5DdT%0A%5Cend%7Balign*%7D%0A"></p>
<p>We are left with just the <img src="https://latex.codecogs.com/png.latex?dT"> term. Now, we can shift <img src="https://latex.codecogs.com/png.latex?dT"> to the LHS (interchange expectation and the derivative) to get:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign*%7D%0A%5Cfrac%7B%5Cpartial%7D%7B%5Cpartial%20T%7D%5Cmathbb%7BE%7D%5E%7BQ%7D%5Cleft%5Bd(S_T%20-%20K)%5E%7B+%7D%5Cright%5D%20&amp;=%5Cmathbb%7BE%7D%5E%7BQ%7D%5Cleft%5BrS_T1_%7BS_T%20%3E%20K%7D%20+%20%5Cfrac%7B1%7D%7B2%7D%5Csigma(S_T,T)%5E2%20S_T%5E2%5Cright%5D%5C%5C%0A&amp;=%20rS_T%20%5Cmathbb%7BE%7D%5E%7BQ%7D%5Cleft%5B1_%7BS_T%20%3E%20K%7D%5Cright%5D%20+%20%5Cfrac%7B1%7D%7B2%7D%5Cmathbb%7BE%7D%5E%7BQ%7D%5Cleft%5B%5Csigma(S_T,T)%5E2%20S_T%5E2%5Cright%5D%0A%5Cend%7Balign*%7D%0A"></p>
<p>Let’s try to express the first term on the RHS by the call option price. We can write the payoff as:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign*%7D%0A(S_T%20-%20K)1_%7BS_T%20%3E%20K%7D%20%20=%20S_T%201_%7BS_T%20%3E%20K%7D%20-%20K%201_%7BS_T%20%3E%20K%7D%0A%5Cend%7Balign*%7D%0A"></p>
<p>Now, we can rearrange the terms to get what we want:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign*%7D%0AS_T1_%7BS_T%20%3E%20K%7D%20=%20(S_T%20-%20K)%201_%7BS_T%20%3E%20K%7D%20+%20K1_%7BS_T%20%3E%20K%7D%0A%5Cend%7Balign*%7D%0A"></p>
<p>We now take expectation on both sides, so we get:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign*%7D%0A%5Cmathbb%7BE%7D%5EQ%5BS_T%201_%7BS_T%20%3E%20K%7D%5D%20&amp;=%20%5Cmathbb%7BE%7D%5E%7BQ%7D%5B(S_T%20-%20K)1_%7BS_T%20%3E%20K%7D%5D%20+%20K%5Cmathbb%7BE%7D%5E%7BQ%7D%5B1_%7BS_T%20%3E%20K%7D%5D%0A%5Cend%7Balign*%7D%0A"></p>
<p>Recall that:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign*%7D%0AC_%7BK,T%7D%20&amp;=%20e%5E%7B-rT%7D%20%5Cmathbb%7BE%7D%5E%7BQ%7D%5B(S_T%20-%20K)1_%7BS_T%20%3E%20K%7D%5D%20%5C%5C%0A%5Cimplies%20e%5E%7BrT%7D%20C(K,T)%20&amp;=%20%5Cmathbb%7BE%7D%5E%7BQ%7D%5B(S_T%20-%20K)1_%7BS_T%20%3E%20K%7D%5D%0A%5Cend%7Balign*%7D%0A"></p>
<p>So, our first expression is then the undiscounted value of the call option. Now, the second expression has got the indicator or the heavyside function, which we know is the derivative of the payoff. Let’s reproduce the risk-neutral valuation formula.</p>
<p><span id="eq-first-derivative-wrt-strike"><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign*%7D%0A%5Cfrac%7B%5Cpartial%7D%7B%5Cpartial%20K%7D%20C_%7BK,T%7D%20&amp;=%20e%5E%7B-rT%7D%20%5Cmathbb%7BE%7D%5E%7BQ%7D%5Cleft%5B%5Cfrac%7B%5Cpartial%7D%7B%5Cpartial%20K%7D%20(S_T%20-%20K)%5E%7B+%7D%5Cright%5D%5C%5C%0A&amp;=%20-%20e%5E%7B-rT%7D%20%5Cmathbb%7BE%7D%5E%7BQ%7D%5B1_%7BS_T%20%3E%20K%7D%5D%0A%5Cend%7Balign*%7D%0A%5Ctag%7B2%7D"></span></p>
<p>So, we can replace the second expectation term <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%7BE%7D%5E%7BQ%7D%5B1_%7BS_T%20%3E%20K%7D%5D"> by <img src="https://latex.codecogs.com/png.latex?-e%5E%7BrT%7D%5Cfrac%7B%5Cpartial%20C_%7BK,T%7D%7D%7B%5Cpartial%20K%7D">. So, we have:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign*%7D%0A%5Cmathbb%7BE%7D%5EQ%5BS_T%201_%7BS_T%20%3E%20K%7D%5D%20&amp;=%20e%5E%7BrT%7DC(K,T)%20-%20Ke%5E%7BrT%7D%5Cfrac%7B%5Cpartial%20C%7D%7B%5Cpartial%20K%7D%0A%5Cend%7Balign*%7D%0A"></p>
<p>Let’s move to the second expectation term:</p>
<p><span id="eq-primary-expression-2"><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign*%7D%0A%5Cfrac%7B%5Cpartial%7D%7B%5Cpartial%20T%7D%5Cmathbb%7BE%7D%5E%7BQ%7D%5Cleft%5Bd(S_T%20-%20K)%5E%7B+%7D%5Cright%5D%20&amp;=%20re%5E%7BrT%7DC(K,T)%20-%20rKe%5E%7BrT%7D%5Cfrac%7B%5Cpartial%20C%7D%7B%5Cpartial%20K%7D%20+%20%5Cfrac%7B1%7D%7B2%7D%5Cmathbb%7BE%7D%5EQ%5Cleft%5B%5Csigma(T,S_T)%5E2%20S_T%5E2%20%5Cdelta(S_T%20-%20K)%5Cright%5D%0A%5Cend%7Balign*%7D%0A%5Ctag%7B3%7D"></span></p>
<p>We know that:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign*%7D%0A%5Cmathbb%7BE%7D%5BX%20%7C%20Y=y_0%5D%20&amp;=%20%5Cint_%7B-%5Cinfty%7D%5E%7B%5Cinfty%7D%20x%20f_%7BX%7CY=y_0%7D(x)%20dx%5C%5C%0A&amp;=%5Cint_%7B%5Cmathbb%7BR%7D%7D%20x%20%5Cfrac%7Bf_%7BX,Y%7D(x,y_0)%7D%7Bf_Y(y_0)%7D%20dx%5C%5C%0A&amp;=%20%5Cint_%7B%5Cmathbb%7BR%7D%7D%20x%20%5Cfrac%7B%5Cint_%7B%5Cmathbb%7BR%7D%7D1_%7BY=y_0%7Df_%7BX,Y%7D(x,y)dy%7D%7Bf_Y(y_0)%7D%20dx%5C%5C%0A&amp;=%20%5Cfrac%7B%5Cint%5Cint_%7B%5Cmathbb%7BR%7D%5E2%7Dxf_%7BX,Y%7D(x,y)%5Ccdot%201_%7BY=y_0%7Ddx%20dy%7D%7B%5Cint_%7BR%7Df_%7BX,Y%7D(x,y_0)%20dx%7D%5C%5C%0A&amp;=%20%5Cfrac%7B%5Cint%5Cint_%7B%5Cmathbb%7BR%7D%5E2%7Dxf_%7BX,Y%7D(x,y)%5Ccdot%201_%7BY=y_0%7Ddx%20%5Ccdot%20dy%7D%7B%5Cint%20%5Cint_%7B%5Cmathbb%7BR%7D%5E2%7D1_%7BY=y_0%7D%20%5Ccdot%20f_%7BX,Y%7D(x,y)%20dx%20%5Ccdot%20dy%7D%5C%5C%0A&amp;=%20%5Cfrac%7B%5Cmathbb%7BE%7D%5BX%5Ccdot%201_%7BY=y_0%7D%5D%7D%7B%5Cmathbb%7BE%7D%5B1_%7BY=y_0%7D%5D%7D%0A%5Cend%7Balign*%7D%0A"></p>
<p>So,</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cmathbb%7BE%7D%5BX%20%7C%20Y=y_0%5D%20%5Ccdot%20%5Cmathbb%7BE%7D%5B1_%7BY=y_0%7D%5D%20=%20%5Cmathbb%7BE%7D%5BX%5Ccdot%201_%7BY=y_0%7D%5D%0A"></p>
<p>Using this result, we may write:</p>
<p><span id="eq-intermediate-result-1"><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign*%7D%0A%5Cmathbb%7BE%7D%5EQ%20%5B%5Csigma(T,S_T)%5E2%20S_T%5E2%20%5Cdelta(S_T%20-%20K)%5D%20&amp;=%20%5Cmathbb%7BE%7D%5EQ%5B%5Csigma(T,S_T)%5E2%20S_T%5E2%20%7C%20S_T%20=%20K%5D%20%5Ccdot%20%5Cmathbb%7BE%7D%5EQ%5B%5Cdelta(S_T%20-%20K)%5D%5C%5C%0A&amp;=%20K%5E2%20%5Cmathbb%7BE%7D%5EQ%5B%5Csigma(T,S_T)%5E2%20%7C%20S_T%20=%20K%5D%20%20%5Ccdot%20%5Cmathbb%7BE%7D%5EQ%5B%5Cdelta(S_T%20-%20K)%5D%0A%5Cend%7Balign*%7D%0A%5Ctag%7B4%7D"></span></p>
<p>Now, taking the second derivative of the call option price with respect to the strike <img src="https://latex.codecogs.com/png.latex?K">, we have:</p>
<p><span id="eq-second-derivative-wrt-strike"><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign*%7D%0AC_%7BK,T%7D%20&amp;=%20e%5E%7B-rT%7D%5Cmathbb%7BE%7D%5EQ%5B(S_T%20-%20K)%5E%7B+%7D%5D%5C%5C%0A%5Cfrac%7B%5Cpartial%5E2%20C%7D%7B%5Cpartial%20K%5E2%7D%20%20&amp;=%20e%5E%7B-rT%7D%5Cmathbb%7BE%7D%5EQ%5Cleft%5B%5Cfrac%7B%5Cpartial%5E2%7D%7B%5Cpartial%20K%5E2%7D%20(S_T%20-%20K)%5E%7B+%7D%5Cright%5D%5C%5C%0A&amp;=%20e%5E%7B-rT%7D%20%5Cmathbb%7BE%7D%5EQ%5B%5Cdelta(S_T%20-%20K)%5D%5C%5C%0Ae%5E%7BrT%7D%5Cfrac%7B%5Cpartial%5E2%20C_%7BK,T%7D%7D%7B%5Cpartial%20K%5E2%7D%20&amp;=%20%5Cmathbb%7BE%7D%5EQ%5B%5Cdelta(S_T%20-%20K)%5D%0A%5Cend%7Balign*%7D%0A%5Ctag%7B5%7D"></span></p>
<p>So, the second expression in the RHS of Equation&nbsp;4 becomes:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign*%7D%0A%5Cmathbb%7BE%7D%5EQ%20%5B%5Csigma(T,S_T)%5E2%20S_T%5E2%20%5Cdelta(S_T%20-%20K)%5D%20%20&amp;=%20K%5E2%20%5Cmathbb%7BE%7D%5EQ%5B%5Csigma(T,S_T)%5E2%20%7C%20S_T%20=%20K%5D%20%20%5Ccdot%20%5Cmathbb%7BE%7D%5EQ%5B%5Cdelta(S_T%20-%20K)%5D%20%5C%5C%0A&amp;=%20K%5E2%20%5Cmathbb%7BE%7D%5EQ%5B%5Csigma(T,S_T)%5E2%20%7C%20S_T%20=%20K%5D%20%20%5Ccdot%20e%5E%7BrT%7D%20%5Cfrac%7B%5Cpartial%5E2%20C%7D%7B%5Cpartial%20K%5E2%7D%0A%5Cend%7Balign*%7D%0A"></p>
<p>So, our primary expression in Equation&nbsp;3 becomes:</p>
<p><span id="eq-time-derivative"><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign*%7D%0A%5Cfrac%7B%5Cpartial%7D%7B%5Cpartial%20T%7D%5Cmathbb%7BE%7D%5EQ%5B(S_T%20-%20K)%5E+%5D%20&amp;=%20re%5E%7BrT%7D%20C(K,T)%20-%20rKe%5E%7BrT%7D%20%5Cfrac%7B%5Cpartial%20C%7D%7B%5Cpartial%20K%7D%20%5C%5C&amp;+%20%5Cfrac%7B1%7D%7B2%7DK%5E2%20%5Cmathbb%7BE%7D%5EQ%5B%5Csigma(T,S_T)%5E2%20%7C%20S_T%20=%20K%5D%20%20%5Ccdot%20e%5E%7BrT%7D%20%5Cfrac%7B%5Cpartial%5E2%20C%7D%7B%5Cpartial%20K%5E2%7D%0A%5Cend%7Balign*%7D%0A%5Ctag%7B6%7D"></span></p>
<p>Let <img src="https://latex.codecogs.com/png.latex?C%5Eu(K,T%7CS,t)"> denote the undiscounted call option price. Since <img src="https://latex.codecogs.com/png.latex?C%5Eu(K,T%7CS,t)%20=%20%5Cmathbb%7BE%7D%5EQ%5B(S_T%20-%20K)%5E%7B+%7D%5D">, we can write the above PDE as:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign*%7D%0A%5Cfrac%7B%5Cpartial%20C%5Eu_%7BK,T%7D%7D%7B%5Cpartial%20T%7D&amp;=%20rC%5Eu_%7BK,T%7D%20-%20rK%20%5Cfrac%7B%5Cpartial%20C%5Eu_%7BK,T%7D%7D%7B%5Cpartial%20K%7D%20%5C%5C&amp;+%20%5Cfrac%7B1%7D%7B2%7DK%5E2%20%5Cmathbb%7BE%7D%5EQ%5B%5Csigma(T,S_T)%5E2%20%7C%20S_T%20=%20K%5D%20%20%5Ccdot%20%5Cfrac%7B%5Cpartial%5E2%20C%5Eu_%7BK,T%7D%7D%7B%5Cpartial%20K%5E2%7D%0A%5Cend%7Balign*%7D%0A"></p>
<p>Rearranging we have:</p>
<p><span id="eq-dupire-formula-in-terms-of-undiscounted-call-option-price-1"><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign*%7D%0A%5Cmathbb%7BE%7D%5EQ%5B%5Csigma(T,%20S_T)%5E2%20%7C%20S_T%20=%20K%5D%0A=%20%5Cfrac%7B%5Cfrac%7B%5Cpartial%20C%5Eu_%7BK,T%7D%7D%7B%5Cpartial%20T%7D%20+%20rK%5Cfrac%7B%5Cpartial%20C%5Eu_%7BK,T%7D%7D%7B%5Cpartial%20K%7D%20-%20rC%5Eu_%7BK,T%7D%7D%7B%5Cfrac%7B1%7D%7B2%7DK%5E2%20%5Cfrac%7B%5Cpartial%5E2%20C%5Eu_%7BK,T%7D%7D%7B%5Cpartial%20K%5E2%7D%7D%0A%5Cend%7Balign*%7D%0A%5Ctag%7B7%7D"></span></p>
<p><img src="https://latex.codecogs.com/png.latex?%5Csigma%5E2(S_T,%20T)"> is the instantaneous variance at <img src="https://latex.codecogs.com/png.latex?(S_T,T)">. We can write it’s conditional expectation as a function of the variables <img src="https://latex.codecogs.com/png.latex?(K,T)">, since it is an integral over the state space of <img src="https://latex.codecogs.com/png.latex?S_T">, so <img src="https://latex.codecogs.com/png.latex?S_T"> is integrated out and we will have a function of <img src="https://latex.codecogs.com/png.latex?K"> for each <img src="https://latex.codecogs.com/png.latex?T">.</p>
<section id="the-theory-of-local-volatility" class="level3">
<h3 class="anchored" data-anchor-id="the-theory-of-local-volatility">The theory of local volatility</h3>
<div id="def-local-volatility" class="theorem definition">
<p><span class="theorem-title"><strong>Definition 1 (Local Volatility) </strong></span>The local variance <img src="https://latex.codecogs.com/png.latex?%5Csigma_%7BK,T%7D%5E2(S_t,t)"> is defined as the reisk-neutral expectation of the squared instantaneous volatility at <img src="https://latex.codecogs.com/png.latex?(S_T,T)"> conditional on <img src="https://latex.codecogs.com/png.latex?S_T%20=%20K"> and time <img src="https://latex.codecogs.com/png.latex?t"> information <img src="https://latex.codecogs.com/png.latex?%5Cmathcal%7BF%7D_t">:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cboxed%7B%5Csigma_%7BK,T%7D%5E2(S_t,t)%20%5Cstackrel%7Bdef%7D%7B=%7D%20%5Cmathbf%7BE%7D%5E%7BQ%7D%5B%5Csigma%5E2(S_T,T,%5Ccdot)%7CS_T%20=%20K,%20%5Cmathcal%7BF%7D_t%5D=%20%5Cint_%7B-%5Cinfty%7D%5E%7B%5Cinfty%7D%20%5Csigma(s,T)%5E2%20f_%7BS_T%7CS_T%20=%20K%7D(s)%20ds%7D%0A"></p>
<p>Then local volatility is given by:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Csigma_%7BK,T%7D%20%5Cstackrel%7Bdef%7D%7B=%7D%20%5Csqrt%7B%5Csigma_%7BK,T%7D%5E2(S_t,t)%7D%0A"></p>
</div>
<p>Thus, intuitively, we can think of the local volatility <img src="https://latex.codecogs.com/png.latex?%5Csigma_%7BK,T%7D(S_t,t)"> is the market’s consensus for instantaneous volatility for a market level <img src="https://latex.codecogs.com/png.latex?K"> at some future date <img src="https://latex.codecogs.com/png.latex?T">. Since, it is implied from the observed option prices, the LVS gives the fair value of the asset price volatility for future market levels and times.</p>
<p>This definition of local volatility has two implications: first, the use market’s view on future volatility expressed by the expectation operator clarifies that all sources of risk from stochastic volatility are integrated out. Instead, the evolution of volatility is compressed into a single funtion that is deterministic in <img src="https://latex.codecogs.com/png.latex?S_t,t">.</p>
<p>To put it differently, the concept of local volatility assumes</p>
<p>So, we have:</p>
<p><span id="eq-dupire-formula-in-terms-of-undiscounted-call-option-price"><img src="https://latex.codecogs.com/png.latex?%0A%5Cboxed%7B%0A%20%20%20%20%5Csigma_%7BLV%7D%5E2(K,T)%20=%20%5Cfrac%7B%5Cfrac%7B%5Cpartial%20C%5Eu_%7BK,T%7D%7D%7B%5Cpartial%20T%7D%20+%20rK%5Cfrac%7B%5Cpartial%20C%5Eu_%7BK,T%7D%7D%7B%5Cpartial%20K%7D%20-%20rC%5Eu_%7BK,T%7D%7D%7B%5Cfrac%7B1%7D%7B2%7DK%5E2%20%5Cfrac%7B%5Cpartial%5E2%20C%5Eu_%7BK,T%7D%7D%7B%5Cpartial%20K%5E2%7D%7D%0A%7D%0A%5Ctag%7B8%7D"></span></p>
<p>We can also relabel the parameters to define the function in terms of time <img src="https://latex.codecogs.com/png.latex?t"> and stock price <img src="https://latex.codecogs.com/png.latex?S">:</p>
<p><span id="eq-dupire-formula-in-time-and-stock-price-terms"><img src="https://latex.codecogs.com/png.latex?%0A%5Cboxed%7B%0A%20%20%20%20%5Cmathbb%7BE%7D%5EQ%5B%5Csigma(t,%20S)%5E2%20%7C%20S_t%20=%20S%5D%20=%20%5Csigma_%7BLV%7D%5E2(K,T)%20%7C_%7BK=S,%20T=t%7D%20=%5Cleft.%5Cfrac%7B%5Cfrac%7B%5Cpartial%20C%5Eu_%7BK,T%7D%7D%7B%5Cpartial%20T%7D%20+%20rK%5Cfrac%7B%5Cpartial%20C%5Eu_%7BK,T%7D%7D%7B%5Cpartial%20K%7D%20-%20rC%5Eu_%7BK,T%7D%7D%7B%5Cfrac%7B1%7D%7B2%7DK%5E2%20%5Cfrac%7B%5Cpartial%5E2%20C%5Eu_%7BK,T%7D%7D%7B%5Cpartial%20K%5E2%7D%7D%5Cright%5Cvert_%7BK=S,T=t%7D%0A%7D%0A%5Ctag%7B9%7D"></span></p>
</section>
<section id="digression---breeden-litzenberger-formula" class="level2">
<h2 class="anchored" data-anchor-id="digression---breeden-litzenberger-formula">Digression - Breeden-Litzenberger Formula</h2>
<p>Assume that <img src="https://latex.codecogs.com/png.latex?(S_t,t%5Cgeq%200)"> is a markov process with the density <img src="https://latex.codecogs.com/png.latex?p(t,s,T,S_T)"> conditioned on <img src="https://latex.codecogs.com/png.latex?S_t%20=%20s">. Then:</p>
<p><span id="eq-first-derivative-of-call-option-price"><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign*%7D%0AC(s,t,T,K)%20&amp;=%20e%5E%7B-r(T-t)%7D%5Cint_0%5E%5Cinfty%20p(t,s,T,S_T)%20(S_T%20-%20K)%5E%7B+%7D%20dS_T%20%5C%5C%0A&amp;=%20%20e%5E%7B-r(T-t)%7D%5Cint_K%5E%5Cinfty%20p(t,s,T,y)%20(y%20-%20K)%20dy%20%5C%5C%0A%5Cend%7Balign*%7D%0A%5Ctag%7B10%7D"></span></p>
<p>Differentiating with respect to <img src="https://latex.codecogs.com/png.latex?K">, we have:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign*%7D%0A%5Cfrac%7B%5Cpartial%20C%7D%7B%5Cpartial%20K%7D%20&amp;=%20e%5E%7B-r(T-t)%7D%5Cleft%5B%5Cleft.p(t,s,T,y)%20(y%20-%20K)%5Cright%5Cvert_%7By=%5Cinfty%7D%20-%20%5Cleft.p(t,s,T,y)%20(y%20-%20K)%5Cright%5Cvert_%7By=K%7D%20+%20%5Cint_%7BK%7D%5E%5Cinfty%20p(t,s,T,y)%20%5Cfrac%7B%5Cpartial%7D%7B%5Cpartial%20K%7D(y-k)dy%5Cright%5D%20%5C%5C%0A&amp;=%20-e%5E%7B-r(T-t)%7D%20%5Cint_%7BK%7D%5E%5Cinfty%20p(t,s,T,y)%20dy%0A%5Cend%7Balign*%7D%0A"></p>
<p>Differentiating again with respect to <img src="https://latex.codecogs.com/png.latex?K"> and applying the Leibnitz rule:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign*%7D%0A%5Cfrac%7B%5Cpartial%5E2%20C%7D%7B%5Cpartial%20K%5E2%7D%20&amp;=%20-%20e%5E%7B-r(T-t)%7D%20%5B%20p(t,s,T,y)%7C_%7By=%5Cinfty%7D%20-%20%20p(t,s,T,y)%7C_%7By=K%7D%5D%5C%5C%0A&amp;=%20e%5E%7B-r(T-t)%7Dp(t,s,T,K)%0A%5Cend%7Balign*%7D%0A"></p>
<p>Finally, we have:</p>
<p><span id="eq-breeden-litzenberger-formula"><img src="https://latex.codecogs.com/png.latex?%0A%5Cboxed%7B%5Cfrac%7B%5Cpartial%5E2%20C%7D%7B%5Cpartial%20K%5E2%7D%20=%20e%5E%7B-r(T-t)%7Dp(t,s,T,K)%7D%0A%5Ctag%7B11%7D"></span></p>
<p><a href="https://papers.ssrn.com/sol3/papers.cfm?abstract_id=2642349">Breeden &amp; Litzenberger(1978)</a>, showed that this second-order partial derivative can be used to approximate the option-implied risk-neutral probability that the underlying asset price <img src="https://latex.codecogs.com/png.latex?S"> will be equal to the strike <img src="https://latex.codecogs.com/png.latex?K"> at maturity.</p>
</section>
<section id="no-arbitrage-conditions" class="level2">
<h2 class="anchored" data-anchor-id="no-arbitrage-conditions">No-arbitrage conditions</h2>
<p>The volatility surface, or equivalently the Call prices surface cannot have any arbitrary shape. Peter Carr has shown that static arbitrage is avoided in a set of option prices, if the calendar spread and butterfly spread arbitrages are avoided.</p>
<section id="calendar-spread-condition" class="level3">
<h3 class="anchored" data-anchor-id="calendar-spread-condition">Calendar spread condition</h3>
<p>Calendar spread arbitrage is usually expressed as the monotonicity of the European call option prices <img src="https://latex.codecogs.com/png.latex?C"> with respect to the maturity <img src="https://latex.codecogs.com/png.latex?T">. I closely follow the derivation in <a href="https://core.ac.uk/reader/6978470">Fengler(2005)</a>.</p>
<div id="prp-calendar-spread" class="theorem proposition">
<p><span class="theorem-title"><strong>Proposition 1 (Calendar Arbitrage) </strong></span>Define forward-moneyness <img src="https://latex.codecogs.com/png.latex?k%20%5Cstackrel%7Bdef%7D%7B=%7D%20K/F(t,T)">, where the forward price is given by <img src="https://latex.codecogs.com/png.latex?F(t,T)%20=%20S_t%20e%5E%7B%5Cint_t%5ET%20r(u)du%7D"> and total variance as <img src="https://latex.codecogs.com/png.latex?%5Cnu%5E2(k,%5Ctau)%20=%20%5Chat%7B%5Csigma%7D%5E2(k,%5Ctau)%5Ctau">.</p>
<p>If <img src="https://latex.codecogs.com/png.latex?%5Cnu%5E2(k,%5Ctau_i)"> is a strictly increasing function of <img src="https://latex.codecogs.com/png.latex?%5Ctau_i%20=%20T_i%20-%20t">, <img src="https://latex.codecogs.com/png.latex?i=1,2">, there is no calendar arbitrage.</p>
</div>
<p><em>Proof.</em></p>
<p>Given two expiry dates <img src="https://latex.codecogs.com/png.latex?t%20%3C%20T_1%20%3C%20T_2">, construct in <img src="https://latex.codecogs.com/png.latex?t">, the following calendar spread in two calls with the same forward-moneyness: a long position in a call <img src="https://latex.codecogs.com/png.latex?C_t(K_2,%20T_2)"> and a short position in <img src="https://latex.codecogs.com/png.latex?C_t(K_1,T_1)"> call. The forward-moneyness requirement implies that:</p>
<p><span id="eq-forward-moneyness-condition"><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign*%7D%0A%5Cfrac%7BK_1%7D%7BF(t,T_1)%7D%20&amp;=%20%5Cfrac%7BK_2%7D%7BF(t,T_2)%7D%5C%5C%0AK_1%20&amp;=%20e%5E%7B-%5Cint_%7BT_1%7D%5E%7BT_2%7Dr(u)du%7D%20K_2%0A%5Cend%7Balign*%7D%0A%5Ctag%7B12%7D"></span></p>
<p>In <img src="https://latex.codecogs.com/png.latex?T_1">, if <img src="https://latex.codecogs.com/png.latex?S_%7BT_1%7D%20%5Cleq%20K_1"> the short option position struck at <img src="https://latex.codecogs.com/png.latex?K_1"> expires worthless while <img src="https://latex.codecogs.com/png.latex?C_%7BT_1%7D(K_2,T_2)%5Cgeq%200">, because it still has some time-value of money. Otherwise, the entire portfolio is worth <img src="https://latex.codecogs.com/png.latex?C_%7BT_1%7D(K_2,T_2)%20-%20(S_%7BT_1%7D%20-%20K_1)">. But, Equation&nbsp;12 implies that the portfolio is worth <img src="https://latex.codecogs.com/png.latex?C_%7BT_1%7D(K_2,T_2)%20-%20(S_%7BT_1%7D%20-%20K_2%20e%5E%7B-%5Cint_%7BT_1%7D%5E%7BT_2%7D%20r(u)%20du%7D)"> which equals <img src="https://latex.codecogs.com/png.latex?P_%7BT_1%7D(K_2,T_2)"> by put-call parity. Thus, the payoff of this portfolio is always non-negative.</p>
<p>In order to preclude arbitrage, at time <img src="https://latex.codecogs.com/png.latex?t%20%5Cleq%20T_1%20%3C%20T_2"> we must have:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign*%7D%0AC_t(K_2,T_2)%20-%20C_t(K_1,T_1)%20&amp;%3E%200%5C%5C%0AC_t(K_2,T_2)%20&amp;%3E%20C_t(K_1,T_1)%0A%5Cend%7Balign*%7D%0A"></p>
<p>Multiplying by <img src="https://latex.codecogs.com/png.latex?e%5E%7B%5Cint_0%5E%7BT_2%7D%20r_u%20du%7D"> and dividing by <img src="https://latex.codecogs.com/png.latex?K_2"> yields:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign*%7D%0A%5Cfrac%7Be%5E%7B%5Cint_0%5E%7BT_2%7D%20r_u%20du%7DC_t(K_2,T_2)%7D%7BK_2%7D%20&amp;%3E%20%5Cfrac%7Be%5E%7B%5Cint_0%5E%7BT_2%7D%20r_u%20du%7DC_t(K_1,T_1)%7D%7BK_2%7D%5C%5C%0A&amp;=%20%5Cfrac%7Be%5E%7B%5Cint_0%5E%7BT_2%7D%20r_u%20du%7DC_t(K_1,T_1)%7D%7BK_1%20e%5E%7B%5Cint_%7BT_1%7D%5E%7BT_2%7Dr_u%20du%7D%7D%5C%5C%0A%5Cend%7Balign*%7D%0A"></p>
<p>So, we have the condition:</p>
<p><span id="eq-undiscounted-call-option-price-scaled-by-strike"><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign*%7D%0A%5Cboxed%7B%5Cfrac%7Be%5E%7B%5Cint_0%5E%7BT_2%7D%20r_u%20du%7DC_t(K_2,T_2)%7D%7BK_2%7D%20%3E%20%20%5Cfrac%7Be%5E%7B%5Cint_0%5E%7BT_1%7D%20r_u%20du%7DC_t(K_1,T_1)%7D%7BK_1%7D%7D%0A%5Cend%7Balign*%7D%0A%5Ctag%7B13%7D"></span></p>
<p>Finally, we observe that the function:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign*%7D%0Af(k,%5Cnu%5E2)%20&amp;%5Cstackrel%7Bdef%7D%7B=%7D%20%5Cfrac%7Be%5E%7B%5Cint_%7B0%7D%5ET%20r_u%20du%7DC_t%5E%7BBS%7D(K,T)%7D%7BK%7D%5C%5C%0A&amp;=%20%5Cfrac%7BF(0,T)%5CPhi(d_%7B+%7D)%7D%7BK%7D%20-%20%5CPhi(d_%7B-%7D)%5C%5C%0A&amp;=%20k%5E%7B-1%7D%5CPhi(d_%7B+%7D)%20-%20%5CPhi(d_%7B-%7D)%0A%5Cend%7Balign*%7D%0A"></p>
<p>is a function in <img src="https://latex.codecogs.com/png.latex?k"> and <img src="https://latex.codecogs.com/png.latex?%5Cnu%5E2"> only, and, for a fixed <img src="https://latex.codecogs.com/png.latex?k">, is a strictly monotone increasing function in <img src="https://latex.codecogs.com/png.latex?%5Cnu%5E2">, since</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign*%7D%0Ad_%7B%5Cpm%7D%20&amp;=%20%5Cfrac%7B%5Cln(%5Cfrac%7B1%7D%7Bk%7D)%5Cpm%20%5Cfrac%7B%5Cnu%5E2%7D%7B2%7D%7D%7B%5Csqrt%7B%5Cnu%5E2%7D%7D%5C%5C%0A%5Cfrac%7B%5Cpartial%20d_%7B+%7D%7D%7B%5Cpartial%20%5Cnu%5E2%7D%20&amp;=%5Cfrac%7B%5Csqrt%7B%5Cnu%5E2%7D%20%5Ccdot%20%5Cfrac%7B1%7D%7B2%7D%20-%20%5Cleft(-%5Cln%20k%20+%20%5Cfrac%7B%5Cnu%5E2%7D%7B2%7D%5Cright)%5Ccdot%20%5Cfrac%7B1%7D%7B2%5Csqrt%7B%5Cnu%5E2%7D%7D%7D%7B%5Cnu%5E2%7D%5C%5C%0A&amp;=%20%5Cfrac%7B%5Cfrac%7B%5Csqrt%7B%5Cnu%5E2%7D%7D%7B2%7D%20-%20%5Cfrac%7Bd_%7B+%7D%7D%7B2%7D%7D%7B%5Cnu%5E2%7D%5C%5C%0A%5Cfrac%7B%5Cpartial%20d_%7B-%7D%7D%7B%5Cpartial%20%5Cnu%5E2%7D%20&amp;=%20%5Cfrac%7B-%5Cfrac%7B%5Csqrt%7B%5Cnu%5E2%7D%7D%7B2%7D%20-%20%5Cfrac%7Bd_%7B-%7D%7D%7B2%7D%7D%7B%5Cnu%5E2%7D%5C%5C%0A%5Cfrac%7B%5Cpartial%20d_%7B+%7D%7D%7B%5Cpartial%20%5Cnu%5E2%7D%20-%20%5Cfrac%7B%5Cpartial%20d_%7B-%7D%7D%7B%5Cpartial%20%5Cnu%5E2%7D%20&amp;=%20%5Cfrac%7B1%7D%7B2%5Csqrt%7B%5Cnu%5E2%7D%7D%0A%5Cend%7Balign*%7D%0A"></p>
<p>Also observe that:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign*%7D%0A%5Cfrac%7B%5Cphi(d_%7B+%7D)%7D%7B%5Cphi(d_%7B-%7D)%7D%20&amp;=%20%5Cexp%5Cleft%5B-%5Cfrac%7B1%7D%7B2%7D(d_%7B+%7D%5E2%20-%20d_%7B-%7D%5E2)%5Cright%5D%5C%5C%0A&amp;=%20%5Cexp%5Cleft%5B-%5Cfrac%7B1%7D%7B2%7D(d_%7B+%7D%20+%20d_%7B-%7D)(d_%7B+%7D%20-%20d_%7B-%7D)%5Cright%5D%5C%5C%0A&amp;=%20%5Cexp%5Cleft%5B-%5Cfrac%7B1%7D%7B2%7D%5Cleft(%5Cfrac%7B-%5Cln%20k%20+%20%5Cnu%5E2/2%7D%7B%5Csqrt%7B%5Cnu%5E2%7D%7D%20+%20%5Cfrac%7B-%5Cln%20k%20-%20%5Cnu%5E2/2%7D%7B%5Csqrt%7B%5Cnu%5E2%7D%7D%5Cright)%5Cleft(%5Cfrac%7B-%5Cln%20k%20+%20%5Cnu%5E2/2%7D%7B%5Csqrt%7B%5Cnu%5E2%7D%7D%20-%20%5Cfrac%7B-%5Cln%20k%20-%20%5Cnu%5E2/2%7D%7B%5Csqrt%7B%5Cnu%5E2%7D%7D%5Cright)%5Cright%5D%5C%5C%0A&amp;=%20%5Cexp%5Cleft%5B%5Cleft(%5Cfrac%7B%5Cln%20k%7D%7B%5Csqrt%7B%5Cnu%5E2%7D%7D%5Cright)%5Csqrt%7B%5Cnu%5E2%7D%5Cright%5D%5C%5C%0A&amp;=%20k%0A%5Cend%7Balign*%7D%0A"></p>
<p>So, <img src="https://latex.codecogs.com/png.latex?%5Cphi(d_%7B+%7D)%20=%20k%20%5Cphi(d_%7B-%7D)">. Also, recall that <img src="https://latex.codecogs.com/png.latex?d_%7B+%7D%20=%20d_%7B-%7D%20+%20%5Csqrt%7B%5Cnu%5E2%7D">. Putting it all together, we have:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign*%7D%0A%5Cfrac%7B%5Cpartial%20f%7D%7B%5Cpartial%20%5Cnu%5E2%7D%20&amp;=%20k%5E%7B-1%7D%5Cphi(d_%7B+%7D)%20(%5Cpartial%20d_%7B+%7D/%5Cpartial%20%5Cnu%5E2)%20-%20%5Cphi(d_%7B-%7D)(%5Cpartial%20d_%7B-%7D/%5Cpartial%20%5Cnu%5E2)%20%5C%5C%0A&amp;=%20%5Cphi(d_%7B-%7D)%20%5Ccdot%20%5Cleft(%5Cfrac%7B%5Cpartial%20d_%7B+%7D%7D%7B%5Cpartial%20%5Cnu%5E2%7D%20-%20%5Cfrac%7B%5Cpartial%20d_%7B-%7D%7D%7B%5Cpartial%20%5Cnu%5E2%7D%5Cright)%5C%5C%0A&amp;=%20%5Cphi(d_%7B-%7D)%5Cfrac%7B1%7D%7B2%5Csqrt%7B%5Cnu%5E2%7D%7D%20%3E%200,%20%5Cquad%20%5Cforall%20%5Cnu%5E2%20%5Cin%20(0,%5Cinfty)%0A%5Cend%7Balign*%7D%0A"></p>
<p>We conclude that <img src="https://latex.codecogs.com/png.latex?f"> is strictly monotonically increasing in <img src="https://latex.codecogs.com/png.latex?%5Cnu%5E2">. So, if total variance <img src="https://latex.codecogs.com/png.latex?%5Cnu%5E2%20=%20%5Csigma%5E2(k,%5Ctau)"> is increasing, <img src="https://latex.codecogs.com/png.latex?f(k,%5Cnu%5E2)">, that is the undiscounted call option price scaled by the strike price <img src="https://latex.codecogs.com/png.latex?K"> is increasing and from Equation&nbsp;13, it follows that there is no calendar arbitrage.</p>
<p>The equation Equation&nbsp;13 is the discrete version of the calendar spread no-arbitrage condition. We can also <img src="https://latex.codecogs.com/png.latex?%5Cblacksquare"></p>
</section>
<section id="butterfly-spread-arbitrage" class="level3">
<h3 class="anchored" data-anchor-id="butterfly-spread-arbitrage">Butterfly spread arbitrage</h3>
<p>We can write:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign*%7D%0A%5Cfrac%7B%5Cpartial%5E2%20C%7D%7B%5Cpartial%20K%5E2%7D%20=%20%5Clim_%7B%5Cepsilon%20%5Cto%200%7D%20%5Cfrac%7BC(K-%5Cepsilon,T)%20-%202C(K,T)%20+%20C(K+%5Cepsilon,%20T)%7D%7B%5Cepsilon%5E2%7D%0A%5Cend%7Balign*%7D%0A"></p>
<p>Consider the European payoff consisting of <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B1%7D%7B%5Cepsilon%5E2%7D"> calls of strike <img src="https://latex.codecogs.com/png.latex?K%20-%20%5Cepsilon">, <img src="https://latex.codecogs.com/png.latex?1/%5Cepsilon%5E2"> calls of strike <img src="https://latex.codecogs.com/png.latex?K+%5Cepsilon"> and <img src="https://latex.codecogs.com/png.latex?-2/%5Cepsilon%5E2"> calls of strike <img src="https://latex.codecogs.com/png.latex?K"> - this is known as the butterfly spread.</p>
<p>The payout at maturity as a function of <img src="https://latex.codecogs.com/png.latex?S_T"> has a triangular shape whose surface area is unity : it vanishes for <img src="https://latex.codecogs.com/png.latex?S_T%20%5Cleq%20K%20-%20%5Cepsilon"> and <img src="https://latex.codecogs.com/png.latex?S_T%20%5Cgeq%20K%20+%20%5Cepsilon"> and is equal to <img src="https://latex.codecogs.com/png.latex?1/%5Cepsilon"> for <img src="https://latex.codecogs.com/png.latex?S_T%20=%20K">. For <img src="https://latex.codecogs.com/png.latex?%5Cepsilon%20%5Cto%200">, it becomes a Dirac-Delta function. It either vanishes or is strictly positive dependending on <img src="https://latex.codecogs.com/png.latex?S_T">. Hence, its price at inception must be positive.</p>
<p>Options prices are arbitraged well-enough that butterfly spreads do not have negative prices : the denominator in the Dupire formula is positive.</p>
<p>By the Breeden-Litzenberger formula Equation&nbsp;11, <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7Bd%5E2%20C(K,T)%7D%7BdK%5E2%7D"> is related to the probability density of <img src="https://latex.codecogs.com/png.latex?S_T">, which must be positive. Hence, the condition <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7Bd%5E2%20C(K,T)%7D%7BdK%5E2%7D%20%3E%200"> is equivalent to requiring that the market implied risk-beutral probabilities are not negative. Violation of the positivity of <img src="https://latex.codecogs.com/png.latex?d%5E2%20C/dK%5E2"> is called butterfly-spread arbitrage.</p>
</section>
<section id="call-option-price-bounds" class="level3">
<h3 class="anchored" data-anchor-id="call-option-price-bounds">Call option price bounds</h3>
<p>From Equation&nbsp;10, we have:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cfrac%7B%5Cpartial%20C%7D%7B%5Cpartial%20K%7D%20=%20-e%5E%7B-r%5Ctau%7D%20%5Cint_%7BK%7D%5E%7B%5Cinfty%7Dp(s,t,y,T)dy%0A"></p>
<p>From the positivity of the integral <img src="https://latex.codecogs.com/png.latex?%5Cint_%7BK%7D%5E%7B%5Cinfty%7Dp(s,t,y,T)dy%20%3E%200">, we must have:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cfrac%7B%5Cpartial%20C%7D%7B%5Cpartial%20K%7D%20%5Cleq%200%0A"></p>
<p>Further, using the fact <img src="https://latex.codecogs.com/png.latex?%5Cint_%7B-%5Cinfty%7D%5E%7B%5Cinfty%7Dp(s,t,y,T)dy%20=%201">, we have:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign*%7D%0Ae%5E%7B-r%5Ctau%7D%5Cint_%7BK%7D%5E%7B%5Cinfty%7Dp(s,t,y,T)dy%20&amp;%5Cleq%20e%5E%7B-r%5Ctau%7D%20%5Cint_%7BK%7D%5E%7B%5Cinfty%7Dp(s,t,y,T)dy%20=%20e%5E%7B-r%5Ctau%7D%20%5C%5C%0A-e%5E%7B-r%5Ctau%7D%5Cint_%7BK%7D%5E%7B%5Cinfty%7Dp(s,t,y,T)dy%20%5Cfrac%7B%5Cpartial%20C%7D%7B%5Cpartial%20K%7D%5Cgeq%20-e%5E%7B-r%5Ctau%7D%0A%5Cend%7Balign*%7D%0A"></p>
<p>Putting it together, we have:</p>
<p><span id="eq-no-arbitrage-bounds-on-first-derivative-wrt-strike"><img src="https://latex.codecogs.com/png.latex?%0A%5Cboxed%7B-e%5E%7B-r%5Ctau%7D%20%5Cleq%20%5Cfrac%7B%5Cpartial%20C%7D%7B%5Cpartial%20K%7D%20%5Cleq%200%7D%0A%5Ctag%7B14%7D"></span></p>
<p>The option price is a decreasing and convex function of the strike <img src="https://latex.codecogs.com/png.latex?K">.</p>
</section>
</section>
<section id="dupire-pde-in-terms-of-forward-moneyness" class="level2">
<h2 class="anchored" data-anchor-id="dupire-pde-in-terms-of-forward-moneyness">Dupire PDE in terms of forward moneyness</h2>
<p>Let the log forward-moneyness be defined as <img src="https://latex.codecogs.com/png.latex?y%20=%20%5Cln(K/F)">. We need to transform the derivatives of the Dupire formula in terms of forward-moneyness.</p>
<p>The deterministic local volatility function is given by:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Csigma_%7BK,T%7D%5E2(S_t,t)%20=%20%5Cfrac%7B%5Cfrac%7B%5Cpartial%20C%5Eu_%7BK,T%7D%7D%7B%5Cpartial%20T%7D%20+%20rK%5Cfrac%7B%5Cpartial%20C%5Eu_%7BK,T%7D%7D%7B%5Cpartial%20K%7D%20-%20rC%5Eu_%7BK,T%7D%7D%7B%5Cfrac%7B1%7D%7B2%7DK%5E2%20%5Cfrac%7B%5Cpartial%5E2%20C%5Eu_%7BK,T%7D%7D%7B%5Cpartial%20K%5E2%7D%7D%0A"></p>
<p>The first derivative with respect to time <img src="https://latex.codecogs.com/png.latex?T"> is obtained using the total derivative rule. Imagine that the undiscounted call option price is a function of two intermediate variables <img src="https://latex.codecogs.com/png.latex?a,b"> which are in turn a function of <img src="https://latex.codecogs.com/png.latex?T">. That is, <img src="https://latex.codecogs.com/png.latex?C%5Eu%20=%20C%5Eu(a(T),b(T))">. Then:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign*%7D%0A%5Cfrac%7B%5Cpartial%20C%5Eu%7D%7B%5Cpartial%20T%7D(%7Ba(T),b(T)%7D)%20&amp;=%20%5Cleft.%5Cfrac%7B%5Cpartial%20C%5Eu%7D%7B%5Cpartial%20a%7D%5Cright%5Cvert_%7Bb%7D%20%5Ccdot%20%5Cfrac%7B%5Cpartial%20a%7D%7B%5Cpartial%20T%7D%20+%20%5Cleft.%5Cfrac%7B%5Cpartial%20C%5Eu%7D%7B%5Cpartial%20b%7D%5Cright%5Cvert_%7Ba%7D%20%20%5Ccdot%20%5Cfrac%7B%5Cpartial%20b%7D%7B%5Cpartial%20T%7D%20%20%0A%5Cend%7Balign*%7D%0A"></p>
<p>where <img src="https://latex.codecogs.com/png.latex?%5Cvert_%7Ba%7D"> indicates that <img src="https://latex.codecogs.com/png.latex?a"> is treated as a constant. For the undiscounted call option price <img src="https://latex.codecogs.com/png.latex?C%5Eu%20=%20C%5Eu(y(K,T),T)">, so <img src="https://latex.codecogs.com/png.latex?a(T)%20=%20y(K,T)"> and <img src="https://latex.codecogs.com/png.latex?b(T)%20=%20T">. So, we have:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign*%7D%0A%5Cfrac%7B%5Cpartial%20C%5Eu%7D%7B%5Cpartial%20T%7D(%7By(K,T),T%7D)%20&amp;=%20%5Cleft.%5Cfrac%7B%5Cpartial%20C%5Eu%7D%7B%5Cpartial%20y%7D%5Cright%5Cvert_%7BT%7D%20%5Ccdot%20%5Cfrac%7B%5Cpartial%20y%7D%7B%5Cpartial%20T%7D%20+%20%5Cleft.%5Cfrac%7B%5Cpartial%20C%5Eu%7D%7B%5Cpartial%20T%7D%5Cright%5Cvert_%7By%7D%20%20%5Ccdot%20%5Cfrac%7B%5Cpartial%20T%7D%7B%5Cpartial%20T%7D%20%5C%5C%0A&amp;=%20%5Cleft.%5Cfrac%7B%5Cpartial%20C%5Eu%7D%7B%5Cpartial%20y%7D%5Cright%5Cvert_%7BT%7D%20%5Ccdot%20%5Cfrac%7B%5Cpartial%20y%7D%7B%5Cpartial%20T%7D%20+%20%5Cleft.%5Cfrac%7B%5Cpartial%20C%5Eu%7D%7B%5Cpartial%20T%7D%5Cright%5Cvert_%7By%7D%20%20%5C%5C%0A%5Cend%7Balign*%7D%0A"></p>
<p>Now,</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign*%7D%0Ay(K,T)%20&amp;=%20(-rT)+%5Cln%5Cleft(%5Cfrac%7BK%7D%7BS_0%7D%5Cright)%5C%5C%0A%5Cfrac%7B%5Cpartial%20y%7D%7B%5Cpartial%20T%7D%20&amp;=%20(-r)%0A%5Cend%7Balign*%7D%0A"></p>
<p>Thus,</p>
<p><span id="eq-dupire-formula-in-forward-moneyness-terms-1"><img src="https://latex.codecogs.com/png.latex?%0A%5Cfrac%7B%5Cpartial%20C%5Eu%7D%7B%5Cpartial%20T%7D%20=%20-r%5Cleft.%5Cfrac%7B%5Cpartial%20C%5Eu%7D%7B%5Cpartial%20y%7D%5Cright%5Cvert_%7BT%7D%20%20+%20%5Cleft.%5Cfrac%7B%5Cpartial%20C%5Eu%7D%7B%5Cpartial%20T%7D%5Cright%5Cvert_%7By%7D%20%20%5C%5C%0A%5Ctag%7B15%7D"></span></p>
<p>Using the chain rule, the first derivative with respect to <img src="https://latex.codecogs.com/png.latex?K"> is:</p>
<p><span id="eq-dupire-formula-in-forward-moneyness-terms-2"><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign*%7D%0A%5Cfrac%7B%5Cpartial%20C%5Eu%7D%7B%5Cpartial%20K%7D%20&amp;=%20%5Cfrac%7B%5Cpartial%20C%5Eu%7D%7B%5Cpartial%20y%7D%20%5Ccdot%20%5Cfrac%7B%5Cpartial%20y%7D%7B%5Cpartial%20K%7D%20%5C%5C%0A&amp;=%20%5Cfrac%7B%5Cpartial%20C%5Eu%7D%7B%5Cpartial%20y%7D%20%5Ccdot%20%5Cfrac%7B%5Cpartial%20%7D%7B%5Cpartial%20K%7D%20%5Cln%5Cleft(%5Cfrac%7BK%7D%7BF_t%7D%5Cright)%5C%5C%0A&amp;=%20%5Cfrac%7B%5Cpartial%20C%5Eu%7D%7B%5Cpartial%20y%7D%20%5Ccdot%20%5Cfrac%7BF%7D%7BK%7D%20%5Ccdot%20%5Cfrac%7B%5Cpartial%7D%7B%5Cpartial%20K%7D%20%5Cleft(%5Cfrac%7BK%7D%7BF_t%7D%5Cright)%5C%5C%0A&amp;=%20%5Cfrac%7B1%7D%7BK%7D%20%5Cfrac%7B%5Cpartial%20C%5Eu%7D%7B%5Cpartial%20y%7D%0A%5Cend%7Balign*%7D%0A%5Ctag%7B16%7D"></span></p>
<p>Differentiating again with respect to <img src="https://latex.codecogs.com/png.latex?K">, we have:</p>
<p><span id="eq-dupire-formula-in-forward-moneyness-terms-3"><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign*%7D%0A%5Cfrac%7B%5Cpartial%5E2%20C%5Eu%7D%7B%5Cpartial%20K%5E2%7D%20&amp;=%20%5Cfrac%7B%5Cpartial%7D%7B%5Cpartial%20K%7D%20%5Cleft(%5Cfrac%7B1%7D%7BK%7D%20%5Cfrac%7B%5Cpartial%20C%5Eu%7D%7B%5Cpartial%20y%7D%5Cright)%20%5C%5C%0A&amp;=%20-%5Cfrac%7B1%7D%7BK%5E2%7D%20%5Cfrac%7B%5Cpartial%20C%5Eu%7D%7B%5Cpartial%20y%7D%20+%20%5Cfrac%7B1%7D%7BK%7D%20%5Cfrac%7B%5Cpartial%7D%7B%5Cpartial%20K%7D%20%5Cleft(%5Cfrac%7B%5Cpartial%20C%5Eu%7D%7B%5Cpartial%20y%7D%5Cright)%5C%5C%0A&amp;=%20-%5Cfrac%7B1%7D%7BK%5E2%7D%20%5Cfrac%7B%5Cpartial%20C%5Eu%7D%7B%5Cpartial%20y%7D%20+%20%5Cfrac%7B1%7D%7BK%7D%20%5Cfrac%7B%5Cpartial%7D%7B%5Cpartial%20y%7D%20%5Cleft(%5Cfrac%7B%5Cpartial%20C%5Eu%7D%7B%5Cpartial%20y%7D%5Cright)%5Cfrac%7B%5Cpartial%20y%7D%7B%5Cpartial%20K%7D%5C%5C%0A&amp;=%20-%5Cfrac%7B1%7D%7BK%5E2%7D%20%5Cfrac%7B%5Cpartial%20C%5Eu%7D%7B%5Cpartial%20y%7D%20+%20%5Cfrac%7B1%7D%7BK%5E2%7D%5Cfrac%7B%5Cpartial%5E2%20C%5Eu%7D%7B%5Cpartial%20y%5E2%7D%5C%5C%0A&amp;=%5Cfrac%7B1%7D%7BK%5E2%7D%5Cleft(%5Cfrac%7B%5Cpartial%5E2%20C%5Eu%7D%7B%5Cpartial%20y%5E2%7D%20-%20%5Cfrac%7B%5Cpartial%20C%5Eu%7D%7B%5Cpartial%20y%7D%5Cright)%0A%5Cend%7Balign*%7D%0A%5Ctag%7B17%7D"></span></p>
<p>Substituting Equation&nbsp;15, Equation&nbsp;16 and Equation&nbsp;17 in the expression for local volatility, we have:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign*%7D%0A%5Csigma_%7BK,T%7D%5E2(S_t,t)%20&amp;=%20%5Cfrac%7B-r%20%5Cleft.%5Cfrac%7B%5Cpartial%20C%5Eu_%7By,T%7D%7D%7B%5Cpartial%20y%7D%5Cright%5Cvert_%7BT%7D%20+%20%5Cleft.%5Cfrac%7B%5Cpartial%20C%5Eu_%7By,T%7D%7D%7B%5Cpartial%20T%7D%5Cright%5Cvert_%7By%7D%20+%20rK%5Cfrac%7B%5Cpartial%20C%5Eu_%7By,T%7D%7D%7B%5Cpartial%20y%7D%20%5Ccdot%20%5Cfrac%7B1%7D%7BK%7D%20-%20rC%5Eu_%7By,T%7D%7D%7B%5Cfrac%7B1%7D%7B2%7DK%5E2%20%5Cfrac%7B1%7D%7BK%5E2%7D%5Ccdot%20%5Cleft(%5Cfrac%7B%5Cpartial%5E2%20C%5Eu%7D%7B%5Cpartial%20y%5E2%7D%20-%20%5Cfrac%7B%5Cpartial%20C%5Eu%7D%7B%5Cpartial%20y%7D%5Cright)%7D%5C%5C%0A&amp;=%20%5Cfrac%7B%20%5Cleft.%5Cfrac%7B%5Cpartial%20C%5Eu_%7By,T%7D%7D%7B%5Cpartial%20T%7D%5Cright%5Cvert_%7By%7D%20+%20%20-%20rC%5Eu_%7By,T%7D%7D%7B%5Cfrac%7B1%7D%7B2%7D%20%5Cleft(%5Cfrac%7B%5Cpartial%5E2%20C%5Eu%7D%7B%5Cpartial%20y%5E2%7D%20-%20%5Cfrac%7B%5Cpartial%20C%5Eu%7D%7B%5Cpartial%20y%7D%5Cright)%7D%5C%5C%0A%5Cfrac%7B%5Cpartial%20C%5Eu_%7By,T%7D%7D%7B%5Cpartial%20T%7D%20&amp;=%20rC%5Eu_%7By,T%7D%20+%20%5Cfrac%7B%5Csigma_%7By,T%7D%5E2%7D%7B2%7D%5Cleft(%5Cfrac%7B%5Cpartial%5E2%20C%5Eu_%7By,T%7D%7D%7B%5Cpartial%20y%5E2%7D%20-%20%5Cfrac%7B%5Cpartial%20C%5Eu_%7By,T%7D%7D%7B%5Cpartial%20y%7D%5Cright)%0A%5Cend%7Balign*%7D%0A"></p>
</section>
<section id="local-volatility-in-terms-of-implied-volatility" class="level2">
<h2 class="anchored" data-anchor-id="local-volatility-in-terms-of-implied-volatility">Local volatility in terms of implied volatility</h2>
<p>Since options can also be quoted in terms of implied volatility, the local volatility may also be expressed in terms of the total variance <img src="https://latex.codecogs.com/png.latex?w(y,T)">. Define:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0Aw(y,T)%20=%20%5CSigma%5E2(y,T)%20T%0A"></p>
<p>where <img src="https://latex.codecogs.com/png.latex?%5CSigma(y,T)"> is the Black-Scholes implied volatility as a function of forward-moneyness and time-to-maturity <img src="https://latex.codecogs.com/png.latex?T">.</p>
<p>We know that the Black-Scholes formula for the future value of the call-option price is:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0AC_%7BBS%7D(y,w)%20=%20F%5Cleft(%5CPhi%5Cleft(-%5Cfrac%7By%7D%7B%5Csqrt%7Bw%7D%7D+%5Cfrac%7B%5Csqrt%7Bw%7D%7D%7B2%7D%5Cright)%20-%20e%5Ey%5CPhi%5Cleft(-%5Cfrac%7By%7D%7B%5Csqrt%7Bw%7D%7D-%5Cfrac%7B%5Csqrt%7Bw%7D%7D%7B2%7D%5Cright)%5Cright)%0A"></p>
<p>Differentiating with respect to <img src="https://latex.codecogs.com/png.latex?w">, we have:</p>
<p><span id="eq-BS-derivative-wrt-w"><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Baligned%7D%0A%5Cfrac%7B%5Cpartial%20C_%7BBS%7D%7D%7B%5Cpartial%20w%7D%20&amp;%20=F_%7BT%7D%5Cleft%5C%7B%5Cphi%20%5Cleft(%20-%5Cfrac%7By%7D%7B%5Csqrt%7Bw%7D%7D%20+%5Cfrac%7B%5Csqrt%7Bw%7D%7D%7B2%7D%5Cright)%5Cfrac%7B%5Cpartial%20%7D%7B%5Cpartial%20w%7D%5Cleft(%20-%5Cfrac%7By%7D%7B%5Csqrt%7Bw%7D%7D%20+%5Cfrac%7B%5Csqrt%7Bw%7D%7D%7B2%7D%5Cright)%20-e%5E%7By%7D%20%5Cphi%20%5Cleft(%20-%5Cfrac%7By%7D%7B%5Csqrt%7Bw%7D%7D%20-%5Cfrac%7B%5Csqrt%7Bw%7D%7D%7B2%7D%5Cright)%5Cfrac%7B%5Cpartial%20%7D%7B%5Cpartial%20w%7D%5Cleft(%20-%5Cfrac%7By%7D%7B%5Csqrt%7Bw%7D%7D%20-%5Cfrac%7B%5Csqrt%7Bw%7D%7D%7B2%7D%5Cright)%5Cright%5C%7D%5C%5C%0A&amp;%20=F_%7BT%7D%5Cleft%5C%7B%5Cphi%20%5Cleft(%20-%5Cfrac%7By%7D%7B%5Csqrt%7Bw%7D%7D%20+%5Cfrac%7B%5Csqrt%7Bw%7D%7D%7B2%7D%5Cright)%5Cleft(%5Cfrac%7By%7D%7B2w%5E%7B3/2%7D%7D%20+%5Cfrac%7B1%7D%7B4w%5E%7B1/2%7D%7D%5Cright)%20-e%5E%7By%7D%20%5Cphi%20%5Cleft(%20-%5Cfrac%7By%7D%7B%5Csqrt%7Bw%7D%7D%20-%5Cfrac%7B%5Csqrt%7Bw%7D%7D%7B2%7D%5Cright)%5Cleft(%5Cfrac%7By%7D%7B2w%5E%7B3/2%7D%7D%20-%5Cfrac%7B1%7D%7B4w%5E%7B1/2%7D%7D%5Cright)%5Cright%5C%7D%5C%5C%0A&amp;%20=F_%7BT%7D%5Cleft%5C%7B%5Cphi%20%5Cleft(%20-%5Cfrac%7By%7D%7B%5Csqrt%7Bw%7D%7D%20+%5Cfrac%7B%5Csqrt%7Bw%7D%7D%7B2%7D%5Cright)%5Cleft(%5Cfrac%7By%7D%7B2w%5E%7B3/2%7D%7D%20+%5Cfrac%7B1%7D%7B4w%5E%7B1/2%7D%7D%5Cright)%20-%5Cleft(%5Cfrac%7By%7D%7B2w%5E%7B3/2%7D%7D%20-%5Cfrac%7B1%7D%7B4w%5E%7B1/2%7D%7D%5Cright)%5Cright%5C%7D%5C%5C%0A&amp;%20=F_%7BT%7D%20%5Cphi%20%5Cleft(%20-%5Cfrac%7By%7D%7B%5Csqrt%7Bw%7D%7D%20+%5Cfrac%7B%5Csqrt%7Bw%7D%7D%7B2%7D%5Cright)%20%5Ccdotp%20%5Cfrac%7B1%7D%7B2w%5E%7B1/2%7D%7D%0A%5Cend%7Baligned%7D%0A%5Ctag%7B18%7D"></span></p>
<p>Differentiating again with respect to <img src="https://latex.codecogs.com/png.latex?w">:</p>
<p><span id="eq-BS-second-derivative-wrt-w"><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Baligned%7D%0A%5Cfrac%7B%5Cpartial%20%5E%7B2%7D%20C_%7BBS%7D%7D%7B%5Cpartial%20w%5E%7B2%7D%7D%20&amp;%20=F_%7BT%7D%5Cfrac%7B%5Cpartial%20%7D%7B%5Cpartial%20w%7D%5Cleft(%20%5Cphi%20(%20d_%7B+%7D)%20%5Ccdotp%20%5Cfrac%7B1%7D%7B2w%5E%7B1/2%7D%7D%5Cright)%5C%5C%0A&amp;%20=F_%7BT%7D%5Cleft%5B%5Cfrac%7B1%7D%7B2w%5E%7B1/2%7D%7D%5Cfrac%7B%5Cpartial%20%7D%7B%5Cpartial%20w%7D(%20%5Cphi%20(%20d_%7B+%7D))%20+%5Cphi%20(%20d_%7B+%7D)%5Cfrac%7B%5Cpartial%20%7D%7B%5Cpartial%20w%7D%5Cleft(%5Cfrac%7B1%7D%7B2w%5E%7B1/2%7D%7D%5Cright)%5Cright%5D%5C%5C%0A&amp;%20=F_%7BT%7D%5Cleft%5B%5Cfrac%7B1%7D%7B2w%5E%7B1/2%7D%7D%20%5Cphi%20(%20d_%7B+%7D)%5Cfrac%7B%5Cpartial%20%7D%7B%5Cpartial%20w%7D%5Cleft(%20-%5Cfrac%7Bd_%7B+%7D%5E%7B2%7D%7D%7B2%7D%5Cright)%20-%5Cphi%20(%20d_%7B+%7D)%5Cfrac%7B1%7D%7B4w%5E%7B3/2%7D%7D%5Cright%5D%5C%5C%0A&amp;%20=F_%7BT%7D%5Cfrac%7B%5Cphi%20(%20d_%7B+%7D)%7D%7B2w%5E%7B1/2%7D%7D%5Cleft%5B%5Cfrac%7B%5Cpartial%20%7D%7B%5Cpartial%20w%7D%5Cleft(%20-%5Cfrac%7Bd_%7B+%7D%5E%7B2%7D%7D%7B2%7D%5Cright)%20-%5Cfrac%7B1%7D%7B2w%7D%5Cright%5D%5C%5C%0A&amp;%20=%5Cfrac%7B%5Cpartial%20C_%7BBS%7D%7D%7B%5Cpartial%20w%7D%5Cleft%5B%20-d_%7B+%7D%5Cfrac%7B%5Cpartial%20d_%7B+%7D%7D%7B%5Cpartial%20w%7D%20-%5Cfrac%7B1%7D%7B2w%7D%5Cright%5D%5C%5C%0A&amp;%20=%5Cfrac%7B%5Cpartial%20C_%7BBS%7D%7D%7B%5Cpartial%20w%7D%5Cleft%5B%20-%5Cleft(%20-%5Cfrac%7By%7D%7Bw%5E%7B1/2%7D%7D%20+%5Cfrac%7Bw%5E%7B1/2%7D%7D%7B2%7D%5Cright)%5Cleft(%5Cfrac%7By%7D%7B2w%5E%7B3/2%7D%7D%20+%5Cfrac%7B1%7D%7B4w%5E%7B1/2%7D%7D%5Cright)%20-%5Cfrac%7B1%7D%7B2w%7D%5Cright%5D%5C%5C%0A&amp;%20=%5Cfrac%7B%5Cpartial%20C_%7BBS%7D%7D%7B%5Cpartial%20w%7D%5Cleft%5B%5Cfrac%7By%5E%7B2%7D%7D%7B2w%5E%7B2%7D%7D%20+%5Cfrac%7By%7D%7B4w%7D%20-%5Cfrac%7By%7D%7B4w%7D%20-%5Cfrac%7B1%7D%7B8%7D%20-%5Cfrac%7B1%7D%7B2w%7D%5Cright%5D%5C%5C%0A&amp;%20=%5Cfrac%7B%5Cpartial%20C_%7BBS%7D%7D%7B%5Cpartial%20w%7D%5Cleft(%5Cfrac%7By%5E%7B2%7D%7D%7B2w%5E%7B2%7D%7D%20-%5Cfrac%7B1%7D%7B2w%7D%20-%5Cfrac%7B1%7D%7B8%7D%5Cright)%0A%5Cend%7Baligned%7D%0A%5Ctag%7B19%7D"></span></p>
<p>Also, the mixed partial <img src="https://latex.codecogs.com/png.latex?%5Cpartial_%7Bwy%7D%20C_%7BBS%7D"> is given by:</p>
<p><span id="eq-BS-mixed-partial-derivative-wrt-wy"><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Baligned%7D%0A%5Cfrac%7B%5Cpartial%20%5E%7B2%7D%20C_%7BBS%7D%7D%7B%5Cpartial%20w%5Cpartial%20y%7D%20&amp;%20=%5Cfrac%7BF_%7BT%7D%7D%7B2w%5E%7B1/2%7D%7D%5Cfrac%7B%5Cpartial%20%7D%7B%5Cpartial%20y%7D%5Cleft%5C%7B%5Cphi%20%5Cleft(%20-%5Cfrac%7By%7D%7B%5Csqrt%7Bw%7D%7D%20+%5Cfrac%7B%5Csqrt%7Bw%7D%7D%7B2%7D%5Cright)%5Cright%5C%7D%5C%5C%0A&amp;%20=%5Cfrac%7BF_%7BT%7D%7D%7B2w%5E%7B1/2%7D%7D%20%5Cphi%20%5Cleft(%20-%5Cfrac%7By%7D%7B%5Csqrt%7Bw%7D%7D%20+%5Cfrac%7B%5Csqrt%7Bw%7D%7D%7B2%7D%5Cright)%5Cfrac%7B%5Cpartial%20%7D%7B%5Cpartial%20y%7D%5Cleft(%20-%5Cfrac%7Bd_%7B+%7D%5E%7B2%7D%7D%7B2%7D%5Cright)%5C%5C%0A&amp;%20=%5Cfrac%7B%5Cpartial%20C_%7BBS%7D%7D%7B%5Cpartial%20w%7D%5Cfrac%7B%5Cpartial%20%7D%7B%5Cpartial%20d_%7B+%7D%7D%5Cleft(%20-%5Cfrac%7Bd_%7B+%7D%5E%7B2%7D%7D%7B2%7D%5Cright)%5Cfrac%7B%5Cpartial%20d_%7B+%7D%7D%7B%5Cpartial%20y%7D%5C%5C%0A&amp;%20=-%5Cfrac%7B%5Cpartial%20C_%7BBS%7D%7D%7B%5Cpartial%20w%7D%5Cleft(%20-%5Cfrac%7By%7D%7Bw%5E%7B1/2%7D%7D%20+%5Cfrac%7Bw%5E%7B1/2%7D%7D%7B2%7D%5Cright)%5Cleft(%20-%5Cfrac%7B1%7D%7B%5Csqrt%7Bw%7D%7D%5Cright)%5C%5C%0A&amp;%20=%5Cfrac%7B%5Cpartial%20C_%7BBS%7D%7D%7B%5Cpartial%20w%7D%5Cleft(%5Cfrac%7B1%7D%7B2%7D%20-%5Cfrac%7By%7D%7Bw%7D%5Cright)%0A%5Cend%7Baligned%7D%0A%5Ctag%7B20%7D"></span></p>
<p>Additionally, the partial derivatives of the Black-Scholes formula with respect to <img src="https://latex.codecogs.com/png.latex?y"> are:</p>
<p><span id="eq-BS-partial-derivative-wrt-y"><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Baligned%7D%0A%5Cfrac%7B%5Cpartial%20C_%7BBS%7D%7D%7B%5Cpartial%20y%7D%20&amp;%20=F_%7BT%7D%5Cfrac%7B%5Cpartial%20%7D%7B%5Cpartial%20y%7D%5Cleft%5C%7B%5CPhi%20%5Cleft(%20-%5Cfrac%7By%7D%7B%5Csqrt%7Bw%7D%7D%20+%5Cfrac%7B%5Csqrt%7Bw%7D%7D%7B2%7D%5Cright)%20-e%5E%7By%7D%20%5CPhi%20%5Cleft(%20-%5Cfrac%7By%7D%7B%5Csqrt%7Bw%7D%7D%20-%5Cfrac%7B%5Csqrt%7Bw%7D%7D%7B2%7D%5Cright)%5Cright%5C%7D%5C%5C%0A&amp;%20=F_%7BT%7D%20%5Ccdot%20%5Cleft%5B%20%5Cphi%20%5Cleft(%20-%5Cfrac%7By%7D%7B%5Csqrt%7Bw%7D%7D%20+%5Cfrac%7B%5Csqrt%7Bw%7D%7D%7B2%7D%5Cright)%5Cfrac%7B%5Cpartial%20d_%7B+%7D%7D%7B%5Cpartial%20y%7D%20-e%5E%7By%7D%20%5CPhi%20%5Cleft(%20-%5Cfrac%7By%7D%7B%5Csqrt%7Bw%7D%7D%20-%5Cfrac%7B%5Csqrt%7Bw%7D%7D%7B2%7D%5Cright)%5Cright%5D%5C%5C%0A&amp;%20-F_%7BT%7D%5Cleft%5B%20e%5E%7By%7D%20%5Cphi%20%5Cleft(%20-%5Cfrac%7By%7D%7B%5Csqrt%7Bw%7D%7D%20-%5Cfrac%7B%5Csqrt%7Bw%7D%7D%7B2%7D%5Cright)%5Cfrac%7B%5Cpartial%20d_%7B-%7D%7D%7B%5Cpartial%20y%7D%5Cright%5D%5C%5C%0A&amp;%20=F_%7BT%7D%20%5Ccdot%20%5Cleft%5B%20%5Cphi%20%5Cleft(%20-%5Cfrac%7By%7D%7B%5Csqrt%7Bw%7D%7D%20+%5Cfrac%7B%5Csqrt%7Bw%7D%7D%7B2%7D%5Cright)%5Cleft(%20-%5Cfrac%7B1%7D%7B%5Csqrt%7Bw%7D%7D%5Cright)%20-e%5E%7By%7D%20%5CPhi%20%5Cleft(%20-%5Cfrac%7By%7D%7B%5Csqrt%7Bw%7D%7D%20-%5Cfrac%7B%5Csqrt%7Bw%7D%7D%7B2%7D%5Cright)%5Cright%5D%5C%5C%0A&amp;%20-F_%7BT%7D%5Cleft%5B%20e%5E%7By%7D%20%5Cphi%20%5Cleft(%20-%5Cfrac%7By%7D%7B%5Csqrt%7Bw%7D%7D%20-%5Cfrac%7B%5Csqrt%7Bw%7D%7D%7B2%7D%5Cright)%5Cleft(%20-%5Cfrac%7B1%7D%7B%5Csqrt%7Bw%7D%7D%5Cright)%5Cright%5D%5C%5C%0A&amp;%20=-%5Cfrac%7BF_%7BT%7D%7D%7B%5Csqrt%7Bw%7D%7D%20%5Ccdot%20%5Cleft%5B%20%5Cphi%20(%20d_%7B+%7D)%20-e%5E%7By%7D%20%5Cphi%20(%20d_%7B-%7D)%5Cright%5D%5C%5C%0A&amp;%20-F_%7BT%7D%20e%5E%7By%7D%20%5CPhi%20(%20d_%7B-%7D)%5C%5C%0A&amp;%20=-F_%7BT%7D%20e%5E%7By%7D%20%5CPhi%20(%20d_%7B-%7D)%0A%5Cend%7Baligned%7D%0A%5Ctag%7B21%7D"></span></p>
<p>Also:</p>
<p><span id="eq-BS-second-partial-derivative-wrt-y"><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Baligned%7D%0A%5Cfrac%7B%5Cpartial%20%5E%7B2%7D%20C_%7BBS%7D%7D%7B%5Cpartial%20y%5E%7B2%7D%7D%20&amp;%20=-F_%7BT%7D%5Cfrac%7B%5Cpartial%20%7D%7B%5Cpartial%20y%7D%5Cleft(%20e%5E%7By%7D%20%5CPhi%20(%20d_%7B-%7D)%5Cright)%5C%5C%0A&amp;%20=-F_%7BT%7D%5Cleft(%20e%5E%7By%7D%20%5CPhi%20(%20d_%7B-%7D)%20+e%5E%7By%7D%20%5Cphi%20(%20d_%7B-%7D)%5Cfrac%7B%5Cpartial%20d_%7B-%7D%7D%7B%5Cpartial%20y%7D%5Cright)%5C%5C%0A&amp;%20=-F_%7BT%7D%20e%5E%7By%7D%20%5CPhi%20(%20d_%7B-%7D)%20+%5Cfrac%7BF_%7BT%7D%20e%5E%7By%7D%20%5Cphi%20(%20d_%7B-%7D)%7D%7B%5Csqrt%7Bw%7D%7D%5C%5C%0A&amp;%20=%5Cfrac%7B%5Cpartial%20C_%7BBS%7D%7D%7B%5Cpartial%20y%7D%20+2%5Cfrac%7B%5Cpartial%20C_%7BBS%7D%7D%7B%5Cpartial%20w%7D%0A%5Cend%7Baligned%7D%0A%5Ctag%7B22%7D"></span></p>
<p>Now, the undiscounted call option price <img src="https://latex.codecogs.com/png.latex?C%5Eu(y,T)%20=%20C_%7BBS%7D(y(T),w(y,T))"> is a function of the intermediate variables <img src="https://latex.codecogs.com/png.latex?(y,w)">. So, we may write:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Baligned%7D%0AC%5Eu(y,T)%20&amp;=%20C_%7BBS%7D(w(y),y)%5C%5C%0AC%5Eu_y(y,T)%20&amp;=%20(C_%7BBS%7D)_w%20%5Ccdot%20w_y%20+%20(C_%7BBS%7D)_y%0A%5Cend%7Baligned%7D%0A"></p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Baligned%7D%0AC_%7Byy%7D%20&amp;=%20%5Cfrac%7B%5Cpartial%7D%7B%5Cpartial%20y%7D%5Cleft((C_%7BBS%7D)_w%20%5Ccdot%20w_y%20+%20(C_%7BBS%7D)_y%5Cright)%5C%5C%0A&amp;=%5Cfrac%7B%5Cpartial%7D%7B%5Cpartial%20y%7D%5Cleft%5B(C_%7BBS%7D)_w%20%5Ccdot%20w_y%5Cright%5D%20+%20%5Cfrac%7B%5Cpartial%7D%7B%5Cpartial%20y%7D((C_%7BBS%7D)_y)%5C%5C%0A&amp;=%5Cleft%5B%5Cfrac%7B%5Cpartial%7D%7B%5Cpartial%20y%7D%5C%7B(C_%7BBS%7D)_w%5C%7D%20%5Ccdot%20w_y%20+%20(C_%7BBS%7D)_w%20%5Ccdot%20w_%7Byy%7D%5Cright%5D%20+%20(C_%7BBS%7D)_%7Byy%7D%20+%20(C_%7BBS%7D)_%7Byw%7D%20%5Ccdot%20w_y%5C%5C%0A&amp;=%5Cleft%5B%5C%7B(C_%7BBS%7D)_%7Bww%7D%20%5Ccdot%20w_y%20+%20(C_%7BBS%7D)_%7Bwy%7D%5C%7D%20%5Ccdot%20w_y%20+%20(C_%7BBS%7D)_w%20%5Ccdot%20w_%7Byy%7D%5Cright%5D%20+%20(C_%7BBS%7D)_%7Byy%7D%20+%20(C_%7BBS%7D)_%7Byw%7D%20%5Ccdot%20w_y%5C%5C%0A&amp;=%20(C_%7BBS%7D)_%7Byy%7D%20+%202(C_%7BBS%7D)_%7Bwy%7D%20%5Ccdot%20w_y%20+%20(C_%7BBS%7D)_%7Bww%7D%20%5Ccdot%20(w_y)%5E2%20+%20(C_%7BBS%7D)_w%20%5Ccdot%20w_%7Byy%7D%0A%5Cend%7Baligned%7D%0A"></p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign*%7D%0A%5Cleft.%5Cfrac%7B%5Cpartial%20C_u(y,T)%7D%7B%5Cpartial%20T%7D%5Cright%7C_y%20&amp;=%20%5Cleft.%5Cfrac%7B%5Cpartial%20C_%7BBS%7D(w(y,T),T)%7D%7B%5Cpartial%20T%7D%5Cright%7C_%7Bw%7D%20%5Ccdot%20%5Cfrac%7B%5Cpartial%20T%7D%7B%5Cpartial%20T%7D%20+%20%5Cfrac%7B%5Cpartial%20C_%7BBS%7D%7D%7B%5Cpartial%20w%7D%20%5Ccdot%20%5Cfrac%7B%5Cpartial%20w%7D%7B%5Cpartial%20T%7D%5C%5C%0A&amp;=%20rC_%7BBS%7D%20+%20%5Cfrac%7B%5Cpartial%20C_%7BBS%7D%7D%7B%5Cpartial%20w%7D%20%5Ccdot%20%5Cfrac%7B%5Cpartial%20w%7D%7B%5Cpartial%20T%7D%5C%5C%0A%5Cend%7Balign*%7D%0A"></p>
<p>where the last equality follows from the fact that the only explicit dependence of the option price on <img src="https://latex.codecogs.com/png.latex?T"> is through the forward price <img src="https://latex.codecogs.com/png.latex?F_T%20=%20S_0%20%5Cexp(%5Cint_0%5ET%20r%20dt)">.</p>
<p>Substituting these results in the Dupire’s formula:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign*%7D%0A%5Cfrac%7B%5Cpartial%20C%5Eu(y,T)%7D%7B%5Cpartial%20T%7D%20&amp;=%20rC%5Eu(y,T)%20+%20%5Cfrac%7B%5Csigma%5E2(y,T)%7D%7B2%7D%5Cleft(%5Cfrac%7B%5Cpartial%5E2%20C_u(y,T)%7D%7B%5Cpartial%20y%5E2%7D%20-%20%5Cfrac%7B%5Cpartial%20C_u(y,T)%7D%7B%5Cpartial%20y%7D%5Cright)%5C%5C%0ArC_%7BBS%7D%20+%20(C_%7BBS%7D)_w%20%5Ccdot%20w_T%20&amp;=%20rC_%7BBS%7D%20+%20%5Csigma_%7BLV%7D%5E2/2((C_%7BBS%7D)_%7Byy%7D%20+%202(C_%7BBS%7D)_%7Bwy%7D%20%5Ccdot%20w_y%20+%20(C_%7BBS%7D)_%7Bww%7D%20%5Ccdot%20(w_y)%5E2%20+%20(C_%7BBS%7D)_w%20%5Ccdot%20w_%7Byy%7D-%20(C_%7BBS%7D)_y)%5C%5C%0A(C_%7BBS%7D)_w%20%5Ccdot%20w_T%20&amp;=%20%5Csigma_%7BLV%7D%5E2/2%5B((C_%7BBS%7D)_%7Byy%7D%20-%20(C_%7BBS%7D)_y)%20+%202(C_%7BBS%7D)_%7Bwy%7D%20%5Ccdot%20w_y%20%20+%20(C_%7BBS%7D)_%7Bww%7D%20%5Ccdot%20(w_y)%5E2%20+%20(C_%7BBS%7D)_w%20%5Ccdot%20w_%7Byy%7D-(C_%7BBS%7D)_w%20%5Ccdot%20w_y%5D%5C%5C%0A(C_%7BBS%7D)_w%20%5Ccdot%20w_T%20&amp;=%20%5Csigma_%7BLV%7D%5E2/2%5B2(C_%7BBS%7D)_w%20+%202(C_%7BBS%7D)_w%20%5Cleft(%5Cfrac%7B1%7D%7B2%7D%20-%20%5Cfrac%7By%7D%7Bw%7D%5Cright)%5Ccdot%20w_y%20+%20%5Cleft(%5Cfrac%7By%5E%7B2%7D%7D%7B2w%5E%7B2%7D%7D%20-%5Cfrac%7B1%7D%7B2w%7D%20-%5Cfrac%7B1%7D%7B8%7D%5Cright)(C_%7BBS%7D)_w%20(w_y)%5E2%20+%20(C_%7BBS%7D)_w%20%5Ccdot%20w_%7Byy%7D-(C_%7BBS%7D)_w%20%5Ccdot%20w_y%5D%5C%5C%0Aw_T%20&amp;=%20%5Csigma_%7BLV%7D%5E2/2%5B2%20+%202%20%5Cleft(%5Cfrac%7B1%7D%7B2%7D%20-%20%5Cfrac%7By%7D%7Bw%7D%5Cright)%5Ccdot%20w_y%20+%20%5Cleft(%5Cfrac%7By%5E%7B2%7D%7D%7B2w%5E%7B2%7D%7D%20-%5Cfrac%7B1%7D%7B2w%7D%20-%5Cfrac%7B1%7D%7B8%7D%5Cright)(w_y)%5E2%20+%20w_%7Byy%7D-%20%20w_y%5D%5C%5C%0A%5Csigma_%7BLV%7D%5E2%20&amp;=%20%5Cfrac%7Bw_T%7D%7B1%20-%20%5Cfrac%7By%7D%7Bw%7Dw_y%20+%20%5Cfrac%7B1%7D%7B4%7D%5Cleft(%5Cfrac%7By%5E2%7D%7B2w%5E2%7D%20-%20%5Cfrac%7B1%7D%7Bw%7D%20-%20%5Cfrac%7B1%7D%7B4%7D%5Cright)(w_y)%5E2%20+%20%5Cfrac%7B1%7D%7B2%7D%20w_%7Byy%7D%7D%0A%5Cend%7Balign*%7D%0A"></p>
<p>This gives us our final result:</p>
<p><span id="eq-local-vol-in-terms-of-implied-vol"><img src="https://latex.codecogs.com/png.latex?%0A%5Cboxed%7B%5Csigma_%7BLV%7D%5E2%20=%20%5Cfrac%7B%5Cfrac%7B%5Cpartial%20w%7D%7B%5Cpartial%20T%7D%7D%7B1%20-%20%5Cfrac%7By%7D%7Bw%7D%5Cfrac%7B%5Cpartial%20w%7D%7B%5Cpartial%20y%7D%20+%20%5Cfrac%7B1%7D%7B4%7D%5Cleft(%5Cfrac%7By%5E2%7D%7B2w%5E2%7D%20-%20%5Cfrac%7B1%7D%7Bw%7D%20-%20%5Cfrac%7B1%7D%7B4%7D%5Cright)(%5Cfrac%7B%5Cpartial%20w%7D%7B%5Cpartial%20y%7D)%5E2%20+%20%5Cfrac%7B1%7D%7B2%7D%20%5Cfrac%7B%5Cpartial%5E2%20w%7D%7B%5Cpartial%20y%5E2%7D%7D%7D%0A%5Ctag%7B23%7D"></span></p>
</section>
<section id="implied-variance-is-the-average-of-local-variance-over-the-life-of-the-option-when-there-is-no-skew" class="level2">
<h2 class="anchored" data-anchor-id="implied-variance-is-the-average-of-local-variance-over-the-life-of-the-option-when-there-is-no-skew">Implied variance is the average of local variance over the life of the option when there is no skew</h2>
<p>If the implied volatility <img src="https://latex.codecogs.com/png.latex?%5CSigma"> is independent of the strike, then the skew <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B%5Cpartial%20w%7D%7B%5Cpartial%20y%7D"> is zero.</p>
<p>So, the Dupire’s formula becomes:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign*%7D%0A%5Csigma_%7BLV%7D%5E2(w,T)%20&amp;=%20%5Cfrac%7B%5Cpartial%20w%7D%7B%5Cpartial%20T%7D%5C%5C%0A%5CSigma%5E2(T)%20T%20&amp;=%20%5Cint_%7BR%7D%20%5Csigma_%7BLV%7D%5E2%20(w,T)%20dT%5C%5C%0A%5CSigma%5E2(T)%20&amp;=%20%5Cfrac%7B1%7D%7BT%7D%5Cint_%7BR%7D%20%5Csigma_%7BLV%7D%5E2%20(w,T)%20dT%5C%5C%0A%5Cend%7Balign*%7D%0A"></p>
</section>
<section id="references" class="level2">
<h2 class="anchored" data-anchor-id="references">References</h2>
<ul>
<li><a href="https://engineering.nyu.edu/sites/default/files/2018-09/CarrFinResearchLetters2005.pdf">A note sufficient conditions for no arbitrage</a>, <em>Peter Carr and Dilip Madan</em></li>
<li><a href="https://www.amazon.co.uk/Volatility-Surface-Practitioners-Guide-Finance/dp/0471792519/ref=sr_1_1?crid=3VZ8L0LIO7J24&amp;dib=eyJ2IjoiMSJ9.mJ-yHScvO5YUgkVfwPorn8L9K4zyd5H6qIeL1SxlWPs.CMG7pEJaZU-9EsEoRoz9P2TmJo7AyVECPpkvNcTETbQ&amp;dib_tag=se&amp;keywords=jim+gatheral&amp;qid=1760024387&amp;sprefix=JIm+Gatheral%2Caps%2C92&amp;sr=8-1&amp;ufe=app_do%3Aamzn1.fos.95fd378e-6299-4723-b1f1-3952ffba15af">The volatility surface - A practitioner’s guide</a>, <em>Jim Gatheral</em></li>
</ul>


</section>
</section>

 ]]></description>
  <category>Volatility Modelling</category>
  <guid>http://quantdev.blog/posts/dupire-pde/index.html</guid>
  <pubDate>Tue, 30 Sep 2025 23:00:00 GMT</pubDate>
  <media:content url="http://quantdev.blog/posts/dupire-pde/image.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Challenging exercises in Template Metaprogramming</title>
  <dc:creator>Quasar </dc:creator>
  <link>http://quantdev.blog/posts/exercises-in-template-programming/index.html</link>
  <description><![CDATA[ 




<section id="challenging-exercises-in-template-metaprogramming" class="level1">
<h1>Challenging exercises in Template Metaprogramming</h1>
<section id="typelists-and-stdindex_sequence" class="level2">
<h2 class="anchored" data-anchor-id="typelists-and-stdindex_sequence">Typelists and <code>std::index_sequence</code></h2>
<p>For type metaprogramming, the central data structures are the <em>typelist</em> and <code>std::index_sequence</code>. A <code>TypeList</code> is just a static list of types. A <code>std::index_sequence</code> is an integer sequence known at compile-time. <code>TypeList</code>s and <code>std::index_sequence</code>s differ from run-time data structures, such as <code>std::list</code>, in that they don’t allow mutation. Adding an element to a <code>TypeList</code>, does not change the original <code>TypeList</code>: rather it creates a new typelist without modifying the original. If you are familar with functional programming languages like Haskell and F#, there’s a lot of parallel between working with typelists in C++ and lists in those languages.</p>
</section>
<section id="implementing-a-typelist" class="level2">
<h2 class="anchored" data-anchor-id="implementing-a-typelist">Implementing a <code>TypeList</code></h2>
<p>A <code>TypeList</code> is implemented as a class template. A particular instance of a typelist is a template specialization that encodes the contents of the typelist as template arguments.</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp number-lines code-with-copy"><code class="sourceCode cpp"><span id="cb1-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">template</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">typename</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...</span> Ts<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb1-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> TypeList<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb1-3">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">using</span> type <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> TypeList<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>Ts<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...&gt;;</span></span>
<span id="cb1-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">static</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">constexpr</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">auto</span> value <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> TypeList<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>Ts<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...&gt;{};</span></span>
<span id="cb1-5"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb1-6"></span>
<span id="cb1-7"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">using</span> SignedIntegralTypes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> TypeList<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">signed</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">char</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">short</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> </span>
<span id="cb1-8">                            <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">long</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">long</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">long</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;;</span></span></code></pre></div>
<p><code>make_index_sequence</code> metafunction is used to create an integer sequence.</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp number-lines code-with-copy"><code class="sourceCode cpp"><span id="cb2-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">constexpr</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>index_seq<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> </span>seq <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>make_index_sequence<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;{};</span></span></code></pre></div>
</section>
<section id="manipulating-typelist-and-index_sequence" class="level2">
<h2 class="anchored" data-anchor-id="manipulating-typelist-and-index_sequence">Manipulating <code>TypeList</code> and <code>index_sequence</code></h2>
<p>Manipulating the typelist and <code>index_sequence</code> typically requires breaking the typelist into parts, generally by separting the first element in the list (the head) from the remaining elements in the list (the tail).</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp number-lines code-with-copy"><code class="sourceCode cpp"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// front implementation</span></span>
<span id="cb3-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">template</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">typename</span> List<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb3-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> front<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-4"></span>
<span id="cb3-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">template</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">typename</span> Head<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">typename</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...</span> Tail<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb3-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> front<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>TypeList<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>Head<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span>Tail<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...&gt;&gt;{</span></span>
<span id="cb3-7">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">using</span> type <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Head<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-8">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">static</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">constexpr</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">auto</span> value <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Head<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{};</span></span>
<span id="cb3-9"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb3-10"></span>
<span id="cb3-11"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">template</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">typename</span> List<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb3-12"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> seq_front<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-13"></span>
<span id="cb3-14"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">template</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">size_t</span> First<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">size_t</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...</span> Rest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb3-15"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> seq_front<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>index_sequence<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>First<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span>Rest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...&gt;&gt;{</span></span>
<span id="cb3-16">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">static</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">constexpr</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">size_t</span> value <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> First<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-17"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb3-18"></span>
<span id="cb3-19"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> main<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(){</span></span>
<span id="cb3-20">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">static_assert</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>is_same_v<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>front<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>TypeList<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;::</span>type<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;);</span></span>
<span id="cb3-21">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">constexpr</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">auto</span> seq_front_result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> seq_front<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>index_sequence<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;::</span>value<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-22">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>cout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> &lt;&lt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>format<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">seq_front result = </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> seq_front_result<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb3-23"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p><a href="https://compiler-explorer.com/z/1W5rMr3nr">Compiler Explorer</a></p>
<p>The above implementation splits the typelist elements into the head and tail and then forms a new <code>TypeList</code> specialization from the elements in the tail.</p>
</section>
<section id="implementing-pop_front" class="level2">
<h2 class="anchored" data-anchor-id="implementing-pop_front">Implementing <code>pop_front</code></h2>
<p>The <code>pop_front</code> metafunction removes the first element from the typelist. Its implementation splits the typelist elements into the head and tail and then forms a new typelist from the elements in the tail.</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp number-lines code-with-copy"><code class="sourceCode cpp"><span id="cb4-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">template</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">typename</span> List<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb4-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> pop_front<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-3"></span>
<span id="cb4-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">template</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">typename</span> Head<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">typename</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...</span> Tail<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb4-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> pop_front<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>TypeList<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>Head<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span>Tail<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...&gt;&gt;{</span></span>
<span id="cb4-6">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">using</span> type <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> TypeList<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>Tail<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...&gt;;</span></span>
<span id="cb4-7">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">static</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">constexpr</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">auto</span> value <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> TypeList<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>Tail<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...&gt;{};</span></span>
<span id="cb4-8"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb4-9"></span>
<span id="cb4-10"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">template</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">typename</span> List<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb4-11"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> seq_pop_front<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-12"></span>
<span id="cb4-13"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">template</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">size_t</span> First<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">size_t</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...</span> Rest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb4-14"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> seq_pop_front<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>index_sequence<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>First<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span>Rest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...&gt;&gt;{</span></span>
<span id="cb4-15">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">using</span> type <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>index_sequence<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>Rest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...&gt;;</span></span>
<span id="cb4-16">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">static</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">constexpr</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">auto</span> value <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>index_sequence<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>Rest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...&gt;{};</span></span>
<span id="cb4-17"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span></code></pre></div>
<p><a href="https://compiler-explorer.com/z/565qdc3cY">Compiler Explorer</a></p>
</section>
<section id="implementing-push_front" class="level2">
<h2 class="anchored" data-anchor-id="implementing-push_front">Implementing <code>push_front</code></h2>
<p>We can also insert elements onto the front of the typelist by capturing all of the existing elements into a template parameter pack, then creating a new <code>TypeList</code> specialization containing all of those elements:</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp number-lines code-with-copy"><code class="sourceCode cpp"><span id="cb5-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">template</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">typename</span> Element<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">typename</span> List<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb5-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> push_front<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb5-3"></span>
<span id="cb5-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">template</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">typename</span> T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">typename</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...</span> Ts<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb5-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> push_front<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> TypeList<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>Ts<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...&gt;&gt;{</span></span>
<span id="cb5-6">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">using</span> type <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> TypeList<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span>Ts<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...&gt;;</span></span>
<span id="cb5-7">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">static</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">constexpr</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">auto</span> value <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> TypeList<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span>Ts<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...&gt;{};</span></span>
<span id="cb5-8"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb5-9"></span>
<span id="cb5-10"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">template</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">size_t</span> I<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">typename</span> IndexSequenceT<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb5-11"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> seq_push_front<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb5-12"></span>
<span id="cb5-13"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">template</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">size_t</span> I<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">size_t</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...</span> Is<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb5-14"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> seq_push_front<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>I<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>index_sequence<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>Is<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...&gt;&gt;{</span></span>
<span id="cb5-15">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">using</span> type <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>index_sequence<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>I<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span>Is<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...&gt;;</span></span>
<span id="cb5-16">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">static</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">constexpr</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">auto</span> value <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>index_sequence<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>I<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span>Is<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...&gt;{};</span></span>
<span id="cb5-17"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb5-18"></span>
<span id="cb5-19"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">template</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">size_t</span> I<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">typename</span> IndexSequence<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb5-20"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">using</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">seq_push_front_t</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> seq_push_front<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>I<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span>IndexSequence<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;::</span>type<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
</section>
<section id="implementing-push_back" class="level2">
<h2 class="anchored" data-anchor-id="implementing-push_back">Implementing <code>push_back</code></h2>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp number-lines code-with-copy"><code class="sourceCode cpp"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// push_back implementation</span></span>
<span id="cb6-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">template</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">typename</span> Element<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">typename</span> List<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb6-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> push_back<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb6-4"></span>
<span id="cb6-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">template</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">typename</span> Element<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb6-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> push_back<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>Element<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> TypeList<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&gt;&gt;{</span></span>
<span id="cb6-7">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">using</span> type <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> TypeList<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>Element<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;;</span></span>
<span id="cb6-8"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb6-9"></span>
<span id="cb6-10"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">template</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">typename</span> Element<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">typename</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...</span> Ts<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb6-11"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> push_back<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>Element<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> TypeList<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>Ts<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...&gt;&gt;{</span></span>
<span id="cb6-12">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">using</span> type <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> TypeList<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>Ts<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...,</span>Element<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;;</span></span>
<span id="cb6-13"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb6-14"></span>
<span id="cb6-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// push_back implementation for index_sequence</span></span>
<span id="cb6-16"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">template</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">size_t</span> I<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">typename</span> IndexSequence<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb6-17"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> seq_push_back<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb6-18"></span>
<span id="cb6-19"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">template</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">size_t</span> I<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">size_t</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...</span> Is<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb6-20"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> seq_push_back<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>I<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>index_sequence<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>Is<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...&gt;&gt;{</span></span>
<span id="cb6-21">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">using</span> type <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>index_sequence<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>Is<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...,</span>I<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;;</span></span>
<span id="cb6-22">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">static</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">constexpr</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">auto</span> value <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>index_sequence<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>Is<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...,</span>I<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;{};</span></span>
<span id="cb6-23"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb6-24"></span>
<span id="cb6-25"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">template</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">size_t</span> I<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">typename</span> IndexSequence<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb6-26"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">using</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">seq_push_back_t</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> seq_push_back<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>I<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span>IndexSequence<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;::</span>type<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
</section>
<section id="typelist-algorithms" class="level2">
<h2 class="anchored" data-anchor-id="typelist-algorithms">Typelist algorithms</h2>
<p>The fundamental typelist operations <code>front</code>, <code>push_front</code>, <code>back</code> and <code>push_back</code> can be composed to create more interesting typelist manipulations. For example, we can replace the first element in a typelist by applying <code>push_front</code> to the result of <code>pop_front</code>.</p>
<p>Going further, we can implement algorithms - searches, transformations, reversals as metafunctions operating on typelists.</p>
<section id="indexing" class="level3">
<h3 class="anchored" data-anchor-id="indexing">Indexing</h3>
<p>One of the most fundamental operations on a typelist is to extract a specific element of the list. Let us code up a metafunction to extract the <img src="https://latex.codecogs.com/png.latex?N">th element.</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp number-lines code-with-copy"><code class="sourceCode cpp"><span id="cb7-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">template</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">size_t</span> I<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">typename</span> List<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb7-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> nth_element<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb7-3"></span>
<span id="cb7-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">template</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">typename</span> First<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">typename</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...</span> Rest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb7-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> nth_element<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span>TypeList<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>First<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> Rest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...&gt;&gt;{</span></span>
<span id="cb7-6">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">using</span> type <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> First<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb7-7"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb7-8"></span>
<span id="cb7-9"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">template</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">size_t</span> N<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">typename</span> First<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">typename</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...</span> Rest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb7-10"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> nth_element<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>N<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> TypeList<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>First<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> Rest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...&gt;&gt;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> nth_element<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>N<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> TypeList<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>Rest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...&gt;&gt;{};</span></span>
<span id="cb7-11"></span>
<span id="cb7-12"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">template</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">size_t</span> N<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">typename</span> List<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">size_t</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...</span> Is<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb7-13"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> seq_nth_element<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb7-14"></span>
<span id="cb7-15"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">template</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">size_t</span> I<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">size_t</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...</span> Is<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb7-16"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> seq_nth_element<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>index_sequence<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>I<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span>Is<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...&gt;&gt;{</span></span>
<span id="cb7-17">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">static</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">constexpr</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">auto</span> value <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> I<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb7-18"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb7-19"></span>
<span id="cb7-20"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">template</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">size_t</span> N<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">size_t</span> I<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">size_t</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...</span> Is<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb7-21"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> seq_nth_element<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>N<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>index_sequence<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>I<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span>Is<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...&gt;&gt;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> seq_nth_element<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>N<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>index_sequence<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>Is<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...&gt;&gt;{};</span></span></code></pre></div>
<p><a href="https://compiler-explorer.com/z/oWanY6Y78">Compiler Explorer</a></p>
</section>
<section id="implementing-find_if" class="level3">
<h3 class="anchored" data-anchor-id="implementing-find_if">Implementing <code>find_if</code></h3>
<p>Many typelist algorithms search for data within the typelist. This too can be easily achieved with a recursive template metaprogram.</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp number-lines code-with-copy"><code class="sourceCode cpp"><span id="cb8-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;utility&gt;</span></span>
<span id="cb8-2"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;memory&gt;</span></span>
<span id="cb8-3"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;format&gt;</span></span>
<span id="cb8-4"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;iostream&gt;</span></span>
<span id="cb8-5"></span>
<span id="cb8-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">template</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">typename</span> List<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">template</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">size_t</span> I<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">typename</span> Predicate<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">size_t</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...</span> Is<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb8-7"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> seq_find_if<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb8-8"></span>
<span id="cb8-9"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">template</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">template</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">size_t</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">typename</span> Predicate<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb8-10"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> seq_find_if<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>index_sequence<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&gt;,</span>Predicate<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb8-11">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">using</span> type <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>false_type<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb8-12"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb8-13"></span>
<span id="cb8-14"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">template</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">size_t</span> First<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">template</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">size_t</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">typename</span> Predicate<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">size_t</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...</span> Is<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb8-15"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> seq_find_if<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>index_sequence<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>First<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> Is<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...&gt;,</span>Predicate<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb8-16">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">static</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">constexpr</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">bool</span> is_true <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Predicate<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>First<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;::</span>value<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb8-17">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">static</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">constexpr</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">bool</span> more_elements_to_check <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">sizeof</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...(</span>Is<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb8-18">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">using</span> type <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>conditional<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span></span>
<span id="cb8-19">        is_true<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> </span>
<span id="cb8-20">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>integral_constant<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">size_t</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span>First<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;,</span> </span>
<span id="cb8-21">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">typename</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>conditional<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>more_elements_to_check<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">typename</span> seq_find_if<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>index_sequence<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>Is<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...&gt;,</span>Predicate<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;::</span>type<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>false_type<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;::</span>type</span>
<span id="cb8-22">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;::</span>type<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb8-23"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb8-24"></span>
<span id="cb8-25"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">template</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">size_t</span> N<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb8-26"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> my_predicate<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb8-27">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">using</span> type <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>conditional<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;(</span>N <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">),</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>true_type<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>false_type<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;::</span>type<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb8-28">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">static</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">constexpr</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">bool</span> value <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>N <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb8-29"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb8-30"></span>
<span id="cb8-31"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> main<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(){</span></span>
<span id="cb8-32">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">static_assert</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>is_same_v<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span></span>
<span id="cb8-33">        seq_find_if<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>index_sequence<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;,</span>my_predicate<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;::</span>type<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb8-34">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>integral_constant<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">size_t</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb8-35">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;);</span></span>
<span id="cb8-36"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p><a href="https://compiler-explorer.com/z/rEvb6d9eG">Compiler Explorer</a></p>
</section>
<section id="reversing-a-typelist-and-index_sequence" class="level3">
<h3 class="anchored" data-anchor-id="reversing-a-typelist-and-index_sequence">Reversing a <code>TypeList</code> and <code>index_sequence</code></h3>
<p>When typelists have some ordering among their elements, it is convenient to be able to reverse the ordering of the elements in the typelist when applying some algorithms. The <code>reverse</code> algorithm implements this metafunction:</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp number-lines code-with-copy"><code class="sourceCode cpp"><span id="cb9-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">template</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">typename</span> List<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb9-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> reverse<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb9-3"></span>
<span id="cb9-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// basis case</span></span>
<span id="cb9-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">template</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">typename</span> Head<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb9-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> reverse<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>TypeList<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>Head<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;{</span></span>
<span id="cb9-7">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">using</span> type <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> TypeList<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>Head<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;;</span></span>
<span id="cb9-8"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb9-9"></span>
<span id="cb9-10"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">template</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">typename</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...</span> Ts<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb9-11"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> reverse<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>TypeList<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>Ts<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...&gt;&gt;{</span></span>
<span id="cb9-12">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">using</span> front_el <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> front<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>TypeList<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>Ts<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...&gt;&gt;::</span>type<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb9-13">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">using</span> tail <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pop_front<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>TypeList<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>Ts<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...&gt;&gt;::</span>type<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb9-14">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">using</span> type <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> push_back<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>front_el<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">typename</span> reverse<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>tail<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;::</span>type<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;::</span>type<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb9-15"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span></code></pre></div>
<p><a href="https://compiler-explorer.com/z/5j4nTqacz">Compiler Explorer</a></p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp number-lines code-with-copy"><code class="sourceCode cpp"><span id="cb10-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">template</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">typename</span> IndexSequence<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb10-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> seq_reverse<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb10-3"></span>
<span id="cb10-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">template</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">size_t</span> Head<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb10-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> seq_reverse<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>index_sequence<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>Head<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;{</span></span>
<span id="cb10-6">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">using</span> type <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>index_sequence<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>Head<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;;</span></span>
<span id="cb10-7">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">static</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">constexpr</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">auto</span> value <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>index_sequence<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>Head<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;{};</span></span>
<span id="cb10-8"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb10-9"></span>
<span id="cb10-10"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">template</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">size_t</span> Head<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">size_t</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...</span> Tail<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb10-11"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> seq_reverse<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>index_sequence<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>Head<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span>Tail<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...&gt;&gt;{</span></span>
<span id="cb10-12">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">using</span> type <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> seq_push_back<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>Head<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">typename</span> seq_reverse<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>index_sequence<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>Tail<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...&gt;&gt;::</span>type<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;::</span>type<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb10-13"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span></code></pre></div>
<p><a href="https://compiler-explorer.com/z/437zq688q">Compiler Explorer</a></p>
</section>
<section id="implementing-transform" class="level3">
<h3 class="anchored" data-anchor-id="implementing-transform">Implementing <code>transform</code></h3>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp number-lines code-with-copy"><code class="sourceCode cpp"><span id="cb11-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">template</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">template</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">size_t</span> I<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">typename</span> Func<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">typename</span> IndexSequence<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb11-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> seq_transform<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb11-3"></span>
<span id="cb11-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">template</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">template</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">size_t</span> I<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">typename</span> Func<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">size_t</span> First<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb11-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> seq_transform<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>Func<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>index_sequence<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>First<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;{</span></span>
<span id="cb11-6">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">using</span> type<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>index_sequence<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>Func<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>First<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;::</span>value<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;;</span></span>
<span id="cb11-7"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb11-8"></span>
<span id="cb11-9"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">template</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">template</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">size_t</span> I<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">typename</span> Func<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">size_t</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...</span> Is<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb11-10"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> seq_transform<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>Func<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>index_sequence<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>Is<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...&gt;&gt;{</span></span>
<span id="cb11-11">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">static</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">constexpr</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">size_t</span> front_el <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> seq_front<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>index_sequence<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>Is<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...&gt;&gt;::</span>value<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb11-12">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">using</span> tail <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> seq_pop_front<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>index_sequence<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>Is<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...&gt;&gt;::</span>type<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb11-13">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">using</span> type <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> seq_push_front<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>Func<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>front_el<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;::</span>value<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">typename</span> seq_transform<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>Func<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span>tail<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;::</span>type<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;::</span>type<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb11-14"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span></code></pre></div>
<p><a href="https://compiler-explorer.com/z/PrvW7beTE">Compiler Explorer</a></p>
</section>
<section id="remove-duplicates" class="level3">
<h3 class="anchored" data-anchor-id="remove-duplicates">Remove duplicates</h3>
<p>Assume that we a sorted integer sequence such as <img src="https://latex.codecogs.com/png.latex?1,%202,%202,%202,%204,%204,%205,%20%5Cldots">. We are interested to write a function <code>seq_uniq</code> that will remove duplicates from the sequence.</p>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp number-lines code-with-copy"><code class="sourceCode cpp"><span id="cb12-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">template</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">typename</span> List<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb12-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> seq_uniq<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb12-3"></span>
<span id="cb12-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">template</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">size_t</span> I<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb12-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> seq_uniq<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>index_sequence<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>I<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;{</span></span>
<span id="cb12-6">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">using</span> type <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>index_sequence<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>I<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;;</span></span>
<span id="cb12-7"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb12-8"></span>
<span id="cb12-9"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">template</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">size_t</span> I1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">size_t</span> I2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb12-10"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> seq_uniq<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>index_sequence<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>I1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> I2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;{</span></span>
<span id="cb12-11">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">using</span> type <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>conditional<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span></span>
<span id="cb12-12">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>I1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> I2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">),</span></span>
<span id="cb12-13">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>index_sequence<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>I1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;,</span></span>
<span id="cb12-14">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>index_sequence<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>I1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> I2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb12-15">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;::</span>type<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb12-16"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb12-17"></span>
<span id="cb12-18"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">template</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">size_t</span> First<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">size_t</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...</span> Rest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb12-19"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> seq_uniq<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>index_sequence<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>First<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span>Rest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...&gt;&gt;{</span></span>
<span id="cb12-20">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">static</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">constexpr</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">size_t</span> first <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> First<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb12-21">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">static</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">constexpr</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">size_t</span> next <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> seq_front<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>index_sequence<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>Rest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...&gt;&gt;::</span>value<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb12-22">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">using</span> tail <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>index_sequence<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>Rest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...&gt;;</span></span>
<span id="cb12-23">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">using</span> tail_next <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> seq_pop_front<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>index_sequence<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>Rest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...&gt;&gt;::</span>type<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb12-24">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">using</span> type <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>conditional<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span></span>
<span id="cb12-25">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>first <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> next<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">),</span></span>
<span id="cb12-26">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">typename</span> seq_uniq<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">typename</span> seq_push_front<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>First<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> tail_next<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;::</span>type<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;::</span>type<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb12-27">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">typename</span> seq_push_front<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>First<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">typename</span> seq_uniq<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>tail<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;::</span>type<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;::</span>type</span>
<span id="cb12-28">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;::</span>type<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb12-29"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span></code></pre></div>
<p><a href="https://compiler-explorer.com/z/fYdznc13P">Compiler Explorer</a></p>
</section>
<section id="implementing-merge-sort" class="level3">
<h3 class="anchored" data-anchor-id="implementing-merge-sort">Implementing Merge Sort</h3>
<p>We can write a cool metafunction to implement merge sort. I’d encourage you to try this as a challenge. Let’s see what you’ve got!</p>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp number-lines code-with-copy"><code class="sourceCode cpp"><span id="cb13-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">template</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">typename</span> V<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb13-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> MergeSort<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb13-3">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">using</span> type <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">typename</span> MergeVecs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span></span>
<span id="cb13-4">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">typename</span> MergeSort<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">typename</span> SplitVec<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>V<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;::</span>left<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;::</span>type<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb13-5">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">typename</span> MergeSort<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">typename</span> SplitVec<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>V<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;::</span>right<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;::</span>type</span>
<span id="cb13-6">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;::</span>type<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb13-7"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb13-8"></span>
<span id="cb13-9"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> main<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(){</span></span>
<span id="cb13-10">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">static_assert</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span></span>
<span id="cb13-11">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>is_same_v<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span></span>
<span id="cb13-12">            MergeSort<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>Vec<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;::</span>type<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb13-13">            Vec<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb13-14">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb13-15">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb13-16"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p>Here’s my implementation of merge-sort:</p>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp number-lines code-with-copy"><code class="sourceCode cpp"><span id="cb14-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">template</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">size_t</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...</span> Is<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb14-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">using</span> Vec <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>index_sequence<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>Is<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...&gt;;</span></span>
<span id="cb14-3"></span>
<span id="cb14-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">template</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">typename</span> List<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">typename</span> Indexer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb14-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> SelectVec<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb14-6"></span>
<span id="cb14-7"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">template</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">size_t</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...</span> Is<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">size_t</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...</span> Js<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb14-8"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> SelectVec<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>index_sequence<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>Is<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...&gt;,</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>index_sequence<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>Js<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...&gt;&gt;{</span></span>
<span id="cb14-9">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">using</span> type <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>index_sequence<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>seq_nth_element<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>Is<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">typename</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>index_sequence<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>Js<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...&gt;&gt;::</span>value<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...&gt;;</span></span>
<span id="cb14-10"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb14-11"></span>
<span id="cb14-12"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">template</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">size_t</span> Start<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">typename</span> List<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">typename</span> Indexer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb14-13"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> VecSliceHelper<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb14-14"></span>
<span id="cb14-15"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">template</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">size_t</span> Start<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">size_t</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...</span> Is<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">size_t</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...</span> Js<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb14-16"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> VecSliceHelper<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>Start<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>index_sequence<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>Is<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...&gt;,</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>index_sequence<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>Js<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...&gt;&gt;{</span></span>
<span id="cb14-17">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">using</span> type <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>index_sequence<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>seq_nth_element<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>Start <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> Js<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">typename</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>index_sequence<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>Is<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...&gt;&gt;::</span>value<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...&gt;;</span></span>
<span id="cb14-18"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb14-19"></span>
<span id="cb14-20"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">template</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">size_t</span> Start<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">size_t</span> End<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">typename</span> V<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb14-21"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> VecSlice<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb14-22"></span>
<span id="cb14-23"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">template</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">size_t</span> Start<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">size_t</span> End<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">size_t</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...</span> Is<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb14-24"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> VecSlice<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>Start<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> End<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> Vec<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>Is<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...&gt;&gt;{</span></span>
<span id="cb14-25">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">static</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">constexpr</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">size_t</span> num_elements <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> End <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> Start <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb14-26">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">using</span> s <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>make_index_sequence<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>num_elements<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;;</span></span>
<span id="cb14-27">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">using</span> type <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> VecSliceHelper<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>Start<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> Vec<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>Is<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...&gt;,</span> s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;::</span>type<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb14-28"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb14-29"></span>
<span id="cb14-30"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">template</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">typename</span> V<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb14-31"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> SplitVec<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb14-32"></span>
<span id="cb14-33"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">template</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">size_t</span> I1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">size_t</span> I2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb14-34"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> SplitVec<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>Vec<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>I1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> I2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;{</span></span>
<span id="cb14-35">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">using</span> left <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Vec<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>I1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;;</span></span>
<span id="cb14-36">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">using</span> right <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Vec<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>I2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;;</span></span>
<span id="cb14-37"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb14-38"></span>
<span id="cb14-39"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">template</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">size_t</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...</span> Is<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb14-40"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> SplitVec<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>Vec<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>Is<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...&gt;&gt;{</span></span>
<span id="cb14-41">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">static</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">constexpr</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">size_t</span> N <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">sizeof</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...(</span>Is<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb14-42">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">static</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">constexpr</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">size_t</span> mid <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> N <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb14-43">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">using</span> left <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> VecSlice<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span>mid<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span>Vec<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>Is<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...&gt;&gt;::</span>type<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb14-44">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">using</span> right <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> VecSlice<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>mid<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span>N<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span>Vec<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>Is<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...&gt;&gt;::</span>type<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb14-45"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb14-46"></span>
<span id="cb14-47"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">template</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">typename</span> Vec1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">typename</span> Vec2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">typename</span> Result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb14-48"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> MergeHelper<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb14-49"></span>
<span id="cb14-50"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Base cases</span></span>
<span id="cb14-51"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">template</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">size_t</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...</span> I<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb14-52"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> MergeHelper<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>Vec<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&gt;,</span> Vec<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&gt;,</span> Vec<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>I<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...&gt;&gt;{</span></span>
<span id="cb14-53">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">using</span> type <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Vec<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>I<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...&gt;;</span></span>
<span id="cb14-54"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb14-55"></span>
<span id="cb14-56"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// When no elements remain in right subarray</span></span>
<span id="cb14-57"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">template</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">size_t</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...</span> I1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">size_t</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...</span> I<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb14-58"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> MergeHelper<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>Vec<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>I1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...&gt;,</span> Vec<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&gt;,</span> Vec<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>I<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...&gt;&gt;{</span></span>
<span id="cb14-59">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">static</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">constexpr</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">size_t</span> element <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> seq_front<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>Vec<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>I1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...&gt;&gt;::</span>value<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb14-60">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">using</span> tail <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> seq_pop_front<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>Vec<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>I1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...&gt;&gt;::</span>type<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb14-61">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">using</span> result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> seq_push_back<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>element<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> Vec<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>I<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...&gt;&gt;::</span>type<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb14-62">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">using</span> type <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> MergeHelper<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>tail<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> Vec<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&gt;,</span> result<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;::</span>type<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb14-63"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb14-64"></span>
<span id="cb14-65"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// When no elements remain in left subarray</span></span>
<span id="cb14-66"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">template</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">size_t</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...</span> I2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">size_t</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...</span> I<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb14-67"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> MergeHelper<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>Vec<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&gt;,</span> Vec<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>I2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...&gt;,</span> Vec<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>I<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...&gt;&gt;{</span></span>
<span id="cb14-68">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">static</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">constexpr</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">size_t</span> element <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> seq_front<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>Vec<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>I2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...&gt;&gt;::</span>value<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb14-69">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">using</span> tail <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> seq_pop_front<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>Vec<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>I2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...&gt;&gt;::</span>type<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb14-70">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">using</span> result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> seq_push_back<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>element<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> Vec<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>I<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...&gt;&gt;::</span>type<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb14-71">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">using</span> type <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> MergeHelper<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>tail<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> Vec<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&gt;,</span> result<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;::</span>type<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb14-72"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb14-73"></span>
<span id="cb14-74"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// compare the head elements of both vectors, </span></span>
<span id="cb14-75"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// pop off the smaller of the two and insert it into the results array</span></span>
<span id="cb14-76"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">template</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">size_t</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...</span> I1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">size_t</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...</span> I2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">size_t</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...</span> I<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb14-77"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> MergeHelper<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>Vec<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>I1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...&gt;,</span> Vec<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>I2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...&gt;,</span> Vec<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>I<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...&gt;&gt;{</span></span>
<span id="cb14-78">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">using</span> left <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Vec<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>I1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...&gt;;</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">using</span> right <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Vec<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>I2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...&gt;;</span></span>
<span id="cb14-79">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">using</span> left_tail <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> seq_pop_front<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>left<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;::</span>type<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb14-80">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">using</span> right_tail <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> seq_pop_front<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>right<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;::</span>type<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb14-81">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">using</span> result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Vec<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>I<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...&gt;;</span></span>
<span id="cb14-82"></span>
<span id="cb14-83">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">static</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">constexpr</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">size_t</span> p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> seq_front<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>Vec<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>I1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...&gt;&gt;::</span>value<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb14-84">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">static</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">constexpr</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">size_t</span> q <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> seq_front<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>Vec<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>I2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...&gt;&gt;::</span>value<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb14-85">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">using</span> type <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>conditional<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span></span>
<span id="cb14-86">        p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> q<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb14-87">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">typename</span> MergeHelper<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>left_tail<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> right<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">typename</span> seq_push_back<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> result<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;::</span>type<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;::</span>type<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb14-88">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">typename</span> MergeHelper<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>left<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> right_tail<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">typename</span> seq_push_back<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>q<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> result<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;::</span>type<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;::</span>type</span>
<span id="cb14-89">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;::</span>type<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb14-90"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb14-91"></span>
<span id="cb14-92"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">template</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">typename</span> Vec1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">typename</span> Vec2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb14-93"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> Merge<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb14-94"></span>
<span id="cb14-95"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">template</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">size_t</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...</span> Is<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">size_t</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...</span> Js<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb14-96"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> Merge<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>Vec<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>Is<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...&gt;,</span>Vec<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>Js<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...&gt;&gt;</span></span>
<span id="cb14-97"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb14-98">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">using</span> type <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> MergeHelper<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>Vec<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>Is<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...&gt;,</span>Vec<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>Js<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...&gt;,</span>Vec<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&gt;&gt;::</span>type<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb14-99"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb14-100"></span>
<span id="cb14-101"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">template</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">typename</span> V<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb14-102"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> MergeSort<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb14-103"></span>
<span id="cb14-104"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">template</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&gt;</span></span>
<span id="cb14-105"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> MergeSort<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>Vec<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&gt;&gt;{</span></span>
<span id="cb14-106">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">using</span> type <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Vec<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&gt;;</span></span>
<span id="cb14-107"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb14-108"></span>
<span id="cb14-109"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">template</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">size_t</span> I<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb14-110"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> MergeSort<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>Vec<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>I<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;{</span></span>
<span id="cb14-111">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">using</span> type <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Vec<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>I<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;;</span></span>
<span id="cb14-112"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb14-113"></span>
<span id="cb14-114"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">template</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">size_t</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...</span> Is<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb14-115"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> MergeSort<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>Vec<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>Is<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...&gt;&gt;{</span></span>
<span id="cb14-116">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">using</span> type <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Merge<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span></span>
<span id="cb14-117">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">typename</span> MergeSort<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">typename</span> SplitVec<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>Vec<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>Is<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...&gt;&gt;::</span>left<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;::</span>type<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb14-118">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">typename</span> MergeSort<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">typename</span> SplitVec<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>Vec<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>Is<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...&gt;&gt;::</span>right<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;::</span>type</span>
<span id="cb14-119">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;::</span>type<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb14-120"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span></code></pre></div>
<p><a href="https://compiler-explorer.com/z/G1vnenYaP">Compiler Explorer</a></p>
</section>
<section id="implementing-zip" class="level3">
<h3 class="anchored" data-anchor-id="implementing-zip">Implementing <code>zip</code></h3>
<p>Let’s say you have a bunch of compile-time vectors. We’d want to write a metafunction that takes multiple vectors and zips them with <code>*</code>. For example, given the input:</p>
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp number-lines code-with-copy"><code class="sourceCode cpp"><span id="cb15-1">Vector<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;,</span> Vector<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;,</span> Vector<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span></code></pre></div>
<p>produce:</p>
<div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp number-lines code-with-copy"><code class="sourceCode cpp"><span id="cb16-1">Vector<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">162</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span></code></pre></div>
<p>That is:</p>
<div class="sourceCode" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp number-lines code-with-copy"><code class="sourceCode cpp"><span id="cb17-1">Vector<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span></code></pre></div>
<p>You can try writing your implementation using the below as a starting point:</p>
<div class="sourceCode" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp number-lines code-with-copy"><code class="sourceCode cpp"><span id="cb18-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;type_traits&gt;</span></span>
<span id="cb18-2"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;iostream&gt;</span></span>
<span id="cb18-3"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;utility&gt;</span></span>
<span id="cb18-4"></span>
<span id="cb18-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// DEFINITION: Compile-time integer vector defined as: </span></span>
<span id="cb18-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">template</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...</span> I<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb18-7"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> Vector<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb18-8"></span>
<span id="cb18-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// The code below will assume a 'zip' metafunction is used, but feel free to use a different approach. </span></span>
<span id="cb18-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// If you do, please adjust the static assert accordingly. </span></span>
<span id="cb18-11"></span>
<span id="cb18-12"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> main<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(){</span></span>
<span id="cb18-13">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">static_assert</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>is_same<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span></span>
<span id="cb18-14">            zip<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>Vector<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;,</span> Vector<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;,</span> Vector<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;::</span>type<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb18-15">            Vector<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;::</span>value<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb18-16"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p>Put on your thinking cap and happy coding! When you’re done with your attempt, you can take a look below at my solution:</p>
<div class="sourceCode" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp number-lines code-with-copy"><code class="sourceCode cpp"><span id="cb19-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;type_traits&gt;</span></span>
<span id="cb19-2"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;iostream&gt;</span></span>
<span id="cb19-3"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;utility&gt;</span></span>
<span id="cb19-4"></span>
<span id="cb19-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// DEFINITION: Compile-time integer vector defined as: </span></span>
<span id="cb19-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">template</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...</span> I<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb19-7"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> Vector<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb19-8"></span>
<span id="cb19-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// The code below will assume a 'zip' metafunction is used, but feel free to use a different approach. </span></span>
<span id="cb19-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// If you do, please adjust the static assert accordingly. </span></span>
<span id="cb19-11"></span>
<span id="cb19-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// A getter for the nth-element of the compile-time sequence </span></span>
<span id="cb19-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// of integers</span></span>
<span id="cb19-14"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">template</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">size_t</span> N<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">typename</span> List<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb19-15"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> get<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb19-16"></span>
<span id="cb19-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Base case</span></span>
<span id="cb19-18"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">template</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> Head<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...</span> Tail<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb19-19"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> get<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> Vector<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>Head<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span>Tail<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...&gt;&gt;{</span></span>
<span id="cb19-20">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">static</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">constexpr</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">auto</span> value <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Head<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span>  </span>
<span id="cb19-21"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb19-22"></span>
<span id="cb19-23"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// get&lt;N,Vector&lt;I1,I2,...&gt;&gt; inherits from get&lt;N-1,Vector&lt;I2,...&gt;&gt;</span></span>
<span id="cb19-24"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">template</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">size_t</span> N<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> Head<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...</span> Tail<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb19-25"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> get<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>N<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> Vector<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>Head<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span>Tail<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...&gt;&gt;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> get<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>N<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span>Vector<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>Tail<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...&gt;&gt;{};</span></span>
<span id="cb19-26"></span>
<span id="cb19-27"></span>
<span id="cb19-28"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">template</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...</span> I<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb19-29"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> front<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb19-30">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">static</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">constexpr</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">auto</span> value <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> Vector<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>I<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...&gt;&gt;::</span>value<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb19-31"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb19-32"></span>
<span id="cb19-33"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">template</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">typename</span> List<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb19-34"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> pop_front<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb19-35"></span>
<span id="cb19-36"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">template</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> I<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...</span> Is<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb19-37"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> pop_front<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>Vector<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>I<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span>Is<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...&gt;&gt;{</span></span>
<span id="cb19-38">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">using</span> type <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Vector<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>Is<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...&gt;;</span></span>
<span id="cb19-39"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb19-40"></span>
<span id="cb19-41"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Let's design a metafunction zip that accepts a variadic pack</span></span>
<span id="cb19-42"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// of Vector's.</span></span>
<span id="cb19-43"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Template declaration</span></span>
<span id="cb19-44"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">template</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">typename</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...</span> Vectors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb19-45"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> zip<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb19-46"></span>
<span id="cb19-47"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Partial specialization</span></span>
<span id="cb19-48"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">template</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...</span> Is<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb19-49"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> zip<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>Vector<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>Is<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...&gt;&gt;{</span></span>
<span id="cb19-50">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">using</span> type <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Vector<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>Is<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...&gt;;</span></span>
<span id="cb19-51"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb19-52"></span>
<span id="cb19-53"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">template</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">typename</span> Indexes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">typename</span> V<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">typename</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...</span> List<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb19-54"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> zip_impl<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb19-55"></span>
<span id="cb19-56"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">template</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">size_t</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...</span> Is<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...</span> Elements<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb19-57"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> zip_impl<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>index_sequence<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>Is<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...&gt;,</span> Vector<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>Elements<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...&gt;&gt;{</span></span>
<span id="cb19-58">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">using</span> type <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Vector<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>Elements<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...&gt;;</span></span>
<span id="cb19-59"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb19-60"></span>
<span id="cb19-61"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">template</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">size_t</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...</span> Is<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...</span> Elements<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">typename</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...</span> Vectors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb19-62"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> zip_impl<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>index_sequence<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>Is<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...&gt;,</span>Vector<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>Elements<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...&gt;,</span> Vectors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...&gt;{</span></span>
<span id="cb19-63">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">using</span> first <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Vector<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>Elements<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...&gt;;</span></span>
<span id="cb19-64">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">using</span> rest <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">typename</span> zip_impl<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>index_sequence<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>Is<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...&gt;,</span> Vectors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...&gt;::</span>type<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb19-65">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">using</span> type <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Vector<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;(</span>get<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>Is<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> first<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;::</span>value <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> get<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>Is<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> rest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;::</span>value<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)...&gt;;</span></span>
<span id="cb19-66"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb19-67"></span>
<span id="cb19-68"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">template</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...</span> Is<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">typename</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...</span> Vectors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb19-69"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> zip<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>Vector<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>Is<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...&gt;,</span> Vectors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...&gt;{</span></span>
<span id="cb19-70">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">static</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">constexpr</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">size_t</span> N <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">sizeof</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...(</span>Is<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb19-71">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">using</span> seq <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>make_index_sequence<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>N<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;;</span></span>
<span id="cb19-72">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">using</span> type <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> zip_impl<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>seq<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span>Vector<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>Is<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...&gt;,</span>Vectors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...&gt;::</span>type<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb19-73"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb19-74"></span>
<span id="cb19-75"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// </span><span class="al" style="color: #AD0000;
background-color: null;
font-style: inherit;">TEST</span></span>
<span id="cb19-76"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> main<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb19-77"></span>
<span id="cb19-78">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Test case #1</span></span>
<span id="cb19-79">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">static_assert</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>get<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span>Vector<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;::</span>value <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb19-80">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">static_assert</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>is_same<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span></span>
<span id="cb19-81">        zip<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>Vector<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;,</span> Vector<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;,</span> Vector<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;::</span>type<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb19-82">        Vector<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;::</span>value<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb19-83">    </span>
<span id="cb19-84">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// </span><span class="al" style="color: #AD0000;
background-color: null;
font-style: inherit;">TASK</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">: Add more test cases here</span></span>
<span id="cb19-85">    </span>
<span id="cb19-86">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// </span><span class="al" style="color: #AD0000;
background-color: null;
font-style: inherit;">TASK</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">: Ensure it compiles before submission</span></span>
<span id="cb19-87">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb19-88"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p><a href="https://compiler-explorer.com/z/7bqq6vY1o">Compiler Explorer</a></p>
</section>
</section>
<section id="basic-stdtuple-design" class="level2">
<h2 class="anchored" data-anchor-id="basic-stdtuple-design">Basic <code>std::tuple</code> design</h2>
<p>A tuple is an arbitrary collection of heterogenous data. It is a recursive data-structure. A <code>tuple</code> has a static component and a run-time component. The list of types are baked into the tuple definition at compile-time. The actual values/objects held by the tuple can be objects known at run-time.</p>
<p>We will design a <code>tuple</code> class template. Implementing your own version <code>tuple</code> type is a good exercise to flex your metaprogramming muscles.</p>
<div class="sourceCode" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp number-lines code-with-copy"><code class="sourceCode cpp"><span id="cb20-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;utility&gt;</span></span>
<span id="cb20-2"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;memory&gt;</span></span>
<span id="cb20-3"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;format&gt;</span></span>
<span id="cb20-4"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;iostream&gt;</span></span>
<span id="cb20-5"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;cassert&gt;</span></span>
<span id="cb20-6"></span>
<span id="cb20-7"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">namespace</span> dev </span>
<span id="cb20-8"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb20-9">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// TypeList definition</span></span>
<span id="cb20-10">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">template</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">typename</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...</span> Ts<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb20-11">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> TypeList<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb20-12">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">using</span> type <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> TypeList<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>Ts<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...&gt;;</span></span>
<span id="cb20-13">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">static</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">constexpr</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">auto</span> value <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> TypeList<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>Ts<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...&gt;{};</span></span>
<span id="cb20-14">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb20-15"></span>
<span id="cb20-16">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// TypeList Indexing </span></span>
<span id="cb20-17">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">template</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">size_t</span> I<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">typename</span> List<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb20-18">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> nth_element<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb20-19"></span>
<span id="cb20-20">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">template</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">typename</span> First<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">typename</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...</span> Rest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb20-21">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> nth_element<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span>TypeList<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>First<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> Rest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...&gt;&gt;{</span></span>
<span id="cb20-22">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">using</span> type <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> First<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb20-23">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb20-24"></span>
<span id="cb20-25">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">template</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">size_t</span> N<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">typename</span> First<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">typename</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...</span> Rest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb20-26">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> nth_element<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>N<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> TypeList<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>First<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> Rest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...&gt;&gt;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> nth_element<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>N<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> TypeList<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>Rest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...&gt;&gt;{};</span></span>
<span id="cb20-27"></span>
<span id="cb20-28">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Implement tuple. This is a forward declaration.</span></span>
<span id="cb20-29">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">template</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">typename</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...</span> Types<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb20-30">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> tuple<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb20-31"></span>
<span id="cb20-32">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Base case</span></span>
<span id="cb20-33">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">template</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&gt;</span></span>
<span id="cb20-34">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> tuple<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&gt;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb20-35"></span>
<span id="cb20-36">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">template</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">typename</span> Head<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">typename</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...</span> Tail<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb20-37">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">requires</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>is_trivially_default_constructible_v<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>Head<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb20-38">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> tuple<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>Head<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> Tail<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...&gt;{</span></span>
<span id="cb20-39">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">using</span> type <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> TypeList<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>Head<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> Tail<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...&gt;;</span></span>
<span id="cb20-40"></span>
<span id="cb20-41">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb20-42">        Head <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_head</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb20-43">        tuple<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>Tail<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...&gt;</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_tail</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb20-44"></span>
<span id="cb20-45">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb20-46">        tuple<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span></span>
<span id="cb20-47">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_head</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span></span>
<span id="cb20-48">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_tail</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span></span>
<span id="cb20-49">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span></span>
<span id="cb20-50"></span>
<span id="cb20-51">        tuple<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>Head head<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> Tail<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...</span> tail<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb20-52">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_head</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>head<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb20-53">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_tail</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>tail<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...}</span></span>
<span id="cb20-54">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span></span>
<span id="cb20-55"></span>
<span id="cb20-56">        Head head<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb20-57">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_head</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb20-58">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb20-59"></span>
<span id="cb20-60">        tuple<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>Tail<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...&gt;</span> tail<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb20-61">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_tail</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb20-62">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb20-63"></span>
<span id="cb20-64">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">constexpr</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">auto</span> empty<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(){</span></span>
<span id="cb20-65">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>tuple<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&gt;();</span></span>
<span id="cb20-66">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb20-67"></span>
<span id="cb20-68">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">constexpr</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">auto</span> initialize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>Head head<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> Tail<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...</span> tail<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">){</span></span>
<span id="cb20-69">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_head</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> head<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb20-70">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">constexpr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">sizeof</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...(</span>Tail<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">))</span></span>
<span id="cb20-71">                <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_tail</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>initialize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>tail<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...);</span></span>
<span id="cb20-72">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb20-73">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb20-74"></span>
<span id="cb20-75">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Implement get</span></span>
<span id="cb20-76">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">template</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">unsigned</span> N<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">typename</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...</span> Types<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb20-77">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">auto</span> get<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> tuple<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>Types<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...&gt;&amp;</span> tuple<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb20-78">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">constexpr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>N <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb20-79">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> tuple<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>head<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb20-80">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span></span>
<span id="cb20-81">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> get<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>N<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;(</span>tuple<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>tail<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">());</span></span>
<span id="cb20-82">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb20-83"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb20-84"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> main<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(){</span></span>
<span id="cb20-85">    dev<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>tuple<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> tup<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb20-86">    <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">assert</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>get<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;(</span>tup<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb20-87"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p><a href="https://compiler-explorer.com/z/ETdd181Mh">Compiler Explorer</a></p>
</section>
<section id="tuple-algorithms" class="level2">
<h2 class="anchored" data-anchor-id="tuple-algorithms">Tuple Algorithms</h2>
<section id="implementing-transform-for-a-stdtuplet1t2...tn" class="level3">
<h3 class="anchored" data-anchor-id="implementing-transform-for-a-stdtuplet1t2...tn">Implementing <code>transform</code> for a <code>std::tuple{t1,t2,...,tn}</code></h3>
<div class="sourceCode" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp number-lines code-with-copy"><code class="sourceCode cpp"><span id="cb21-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">template</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">typename</span> TupleT<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">typename</span> Func<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">size_t</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...</span> Is<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb21-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">constexpr</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">auto</span> transform_impl<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>TupleT tup<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> Func func<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>index_sequence<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>Is<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...&gt;</span> indexes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">){</span></span>
<span id="cb21-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>make_tuple<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>func<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>get<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>Is<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;(</span>tup<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">))...);</span></span>
<span id="cb21-4"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb21-5"></span>
<span id="cb21-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// transform</span></span>
<span id="cb21-7"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">template</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">typename</span> TupleT<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">typename</span> Fn<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb21-8"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">constexpr</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">auto</span> transform<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>Fn func<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> TupleT tup<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb21-9"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb21-10">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">constexpr</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">auto</span> index_seq <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>make_index_sequence<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>tuple_size_v<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>TupleT<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;{};</span></span>
<span id="cb21-11">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> transform_impl<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>tup<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> func<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> index_seq<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb21-12"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="implementing-select_tuple-for-a-stdtuplet1...tn" class="level3">
<h3 class="anchored" data-anchor-id="implementing-select_tuple-for-a-stdtuplet1...tn">Implementing <code>select_tuple</code> for a <code>std::tuple{t1,...,tn}</code></h3>
<div class="sourceCode" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp number-lines code-with-copy"><code class="sourceCode cpp"><span id="cb22-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// select_tuple</span></span>
<span id="cb22-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">template</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">typename</span> TupleT<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">size_t</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...</span> Is<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb22-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">constexpr</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">auto</span> select_tuple<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>TupleT tuple<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>index_sequence<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>Is<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...&gt;</span> idx_sequence<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb22-4"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb22-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>make_tuple<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">((</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>get<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>Is<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;(</span>tuple<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">))...);</span></span>
<span id="cb22-6"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="reversing-a-tuple" class="level3">
<h3 class="anchored" data-anchor-id="reversing-a-tuple">Reversing a tuple</h3>
<div class="sourceCode" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp number-lines code-with-copy"><code class="sourceCode cpp"><span id="cb23-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">template</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">typename</span> TupleT<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">size_t</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...</span> Is<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb23-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">constexpr</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">auto</span> reverse_tuple_impl<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>TupleT tuple<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>index_sequence<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>Is<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...&gt;</span> idx_seq<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">){</span></span>
<span id="cb23-3">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">constexpr</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">auto</span> rev_idx_seq <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> seq_reverse<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>index_sequence<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>Is<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...&gt;&gt;::</span>value<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb23-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> select_tuple<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>tuple<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> rev_idx_seq<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb23-5"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb23-6"></span>
<span id="cb23-7"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">template</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">typename</span> TupleT<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb23-8"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">constexpr</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">auto</span> reverse_tuple<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>TupleT tuple<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">){</span></span>
<span id="cb23-9">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">constexpr</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>index_sequence<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> </span>idx_sequence <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>make_index_sequence<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>tuple_size_v<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>TupleT<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;{};</span></span>
<span id="cb23-10">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> reverse_tuple_impl<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>tuple<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> idx_sequence<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb23-11"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="implementing-tuple-concatenation" class="level3">
<h3 class="anchored" data-anchor-id="implementing-tuple-concatenation">Implementing tuple concatenation</h3>
<div class="sourceCode" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp number-lines code-with-copy"><code class="sourceCode cpp"><span id="cb24-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">template</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">typename</span> TupleT1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">typename</span> TupleT2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">size_t</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...</span> I1s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">size_t</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...</span> I2s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb24-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">constexpr</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">auto</span> cat_tuple_impl<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>TupleT1 tuple1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> TupleT2 tuple2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>index_sequence<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>I1s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...&gt;</span> seq1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>index_sequence<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>I2s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...&gt;</span> seq2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">){</span></span>
<span id="cb24-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>make_tuple<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>get<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>I1s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;(</span>tuple1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)...,</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>get<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>I2s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;(</span>tuple2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)...);</span></span>
<span id="cb24-4"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb24-5"></span>
<span id="cb24-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">template</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">typename</span> TupleT1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">typename</span> TupleT2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb24-7"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">constexpr</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">auto</span> cat_tuple<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>TupleT1 t1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> TupleT2 t2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb24-8"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb24-9">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">constexpr</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>index_sequence<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> </span>seq1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>make_index_sequence<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>tuple_size_v<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>TupleT1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;{};</span></span>
<span id="cb24-10">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">constexpr</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>index_sequence<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> </span>seq2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>make_index_sequence<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>tuple_size_v<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>TupleT2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;{};</span></span>
<span id="cb24-11">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> cat_tuple_impl<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>t1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> t2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> seq1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> seq2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb24-12"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="implementing-zip-for-a-pair-of-tuples" class="level3">
<h3 class="anchored" data-anchor-id="implementing-zip-for-a-pair-of-tuples">Implementing <code>zip</code> for a pair of tuples</h3>
<div class="sourceCode" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp number-lines code-with-copy"><code class="sourceCode cpp"><span id="cb25-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">template</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">typename</span> TupleT1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">typename</span> TupleT2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">size_t</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...</span> I1s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">size_t</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...</span> I2s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb25-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">constexpr</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">auto</span> zip_tuple_impl<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>TupleT1 tuple1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> TupleT2 tuple2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>index_sequence<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>I1s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...&gt;</span> seq1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>index_sequence<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>I2s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...&gt;</span> seq2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">){</span></span>
<span id="cb25-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>make_tuple<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>make_tuple<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>get<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>I1s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;(</span>tuple1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">),</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>get<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>I2s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;(</span>tuple2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">))...);</span></span>
<span id="cb25-4"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb25-5"></span>
<span id="cb25-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">template</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">typename</span> TupleT1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">typename</span> TupleT2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb25-7"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">constexpr</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">auto</span> zip_tuple<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>TupleT1 t1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> TupleT2 t2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">){</span></span>
<span id="cb25-8">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">constexpr</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>index_sequence<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> </span>seq1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>make_index_sequence<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>tuple_size_v<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>TupleT1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;{};</span></span>
<span id="cb25-9">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">constexpr</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>index_sequence<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> </span>seq2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>make_index_sequence<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>tuple_size_v<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>TupleT2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;{};</span></span>
<span id="cb25-10">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> zip_tuple_impl<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>t1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> t2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> seq1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> seq2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb25-11"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="implementing-filter-for-a-tuple" class="level3">
<h3 class="anchored" data-anchor-id="implementing-filter-for-a-tuple">Implementing <code>filter</code> for a tuple</h3>


</section>
</section>
</section>

 ]]></description>
  <category>C++</category>
  <guid>http://quantdev.blog/posts/exercises-in-template-programming/index.html</guid>
  <pubDate>Fri, 22 Aug 2025 23:00:00 GMT</pubDate>
  <media:content url="http://quantdev.blog/posts/exercises-in-template-programming/cpp.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>C++ Type erasure</title>
  <dc:creator>Quasar </dc:creator>
  <link>http://quantdev.blog/posts/type-erasure/index.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>Once you instantiate a <code>std::function</code> object, how is it, that <em>you are able to stick objects of different actual types e.g.&nbsp;an anonymous lambda, a free-standing function or a function-pointer (with only a common function signature)</em> to it? This is achieved through <strong>type erasure</strong>.</p>
<p>Type erasure is a programming technique by which the explicit type information is removed from the program. It is a type of <em>abstraction</em> that ensures that the program does not explicitly depend on some of the data-types. You might wonder, how is it, that a program is written in a strongly typed language but does not use the actual types?</p>
</section>
<section id="how-does-type-erasure-look-like" class="level1">
<h1>How does type erasure look like?</h1>
<p>Let’s see what a program with explicit types looks like. Consider a smart pointer such as <a href="https://en.cppreference.com/w/cpp/memory/unique_ptr.html"><code>std::unique_ptr&lt;T,Deleter&gt;</code></a> in the standard library that models exclusive ownership of the managed resource.</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp number-lines code-with-copy"><code class="sourceCode cpp"><span id="cb1-1"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> main<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(){</span></span>
<span id="cb1-2">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>unique_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">new</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}};</span></span>
<span id="cb1-3"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p>Here is a unique pointer. It creates and deletes an <code>int</code>. The deletion is not explicitly visible, in fact nothing here tells you how the deletion will take place. But, it’s done by calling a callable object <code>std::default_delete</code>, which is the default deleter and under the hood, it calls the default <code>delete ptr</code>.</p>
<p>Suppose, however, we are interested to allocate/deallocate memory from our own heap/memory pool. In such case, we’d have to override the global <code>new</code> operator and pass the <code>Heap*</code> pointer. That’s what will be used for allocations.</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp number-lines code-with-copy"><code class="sourceCode cpp"><span id="cb2-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> Heap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb2-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/* ... */</span></span>
<span id="cb2-3">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> allocate<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">size_t</span> size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb2-4">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> deallocate<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> ptr_to_block<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb2-5"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb2-6"></span>
<span id="cb2-7"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">operator</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">new</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">size_t</span> n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> Heap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> heap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">){</span></span>
<span id="cb2-8">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> heap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span>allocate<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb2-9"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p>Notice that, you don’t have <code>operator delete()</code> with arguments. You can write one, it will compile, but you can’t invoke it. In order to actually release memory on the heap, you have to do something else. You have to write your own custom deleter.</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp number-lines code-with-copy"><code class="sourceCode cpp"><span id="cb3-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> MyDeleter<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb3-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/* ... */</span></span>
<span id="cb3-3">    Heap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">heap_</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-4">    </span>
<span id="cb3-5">    MyDeleter<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>Heap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> heap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">heap_</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>heap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb3-6">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span></span>
<span id="cb3-7"></span>
<span id="cb3-8">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">template</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">typename</span> T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb3-9">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">operator</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()(</span>T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">){</span></span>
<span id="cb3-10">        ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;~</span>T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span>                  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// invoke d'tor</span></span>
<span id="cb3-11">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">heap_</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span>deallocate<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span>     <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// release memory</span></span>
<span id="cb3-12">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb3-13"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p>The function call <code>operator()</code> is overloaded and it accepts a pointer-to-<code>T</code>. It invokes the destructor <code>~T()</code> and releases the memory occupied on the heap. The destructor has to be explicitly invoked, because you can’t call <code>operator delete</code> with arguments. Now, how do you hook this up to the <code>unique_ptr</code>? You pass it as a constructor argument. But, we also need to refer to a different type <code>unique_ptr&lt;int,MyDeleter&gt;</code>.</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp number-lines code-with-copy"><code class="sourceCode cpp"><span id="cb4-1"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> main<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(){</span></span>
<span id="cb4-2">    Heap myHeap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-3"></span>
<span id="cb4-4">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>unique_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span>MyDeleter<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">new</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(&amp;</span>heap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">),</span> MyDeleter<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(&amp;</span>heap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)};</span></span>
<span id="cb4-5"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p>This creates and deletes an <code>int</code> on the heap.</p>
<p>Notice that, <code>unique_ptr</code>s to the same type, but with different deleters are different types too. So, for example, you can’t assign from one to the other. You can actually deduce the <code>Deleter</code> type. If you have a <code>unique_ptr</code> object, you can actually interrogate it’s <code>deleter_type</code>. The <code>deleter_type</code> is embedded in the <code>unique_ptr</code> type.</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp number-lines code-with-copy"><code class="sourceCode cpp"><span id="cb5-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;iostream&gt;</span></span>
<span id="cb5-2"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;memory&gt;</span></span>
<span id="cb5-3"></span>
<span id="cb5-4"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> main<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(){</span></span>
<span id="cb5-5">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>unique_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">new</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)};</span></span>
<span id="cb5-6">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">static_assert</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>is_same_v<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">decltype</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)::</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">deleter_type</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>default_delete<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;);</span></span>
<span id="cb5-7">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb5-8"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p><a href="https://compiler-explorer.com/z/GaPsecqGh">Compiler Explorer</a></p>
<p>Now, let’s look at the <a href="https://en.cppreference.com/w/cpp/memory/shared_ptr.html"><code>shared_ptr&lt;T&gt;</code></a> and contrast it with <code>unique_ptr</code>. If you don’t specify any deleters, they look exactly the same:</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp number-lines code-with-copy"><code class="sourceCode cpp"><span id="cb6-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>unique_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> u_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">new</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb6-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>shared_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">s_ptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">new</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span></code></pre></div>
<p>If you do specify a deleter, there’s a big difference. The constructor looks exactly the same.</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp number-lines code-with-copy"><code class="sourceCode cpp"><span id="cb7-1"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> main<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(){</span></span>
<span id="cb7-2">    Heap myHeap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb7-3">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>unique_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span>MyDeleter<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span>  u_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">new</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(&amp;</span>heap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">),</span> MyDeleter<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(&amp;</span>heap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb7-4">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>shared_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span>            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">s_ptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">new</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(&amp;</span>heap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">),</span> MyDeleter<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(&amp;</span>heap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb7-5"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p>But, in the <code>unique_ptr</code> the type of the deleter is the second template argument, whereas with the <code>shared_ptr</code> there is no mention of the deleter with the type. So, if you have an object of type <code>shared_ptr</code>, you cannot deduce which deleter was used to construct it. All <code>shared_ptr</code> instances with the same pointer type <code>T*</code>, are of the same type, even if they have different deleters.</p>
<p>So, the deleter type has been erased. That’s what it means to erase a type. Observe that the constructor call site is the last mention of the deleter type. From this point forward, you won’t see this type again.</p>
<p>Since, shared pointers with different deleters have the same type, you can assign one to the other.</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp number-lines code-with-copy"><code class="sourceCode cpp"><span id="cb8-1"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> main<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(){</span></span>
<span id="cb8-2">    Heap myHeap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb8-3">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>shared_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span>    p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">new</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb8-4">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>shared_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span>    q<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">new</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(&amp;</span>myHeap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">),</span> MyDeleter<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(&amp;</span>myHeap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb8-5">    q <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span>      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Ok, they are the same type</span></span>
<span id="cb8-6"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Proper deleters are called</span></span></code></pre></div>
<p>Also, when each shared pointer goes out of scope, the correct deleter is invoked. So, erased types are not explicitly visible in the program; they are hidden somewhere.</p>
</section>
<section id="type-erasure-as-a-design-pattern" class="level1">
<h1>Type erasure as a design pattern</h1>
<p>The ultimate type-erased object in C++ is <code>std::function</code>. Another one is <code>std::any</code>.</p>
<p><code>std::function&lt;F&gt;</code> is a type that is instantiated from the signature of a callable.</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp number-lines code-with-copy"><code class="sourceCode cpp"><span id="cb9-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;iostream&gt;</span></span>
<span id="cb9-2"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;functional&gt;</span></span>
<span id="cb9-3"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;vector&gt;</span></span>
<span id="cb9-4"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;numeric&gt;</span></span>
<span id="cb9-5"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;algorithm&gt;</span></span>
<span id="cb9-6"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;cmath&gt;</span></span>
<span id="cb9-7"></span>
<span id="cb9-8"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">double</span> gravitational_potential<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>vector<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">double</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">){</span></span>
<span id="cb9-9">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">double</span> r_squared <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>accumulate<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>begin<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(),</span>x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>end<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(),</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,[](</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">double</span> accum<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">double</span> element<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">){</span></span>
<span id="cb9-10">        accum <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> element <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> element<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb9-11">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> accum<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb9-12">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">});</span></span>
<span id="cb9-13">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">double</span> r <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sqrt<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>r_squared<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb9-14"></span>
<span id="cb9-15">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">double</span> G <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">6.6743e-11</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb9-16">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">double</span> M <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">5.972e+24</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb9-17">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">double</span> potential <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>G<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>M<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>r<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb9-18">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> potential<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb9-19"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb9-20"></span>
<span id="cb9-21"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> main<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(){</span></span>
<span id="cb9-22">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>function<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">double</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>vector<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">double</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;)&gt;</span> scalarValuedFunc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb9-23"></span>
<span id="cb9-24">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// the paraboloid z = x_0^2 + x_1^2 + ... + x_{n-1}^2 </span></span>
<span id="cb9-25">    scalarValuedFunc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[](</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>vector<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">double</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">){</span></span>
<span id="cb9-26">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>accumulate<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>begin<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(),</span>x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>end<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(),</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,[](</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">double</span> accum<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">double</span> element<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">){</span></span>
<span id="cb9-27">            accum <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> element <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> element<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb9-28">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> accum<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb9-29">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">});</span></span>
<span id="cb9-30">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb9-31"></span>
<span id="cb9-32">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Gravitational potential U at the point (x_0,...,x_{n-1}) in space</span></span>
<span id="cb9-33">    scalarValuedFunc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> gravitational_potential<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb9-34">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb9-35"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p><a href="https://compiler-explorer.com/z/b8K3Go5nh">Compiler Explorer</a></p>
<p>The lambda and the free-standing function have different types. <code>scalarValuedFunc</code> has only one type, but can store any of these callable objects. Our <code>std::function</code> has only one type, and somehow, we can stick all these different types into it.</p>
<p>If you look at it from the design point of view, what it does is, it abstracts away all the behavior of the type you erase, except the set of behaviors you consider relevant. It’s a very flexible abstraction. In my case, I say, what’s relevant is, I can invoke this type with a <code>vector</code> of reals and I get back a real. That’s the only behavior of this type, that to me, at this moment is relevant. All other behavior is abstracted away.</p>
<p>Fundamentally, type erasure is an abstraction technique that allows you to separate interface from implementation, and when we talk about the interface, it’s actually a subset of the interface. It’s a subset of the interface, that we deem relevant for our particular problem.</p>
<p>Inheritance does the same thing. But, inheritance is significantly less flexible. Firstly, with inheritance, the interface you inherit - that has to be the whole interface, you can’t pick and choose. You can separate it from the implementation, but you don’t get to pick and choose like half of the interface. Second, it is much more intrusive. You can’t take an arbitrary class with the same interface and say, I want to use it through inheritance. No, you have to derive it from the base class.</p>
</section>
<section id="how-does-type-erasure-work" class="level1">
<h1>How does type erasure work?</h1>
<p>Consider the following C code.</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode numberSource c number-lines code-with-copy"><code class="sourceCode c"><span id="cb10-1"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> qsort<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> base<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">size_t</span> nmemb<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">size_t</span> size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb10-2"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(*</span>compare<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">const</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">const</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*)</span>        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// no mention of specific types</span></span>
<span id="cb10-3"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb10-4"></span>
<span id="cb10-5"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> less<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">const</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">const</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">){</span></span>
<span id="cb10-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">const</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*)</span>a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">const</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*)</span>b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span>     <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// type information recovered</span></span>
<span id="cb10-7"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb10-8"></span>
<span id="cb10-9"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb10-10">qsort<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">),</span> less<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span>                  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// type of less erased here</span></span></code></pre></div>
<p><code>qsort()</code> comes from the standard C library. It takes <code>void*</code> pointer-to-array, <code>size_t</code> array count, <code>size_t</code> size of types you are trying to sort, and a comparator. The comparison function takes <code>void*</code>. It is used to compare whatever types you are actually sorting. Inside <code>qsort</code>, there is no mention of the type that you are going to sort.</p>
<p>The function call site is the last time in your execution flow, where you have the mention of the type <code>int</code>. From that moment on, there is no mention of <code>int</code> during the sorting process.</p>
<p>When you write the comparison function, the signature <code>int (*)(void*, void*)</code> is fixed. But, you know what you are writing this for. You are writing a comparator for <code>int</code>s. So, inside the function, I am going to recover the type information. So, the entire type erasure mechanism is seen here. The type is known at the invocation point and its the last time it is known. This is type erasure in C. The general code does not depend on which type we are sorting. All interfaces are completely generic and do not contain any type information.</p>
<p>I still need to perform a type dependent action at some point.</p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode numberSource c number-lines code-with-copy"><code class="sourceCode c"><span id="cb11-1"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> less<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">const</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">const</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">){</span></span>
<span id="cb11-2">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">const</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*)</span>a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">const</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*)</span>b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span>     <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// type information recovered</span></span>
<span id="cb11-3"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p>So, I have to generate some code that has a type-less or type agnostic interface, but the code itself is aware of the types. This act of recovering the types from typeless information is called reification (recovery). The comparator <code>int less(void*, void*)</code> performs the reification and executes type dependent code. Type reification in C is manual. From an understanding point of view, the only thing C++ adds to this, is that C++ automatically generates type reification functions.</p>
<p>The general code does not depend on the erased type. The call site is the last place where the actual type is known. Type is reified when type dependent action is performed. The type is hidden in the code of the function that performs this action. The function is invoked through a type-agnostic interface. The type dependent code converts from the abstract to the concrete type. In C++, we can have the compiler generate the type dependent code.</p>
</section>
<section id="type-erasure---the-basic-mechanics" class="level1">
<h1>Type erasure - the basic mechanics</h1>
<p>The classic type erasure pattern can be realized by first coding up a <em>type-agnostic interface</em> (a <code>Concept</code> class). Then we use an <code>Impl</code> class that wraps up the concrete type &amp; provides the <em>type-dependent implementation</em>. Finally, we use dynamic polymorphism via virtual functions, but the caller only sees the interface. Finally, we use dynamic polymorphism via virtual functions, but the caller only sees the interface.</p>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp number-lines code-with-copy"><code class="sourceCode cpp"><span id="cb12-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Type erasure 101</span></span>
<span id="cb12-2"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;iostream&gt;</span></span>
<span id="cb12-3"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;memory&gt;</span></span>
<span id="cb12-4"></span>
<span id="cb12-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">namespace</span> dev<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb12-6">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> function<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb12-7">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb12-8"></span>
<span id="cb12-9">        function<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span></span>
<span id="cb12-10">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">nullptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb12-11">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span></span>
<span id="cb12-12"></span>
<span id="cb12-13">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">template</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">typename</span> Callable<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb12-14">        function<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>Callable callable<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb12-15">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>make_unique<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>Impl<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>Callable<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;(</span>callable<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)}</span></span>
<span id="cb12-16">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span></span>
<span id="cb12-17"></span>
<span id="cb12-18">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">operator</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()(){</span></span>
<span id="cb12-19">            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(*</span>ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)();</span></span>
<span id="cb12-20">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb12-21">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Type-agnostic interface</span></span>
<span id="cb12-22">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> Concept<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb12-23">            <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">virtual</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">operator</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb12-24">            <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">virtual</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>Concept<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(){}</span></span>
<span id="cb12-25">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb12-26"></span>
<span id="cb12-27">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Type-dependent implementation</span></span>
<span id="cb12-28">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">template</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">typename</span> Callable<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb12-29">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> Impl <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> Concept<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb12-30"></span>
<span id="cb12-31">            Impl<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>Callable callable<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb12-32">            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_callable</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>callable<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb12-33">            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span></span>
<span id="cb12-34"></span>
<span id="cb12-35">            <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">operator</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()()</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">override</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb12-36">                <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_callable</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb12-37">            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb12-38">            Callable <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_callable</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb12-39">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb12-40"></span>
<span id="cb12-41">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>unique_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>Concept<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb12-42">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb12-43"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb12-44"></span>
<span id="cb12-45"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> foo<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(){</span></span>
<span id="cb12-46">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>cout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> &lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"foo()"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb12-47"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb12-48"></span>
<span id="cb12-49"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> bar<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(){</span></span>
<span id="cb12-50">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>cout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> &lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bar()"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb12-51"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb12-52"></span>
<span id="cb12-53"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> main<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(){</span></span>
<span id="cb12-54">    dev<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>function f<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb12-55">    f <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[](){</span></span>
<span id="cb12-56">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>cout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> &lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Anonymous lambda"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb12-57">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb12-58">    f<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb12-59"></span>
<span id="cb12-60">    f <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> foo<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb12-61">    f<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb12-62"></span>
<span id="cb12-63">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(*</span>func_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)();</span></span>
<span id="cb12-64">    func_ptr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> bar<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb12-65">    f <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> func_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb12-66">    f<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb12-67">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb12-68"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p><a href="https://godbolt.org/z/EfdTKc4hz">Compiler Explorer</a></p>
</section>
<section id="type-erasure---adding-support-for-a-custom-deleter-to-the-shared_ptr" class="level1">
<h1>Type erasure - Adding support for a custom deleter to the <code>shared_ptr</code></h1>
<p>Suppose we’d like to add support for a custom deleter to the <code>shared_ptr</code>.</p>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp number-lines code-with-copy"><code class="sourceCode cpp"><span id="cb13-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;iostream&gt;</span></span>
<span id="cb13-2"></span>
<span id="cb13-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">template</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">typename</span> T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb13-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> shared_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb13-5"></span>
<span id="cb13-6">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb13-7">    T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_underlying_ptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb13-8">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>atomic<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">unsigned</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">long</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;*</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_ref_count</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb13-9">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// something about the deleter</span></span>
<span id="cb13-10"></span>
<span id="cb13-11">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb13-12">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Templated constructor</span></span>
<span id="cb13-13">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">template</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">typename</span> Deleter<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb13-14">    shared_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> Deleter deleter<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb13-15">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_underlying_ptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb13-16">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// ???  </span></span>
<span id="cb13-17">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span></span>
<span id="cb13-18"></span>
<span id="cb13-19">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Destructor</span></span>
<span id="cb13-20">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>shared_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(){</span></span>
<span id="cb13-21">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Decrement the ref-count. If m_ref_count == 0, </span></span>
<span id="cb13-22">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// delete m_underlying_ptr using deleter </span></span>
<span id="cb13-23">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb13-24"></span>
<span id="cb13-25">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Pointer like functions</span></span>
<span id="cb13-26">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">operator</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;()</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb13-27">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_underlying_ptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb13-28">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb13-29"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span></code></pre></div>
<p><a href="https://compiler-explorer.com/z/8oq3Kf361">Compiler Explorer</a></p>
<p>We add a templated constructor <code>shared_ptr(T*, Deleter )</code> that accepts a raw pointer and a custom deleter as the second argument to the design of our <code>shared_ptr</code>.</p>
<p>Let’s now write a <code>Concept</code> and <code>Impl</code> class that support destruction using an instance of the custom <code>Deleter</code> type.</p>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp number-lines code-with-copy"><code class="sourceCode cpp"><span id="cb14-1">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> destroy_wrapper <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// RAII class</span></span>
<span id="cb14-2">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb14-3">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/* ... */</span></span>
<span id="cb14-4"></span>
<span id="cb14-5">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Concept class</span></span>
<span id="cb14-6">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> destroyer_base</span>
<span id="cb14-7">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb14-8">            <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">virtual</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">operator</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb14-9">            <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">virtual</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>destroyer_base<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">default</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb14-10">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb14-11"></span>
<span id="cb14-12">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Impl class</span></span>
<span id="cb14-13">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">template</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">typename</span> Deleter<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb14-14">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> destroyer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> destroyer_base</span>
<span id="cb14-15">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb14-16">            <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">explicit</span> destroyer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>Deleter deleter<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb14-17">              <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> destroyer_base<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span></span>
<span id="cb14-18">              <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_deleter</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span> deleter <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb14-19">            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb14-20">            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb14-21"></span>
<span id="cb14-22">            <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">operator</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()(</span>T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">override</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_deleter</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb14-23"></span>
<span id="cb14-24">            Deleter <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_deleter</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb14-25">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb14-26"></span>
<span id="cb14-27">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>destroy_wrapper<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span></span>
<span id="cb14-28">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>unique_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>destroyer_base<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_destroyer_ptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb14-29">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span></code></pre></div>
<p>The <code>destroyer_base</code> is the <em>Concept</em> class and the <code>destroyer</code> is its type-dependent <em>implementation</em>.</p>
<p>The wrapper class <code>destroyer_wrapper</code> wraps objects of different types (<code>destoyer&lt;Deleter&gt;</code>) into a common wrapper and treats them as though they are the same unified interface.</p>
<p>THe updated design of the <code>shared_ptr&lt;T&gt;</code> class would look something like this:</p>
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp number-lines code-with-copy"><code class="sourceCode cpp"><span id="cb15-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">template</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">typename</span> T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb15-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> shared_ptr</span>
<span id="cb15-3"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb15-4">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb15-5">    T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_underlying_ptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb15-6">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>atomic<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">unsigned</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">long</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;*</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_ref_count_ptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb15-7">    destroyer_wrapper<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_destroyer_ptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb15-8"></span>
<span id="cb15-9">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb15-10">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Templated constructor</span></span>
<span id="cb15-11">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">template</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">typename</span> Deleter<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb15-12">    shared_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> Deleter<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;</span> deleter<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb15-13">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_underlying_ptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span> ptr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb15-14">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_ref_count_ptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">nullptr</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb15-15">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_destroyer_ptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">nullptr</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb15-16">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb15-17">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">try</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb15-18">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_destroyer_ptr</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">new</span> destroy_wrapper<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>forward<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>Deleter<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;(</span>deleter<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">));</span></span>
<span id="cb15-19">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_ref_count_ptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span>store<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">u</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb15-20">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">catch</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>exception<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> ex<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb15-21">            <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">delete</span> ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb15-22">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">throw</span> ex<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb15-23">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb15-24">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb15-25"></span>
<span id="cb15-26">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/* ... */</span></span>
<span id="cb15-27"></span>
<span id="cb15-28">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> destroy_wrapper <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// RAII class</span></span>
<span id="cb15-29">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb15-30">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">template</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">typename</span> Deleter<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb15-31">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">explicit</span> destroy_wrapper<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>Deleter<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;</span> deleter<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb15-32">          <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_destroyer_ptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>make_unique<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>destroyer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;(</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>forward<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>Deleter<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;(</span>deleter<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">))</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb15-33">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb15-34">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb15-35">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// destroy_wrapper is a wrapper over a unique_ptr&lt;destroyer_base&gt;.</span></span>
<span id="cb15-36">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// It is intended to be move-constructible ONLY.</span></span>
<span id="cb15-37">        destroy_wrapper<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>destroy_wrapper<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;</span> other<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">noexcept</span></span>
<span id="cb15-38">          <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_destroyer_ptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>exchange<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>other<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_destroyer_ptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">nullptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb15-39">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb15-40">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb15-41"></span>
<span id="cb15-42">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">operator</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()(</span>pointer ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb15-43">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb15-44">            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(*</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_destroyer_ptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)(</span>ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Virtual polymorphism</span></span>
<span id="cb15-45">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb15-46"></span>
<span id="cb15-47">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> destroyer_base</span>
<span id="cb15-48">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb15-49">            <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">virtual</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">operator</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()(</span>pointer ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb15-50">            <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">virtual</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>destroyer_base<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">default</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb15-51">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb15-52"></span>
<span id="cb15-53">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">template</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">typename</span> Deleter<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb15-54">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> destroyer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> destroyer_base</span>
<span id="cb15-55">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb15-56">            <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">explicit</span> destroyer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>Deleter deleter<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb15-57">              <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> destroyer_base<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span></span>
<span id="cb15-58">              <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_deleter</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span> deleter <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb15-59">            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb15-60">            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb15-61"></span>
<span id="cb15-62">            <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">operator</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()(</span>pointer ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">override</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_deleter</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb15-63"></span>
<span id="cb15-64">            Deleter <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_deleter</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb15-65">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb15-66"></span>
<span id="cb15-67">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>destroy_wrapper<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span></span>
<span id="cb15-68">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>unique_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>destroyer_base<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_destroyer_ptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb15-69">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb15-70"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span></code></pre></div>


</section>

 ]]></description>
  <category>C++</category>
  <guid>http://quantdev.blog/posts/type-erasure/index.html</guid>
  <pubDate>Sat, 28 Jun 2025 23:00:00 GMT</pubDate>
  <media:content url="http://quantdev.blog/posts/type-erasure/cpp.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>deducing this</title>
  <dc:creator>Quasar </dc:creator>
  <link>http://quantdev.blog/posts/deducing-this/index.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>Member functions can be overloaded by <code>cv</code>-qualifiers and reference qualifiers <code>&amp;</code> (ref) and <code>&amp;&amp;</code> (ref-ref).</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp number-lines code-with-copy"><code class="sourceCode cpp"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/* </span></span>
<span id="cb1-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">Member functions can be overloaded by cv-qualifiers and </span></span>
<span id="cb1-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">reference qualifiers.</span></span>
<span id="cb1-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*/</span></span>
<span id="cb1-5"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;iostream&gt;</span></span>
<span id="cb1-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Implicit</span></span>
<span id="cb1-7"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> X<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb1-8">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> f<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;{</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>cout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> &lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"X::f() &amp;"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb1-9">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> f<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;{</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>cout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> &lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"X::f() const&amp;"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb1-10">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> f<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>cout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> &lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"X::f() &amp;&amp;"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb1-11">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> f<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>cout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> &lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"X::f() const&amp;&amp;"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb1-12"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb1-13"></span>
<span id="cb1-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//Explicit</span></span>
<span id="cb1-15"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> Y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb1-16">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> f<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">this</span> Y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;){</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>cout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> &lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Y::f() &amp;"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb1-17">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> f<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">this</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> Y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;){</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>cout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> &lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Y::f() const&amp;"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb1-18">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> f<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">this</span> Y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;){</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>cout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> &lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Y::f() &amp;&amp;"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb1-19">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> f<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">this</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> Y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;){</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>cout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> &lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Y::f() const &amp;&amp;"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb1-20"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb1-21"></span>
<span id="cb1-22"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> main<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(){</span></span>
<span id="cb1-23">    X x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> Y y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-24">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> X c_x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> Y c_y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-25"></span>
<span id="cb1-26">    x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>f<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb1-27">    c_x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>f<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb1-28">    X<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">().</span>f<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb1-29">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">const_cast</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> X<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;&gt;(</span>X<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()).</span>f<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb1-30"></span>
<span id="cb1-31">    y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>f<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb1-32">    c_y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>f<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb1-33">    Y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">().</span>f<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb1-34">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">const_cast</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> Y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;&gt;(</span>Y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()).</span>f<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb1-35">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-36"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p><a href="https://godbolt.org/z/ofYxKd95s">Compiler Explorer</a></p>
</section>
<section id="deducing-this-feature" class="level1">
<h1>deducing <code>this</code> feature</h1>
<p>If <code>const</code> and non-<code>const</code> overloads of a method and (ref)<code>&amp;</code> and (ref-ref)<code>&amp;&amp;</code> overloads share the same implementation, then we can de-duplicate these overloads and allow the compiler to automatically deduce the object type, on which the member function was invoked using this feature.</p>
<p>The real value of <code>deducing</code> this comes from using the type <code>Self</code> in some way in the body e.g.&nbsp;using <code>std::forward_like&lt;T,U&gt;</code> to propagate an owning-object’s value category to its member data.</p>
<p>Consider the following example. We are writing a homegrown version of <code>vector&lt;T&gt;</code> container and want to implement the <code>begin()</code> method.</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp number-lines code-with-copy"><code class="sourceCode cpp"><span id="cb2-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;iostream&gt;</span></span>
<span id="cb2-2"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;memory&gt;</span></span>
<span id="cb2-3"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;type_traits&gt;</span></span>
<span id="cb2-4"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;concepts&gt;</span></span>
<span id="cb2-5"></span>
<span id="cb2-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">template</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">typename</span> T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb2-7"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> vector<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb2-8">    T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_data</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-9">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>size_t<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> </span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_size</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-10">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>size_t<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> </span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_capacity</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-11"></span>
<span id="cb2-12">    vector<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span></span>
<span id="cb2-13">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_data</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">new</span> T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]}</span></span>
<span id="cb2-14">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_size</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb2-15">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_capacity</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb2-16">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span></span>
<span id="cb2-17"></span>
<span id="cb2-18">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">template</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">typename</span> U<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb2-19">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> Iterator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb2-20">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">using</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">difference_type</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>ptrdiff_t<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-21">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">using</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">value_type</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> U<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-22"></span>
<span id="cb2-23">        Iterator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">default</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-24"></span>
<span id="cb2-25">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">explicit</span> Iterator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>U<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb2-26">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_ptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb2-27">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span></span>
<span id="cb2-28"></span>
<span id="cb2-29">        U<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_ptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-30">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb2-31"></span>
<span id="cb2-32">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">using</span> iterator <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Iterator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;;</span></span>
<span id="cb2-33">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">using</span> const_iterator <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Iterator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;;</span></span>
<span id="cb2-34"></span>
<span id="cb2-35">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">auto</span> begin<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">this</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">auto</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;</span> self<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">){</span></span>
<span id="cb2-36">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> Iterator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>self<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_data</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb2-37">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//              ^----------</span></span>
<span id="cb2-38">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//               T* const, if self is const</span></span>
<span id="cb2-39">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//               T*, otherwise</span></span>
<span id="cb2-40">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb2-41"></span>
<span id="cb2-42">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">auto</span> end<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">this</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">auto</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;</span> self<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">){</span></span>
<span id="cb2-43">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> Iterator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>self<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_data</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> self<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_size</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb2-44">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb2-45"></span>
<span id="cb2-46">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>vector<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(){</span></span>
<span id="cb2-47">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">delete</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[]</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_data</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-48">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb2-49"></span>
<span id="cb2-50"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb2-51"></span>
<span id="cb2-52"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> main<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(){</span></span>
<span id="cb2-53"></span>
<span id="cb2-54">    vector<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">double</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> v<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-55">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> vector<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">double</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> cv<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-56"></span>
<span id="cb2-57">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">static_assert</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span></span>
<span id="cb2-58">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>is_same_v<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span></span>
<span id="cb2-59">            <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">decltype</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>v<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>begin<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()),</span></span>
<span id="cb2-60">            vector<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">double</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;::</span>Iterator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">double</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb2-61">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb2-62">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb2-63"></span>
<span id="cb2-64">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">static_assert</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span></span>
<span id="cb2-65">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>is_same_v<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span></span>
<span id="cb2-66">            <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">decltype</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>cv<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>begin<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()),</span></span>
<span id="cb2-67">            vector<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">double</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;::</span>Iterator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">double</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb2-68">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb2-69">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb2-70">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-71"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p><a href="https://godbolt.org/z/o16zrj6GT">Compiler Explorer</a></p>
<p>Instead of writing traditional <code>const</code> and non-<code>const</code> variants of <code>begin()</code>, we are using the deducing <code>this</code> feature to de-duplicate overloads.</p>
<p>While at the outset, this code might look fine, be warned that <code>std::is_same_v&lt;decltype(cv.begin()),vector&lt;double&gt;::Iterator&lt;const double&gt;&gt;</code> returns <code>false_type</code>. <code>T* m_data</code> of a <code>const</code> object becomes <code>T* const m_data</code>, that is <code>const</code> ends up on the top-level of that type. <code>const</code> qualifiers on the top-level <code>Iterator</code> class are then discarded when template argument deduction is performed on the implicit function-template powering the constructor call <code>Iterator(self.m_data)</code>. The client may write hostile code and modify the contents of the <code>const vector</code> through the iterator object. What we want is a pointer-to-<code>const T</code> instead of a <code>const</code>-pointer-to-<code>T</code>.</p>
<p>We can branch on the <code>const</code>-ness of <code>self</code> and return the correct iterator type.</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp number-lines code-with-copy"><code class="sourceCode cpp"><span id="cb3-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;iostream&gt;</span></span>
<span id="cb3-2"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;memory&gt;</span></span>
<span id="cb3-3"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;type_traits&gt;</span></span>
<span id="cb3-4"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;concepts&gt;</span></span>
<span id="cb3-5"></span>
<span id="cb3-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">template</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">typename</span> T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb3-7"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> vector<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb3-8">    T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_data</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-9">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>size_t<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> </span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_size</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-10">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>size_t<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> </span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_capacity</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-11"></span>
<span id="cb3-12">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">template</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">typename</span> U<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb3-13">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> Iterator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb3-14">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">using</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">difference_type</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>ptrdiff_t<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-15">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">using</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">value_type</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> U<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-16">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">using</span> reference <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> U<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;;</span></span>
<span id="cb3-17">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">using</span> const_reference <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> U<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;;</span></span>
<span id="cb3-18">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">using</span> pointer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> U<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*;</span></span>
<span id="cb3-19"></span>
<span id="cb3-20">        U<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_ptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-21"></span>
<span id="cb3-22">        Iterator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">default</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-23"></span>
<span id="cb3-24">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">explicit</span> Iterator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>U<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb3-25">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_ptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb3-26">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span></span>
<span id="cb3-27">        </span>
<span id="cb3-28">        Iterator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">operator</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++(){</span></span>
<span id="cb3-29">            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_ptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-30">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">this</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-31">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb3-32"></span>
<span id="cb3-33">        Iterator <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">operator</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">){</span></span>
<span id="cb3-34">            <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">auto</span> temp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{*</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">this</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb3-35">            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_ptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-36">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> temp<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-37">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb3-38"></span>
<span id="cb3-39">        Iterator <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">operator</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">){</span></span>
<span id="cb3-40">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> Iterator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_ptr</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb3-41">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb3-42"></span>
<span id="cb3-43">        U<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">operator</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*(){</span></span>
<span id="cb3-44">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_ptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-45">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb3-46"></span>
<span id="cb3-47">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">auto</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">operator</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=&gt;(</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> Iterator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> other<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb3-48">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_ptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=&gt;</span>other<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_ptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-49">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb3-50"></span>
<span id="cb3-51">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">bool</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">operator</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==(</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> Iterator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> other<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb3-52">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_ptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span>other<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_ptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-53">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb3-54">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb3-55"></span>
<span id="cb3-56">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">using</span> iterator <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Iterator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;;</span></span>
<span id="cb3-57">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">using</span> const_iterator <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Iterator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;;</span></span>
<span id="cb3-58"></span>
<span id="cb3-59">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">auto</span> begin<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">this</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">auto</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;</span> self<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">){</span></span>
<span id="cb3-60">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">constexpr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>is_const_v<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>remove_reference_t<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">decltype</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>self<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)&gt;&gt;)</span></span>
<span id="cb3-61">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> const_iterator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>self<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_data</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb3-62">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span></span>
<span id="cb3-63">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> iterator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>self<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_data</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb3-64">            </span>
<span id="cb3-65">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb3-66"></span>
<span id="cb3-67">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">auto</span> end<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">this</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">auto</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;</span> self<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">){</span></span>
<span id="cb3-68">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">constexpr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>is_const_v<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>remove_reference_t<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">decltype</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>self<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)&gt;&gt;)</span></span>
<span id="cb3-69">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> const_iterator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>self<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_data</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> self<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_size</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb3-70">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span></span>
<span id="cb3-71">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> iterator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>self<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_data</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb3-72">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb3-73"></span>
<span id="cb3-74">    vector<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>size_t<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> </span>n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb3-75">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_data</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">static_cast</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*&gt;(::</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">operator</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">new</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">sizeof</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">))</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb3-76">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_size</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb3-77">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_capacity</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb3-78">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb3-79">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">auto</span> p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>begin<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()};</span></span>
<span id="cb3-80">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">try</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb3-81">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(;</span>p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>begin<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()+</span>n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);++</span>p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb3-82">                <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">new</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">static_cast</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*&gt;(</span>p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_ptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">))</span> T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb3-83">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb3-84">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">catch</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(...){</span></span>
<span id="cb3-85">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">auto</span> q<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>begin<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()};</span> q<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span>p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++</span>q<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb3-86">                q<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_ptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;~</span>T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb3-87">            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">operator</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">delete</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_data</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb3-88">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">throw</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-89">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb3-90"></span>
<span id="cb3-91">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_size</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-92">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb3-93"></span>
<span id="cb3-94">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>vector<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(){</span></span>
<span id="cb3-95">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>destroy<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>begin<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(),</span> end<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">());</span></span>
<span id="cb3-96">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">operator</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">delete</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_data</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb3-97">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb3-98"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb3-99"></span>
<span id="cb3-100"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">template</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">typename</span> IterType<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb3-101"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> foo<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>IterType iter<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">){</span></span>
<span id="cb3-102">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>cout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> &lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"foo(IterType iter)"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">", *iter = "</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>iter<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-103"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb3-104"></span>
<span id="cb3-105"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> main<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(){</span></span>
<span id="cb3-106">    vector v<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb3-107">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> vector cv<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb3-108">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">static_assert</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span></span>
<span id="cb3-109">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>is_same_v<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span></span>
<span id="cb3-110">            <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">decltype</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>v<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>begin<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()),</span></span>
<span id="cb3-111">            vector<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">double</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;::</span>Iterator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">double</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb3-112">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb3-113">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb3-114"></span>
<span id="cb3-115">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">static_assert</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span></span>
<span id="cb3-116">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>is_same_v<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span></span>
<span id="cb3-117">            <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">decltype</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>cv<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>begin<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()),</span></span>
<span id="cb3-118">            vector<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">double</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;::</span>Iterator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">double</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb3-119">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb3-120">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb3-121"></span>
<span id="cb3-122">    foo<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>vector<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">).</span>begin<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">());</span></span>
<span id="cb3-123">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-124"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p><a href="https://godbolt.org/z/nhfhW6z14">Compiler Explorer</a></p>
</section>
<section id="a-small-digression---auto-deduction-rules" class="level1">
<h1>A small digression - <code>auto</code> deduction rules</h1>
<p>In the below code snippet, can you tell why the static assertion passes?</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp number-lines code-with-copy"><code class="sourceCode cpp"><span id="cb4-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;iostream&gt;</span></span>
<span id="cb4-2"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;concepts&gt;</span></span>
<span id="cb4-3"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;type_traits&gt;</span></span>
<span id="cb4-4"></span>
<span id="cb4-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">template</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">typename</span> T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb4-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> Wrapper<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb4-7">    T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_data</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-8"></span>
<span id="cb4-9">    Wrapper<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> val<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb4-10">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_data</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">new</span> T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>val<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)}</span></span>
<span id="cb4-11">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span></span>
<span id="cb4-12"></span>
<span id="cb4-13">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">auto</span> get<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">this</span> Wrapper<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> self<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">){</span></span>
<span id="cb4-14">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> self<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_data</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-15">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb4-16"></span>
<span id="cb4-17">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">auto</span> get<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">this</span> Wrapper <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> self<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">){</span></span>
<span id="cb4-18">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> self<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_data</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-19">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb4-20"></span>
<span id="cb4-21">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">auto</span> get<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">this</span> Wrapper<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;</span> self<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">){</span></span>
<span id="cb4-22">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> self<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_data</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-23">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb4-24"></span>
<span id="cb4-25">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">auto</span> get<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">this</span> Wrapper <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;</span> self<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">){</span></span>
<span id="cb4-26">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> self<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_data</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-27">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb4-28"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb4-29"></span>
<span id="cb4-30"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> main<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(){</span></span>
<span id="cb4-31">    Wrapper<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> wrapper<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb4-32">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> Wrapper<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> const_wrapper<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb4-33"></span>
<span id="cb4-34">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">static_assert</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>is_same_v<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span></span>
<span id="cb4-35">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">decltype</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>const_wrapper<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>get<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()),</span></span>
<span id="cb4-36">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span></span>
<span id="cb4-37">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;);</span></span>
<span id="cb4-38"></span>
<span id="cb4-39">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// const_wrapper.m_data = new int(10);  m_data is immutable</span></span>
<span id="cb4-40">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>const_wrapper<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_data</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-41">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-42"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p><a href="https://compiler-explorer.com/z/bGMPYT6vh">Compiler Explorer</a></p>
<p>The static assertion passes, because <code>get()</code> returns <code>auto</code>. It is, as if, we are returning by value. <code>auto</code> always deduces a non-<code>const</code>, non-reference object.</p>
</section>
<section id="propagating-the-value-category-of-the-owning-object" class="level1">
<h1>Propagating the value category of the owning object</h1>
<p>Consider a highly simplified version of <code>optional&lt;T&gt;</code> which is a wrapper type for representing nullable <code>T</code> objects which may/may not contain a value.</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp number-lines code-with-copy"><code class="sourceCode cpp"><span id="cb5-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">template</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">typename</span> T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb5-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> optional<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb5-3">    T <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_storage</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb5-4">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">bool</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_is_initialized</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb5-5"></span>
<span id="cb5-6">    optional<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>T <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> v<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb5-7">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_storage</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span></span>
<span id="cb5-8">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_is_initialized</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">true</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb5-9">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb5-10">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">operator</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">new</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">static_cast</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*&gt;&amp;</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_storage</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>v<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">));</span></span>
<span id="cb5-11">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb5-12"></span>
<span id="cb5-13">    optional<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span></span>
<span id="cb5-14">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_storage</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span></span>
<span id="cb5-15">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_is_initialized</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">false</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb5-16">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span></span>
<span id="cb5-17"></span>
<span id="cb5-18">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/* ... */</span></span>
<span id="cb5-19"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span></code></pre></div>
<p>From a design perspective, we would like that getters such as <code>optional&lt;T&gt;::get()</code> should propagate the value-category of the owning object to it’s member data.</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp number-lines code-with-copy"><code class="sourceCode cpp"><span id="cb6-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;utility&gt;</span></span>
<span id="cb6-2"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;iostream&gt;</span></span>
<span id="cb6-3"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;type_traits&gt;</span></span>
<span id="cb6-4"></span>
<span id="cb6-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">template</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">typename</span> T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb6-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> optional<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb6-7">    T <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_storage</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb6-8">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">bool</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_is_initialized</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb6-9"></span>
<span id="cb6-10">    optional<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>T <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> v<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb6-11">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_storage</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span></span>
<span id="cb6-12">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_is_initialized</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">true</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb6-13">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb6-14">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">new</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">static_cast</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*&gt;(&amp;</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_storage</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">))</span> T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>v<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// placement new</span></span>
<span id="cb6-15">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb6-16">    </span>
<span id="cb6-17">    optional<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span></span>
<span id="cb6-18">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_storage</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span></span>
<span id="cb6-19">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_is_initialized</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">false</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb6-20">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span></span>
<span id="cb6-21"></span>
<span id="cb6-22">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">template</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">typename</span> Self<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb6-23">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">decltype</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">auto</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> value<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">this</span> Self<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;</span> self<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">){</span></span>
<span id="cb6-24">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>forward<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">decltype</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>self<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)&gt;(</span>self<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">).</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_storage</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb6-25">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb6-26"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb6-27"></span>
<span id="cb6-28"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> main<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(){</span></span>
<span id="cb6-29">    optional<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">double</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> opt_d<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">42.0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb6-30">    opt_d<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>value<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb6-31"></span>
<span id="cb6-32">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> optional<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">double</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> copt_d<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">5.0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb6-33">    copt_d<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>value<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb6-34"></span>
<span id="cb6-35">    optional<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">double</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;(</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">17.0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">).</span>value<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb6-36">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">static_cast</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>optional<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">double</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&amp;&amp;&gt;(</span>optional<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">double</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;(</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">28.0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)).</span>value<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb6-37">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb6-38"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p><a href="https://compiler-explorer.com/z/EjzzfsrGs">Compiler Explorer</a></p>
<p>One function template does it. This is equivalent to writing:</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp number-lines code-with-copy"><code class="sourceCode cpp"><span id="cb7-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;utility&gt;</span></span>
<span id="cb7-2"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;iostream&gt;</span></span>
<span id="cb7-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">template</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">typename</span> T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb7-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> optional<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb7-5">    T <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_storage</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb7-6">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">bool</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_is_initialized</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb7-7"></span>
<span id="cb7-8">    optional<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>T <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> v<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb7-9">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_storage</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>v<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb7-10">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_is_initialized</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">true</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb7-11">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span></span>
<span id="cb7-12"></span>
<span id="cb7-13">    optional<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span></span>
<span id="cb7-14">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_storage</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span></span>
<span id="cb7-15">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_is_initialized</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">false</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb7-16">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span></span>
<span id="cb7-17"></span>
<span id="cb7-18">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/*</span></span>
<span id="cb7-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    template&lt;typename Self&gt;</span></span>
<span id="cb7-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    decltype(auto) value(this Self&amp;&amp; self){</span></span>
<span id="cb7-21"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        return std::forward&lt;decltype(self)&gt;(self).m_storage;</span></span>
<span id="cb7-22"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    }</span></span>
<span id="cb7-23"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    */</span></span>
<span id="cb7-24">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">decltype</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">auto</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> value<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">this</span> optional<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> self<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">){</span></span>
<span id="cb7-25">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>cout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> &lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"value(this optional&amp;)"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb7-26">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> self<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_storage</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb7-27">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb7-28"></span>
<span id="cb7-29">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">decltype</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">auto</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> value<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">this</span> optional <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> self<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">){</span></span>
<span id="cb7-30">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>cout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> &lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"value(this optional const&amp;)"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb7-31">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>self<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_storage</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb7-32">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb7-33"></span>
<span id="cb7-34">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">decltype</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">auto</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> value<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">this</span> optional<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;</span> self<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">){</span></span>
<span id="cb7-35">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>cout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> &lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"value(this optional &amp;&amp;)"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb7-36">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>move<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>self<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">).</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_storage</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb7-37">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb7-38"></span>
<span id="cb7-39">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">decltype</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">auto</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> value<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">this</span> optional <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;</span> self<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">){</span></span>
<span id="cb7-40">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>cout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> &lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"value(this optional const &amp;&amp;)"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb7-41">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>move<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>self<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">).</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_storage</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb7-42">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb7-43"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb7-44"></span>
<span id="cb7-45"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> main<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(){</span></span>
<span id="cb7-46">    optional<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">double</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> opt_d<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">42.0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb7-47">    opt_d<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>value<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb7-48"></span>
<span id="cb7-49">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> optional<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">double</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> copt_d<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">5.0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb7-50">    copt_d<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>value<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb7-51"></span>
<span id="cb7-52">    optional<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">double</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;(</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">17.0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">).</span>value<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb7-53">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">static_cast</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>optional<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">double</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;&gt;(</span>optional<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">double</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;(</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">28.0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)).</span>value<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb7-54">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb7-55"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p><a href="https://compiler-explorer.com/z/oeGvjE418">Compiler Explorer</a></p>
</section>
<section id="getter-return-types" class="level1">
<h1>Getter return types</h1>
<p>If we need to propagate both <code>const</code>-ness and the value category of the owning object <code>o</code> to its <code>T m_data</code> data-member, we could use <code>std::forward_like&lt;T,U&gt;</code> defined in the <code>&lt;utility&gt;</code> header.</p>


</section>

 ]]></description>
  <category>C++</category>
  <guid>http://quantdev.blog/posts/deducing-this/index.html</guid>
  <pubDate>Thu, 19 Jun 2025 23:00:00 GMT</pubDate>
  <media:content url="http://quantdev.blog/posts/deducing-this/cpp.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>A bounded SPSC lock-free queue implementation</title>
  <dc:creator>Quasar </dc:creator>
  <link>http://quantdev.blog/posts/spsc_lockfree_queue/index.html</link>
  <description><![CDATA[ 




<section id="designing-the-spsc_queue-data-structure" class="level1">
<h1>Designing the <code>spsc_queue</code> data-structure</h1>
<p>There are several important performance considerations, when implementing an SPSC lock-free queue.</p>
<section id="read_index-and-write_index-indices" class="level2">
<h2 class="anchored" data-anchor-id="read_index-and-write_index-indices"><code>read_index</code> and <code>write_index</code> indices</h2>
<p>A queue needs to keep track of the <code>read_index</code> (the head of the queue) and the <code>write_index</code> (the tail of the queue). These indices should be atomically incremented.</p>
</section>
<section id="why-implementing-growing-lock-free-queues-is-much-harder" class="level2">
<h2 class="anchored" data-anchor-id="why-implementing-growing-lock-free-queues-is-much-harder">Why implementing growing lock-free queues is much harder?</h2>
<p>Lock-free queues are generally bounded queues. Imagine a scenario where the underlying data-structure of a lock-free queue is <code>std::vector&lt;T&gt;</code> which can grow dynamically in size.</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp number-lines code-with-copy"><code class="sourceCode cpp"><span id="cb1-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> spsc_queue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb1-2">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>vector<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_buffer</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-3">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>atomic<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>size_t<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_write_index</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb1-4">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>atomic<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>size_t<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_read_index</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb1-5"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span></code></pre></div>
<p>Now, a writer thread <code>W</code> that wants to write an element to the queue, performs <code>push_back()</code> on the vector. Assume that the vector’s <code>size() == capacity()</code>, so it is full. Internally the vector does the following steps:</p>
<ul>
<li><p>A new heap memory allocation is performed with a larger capacity equal to two times the original capacity.</p></li>
<li><p>Move/copy construct elements of type <code>T</code> from the old memory block to the new memory block.</p></li>
<li><p>Free the old memory block.</p></li>
</ul>
<p><code>m_buffer</code> is reassigned to the new memory block. Since there is more room for the new element, it Will be copied/moved to <code>m_buffer[write_index + 1]</code>.</p>
<p>At this point a reader thread <code>R</code> wants to pop an element off the queue.</p>
<p>The writer thread <code>W</code>, however, hasn’t synchronized with the reader thread <code>R</code>.</p>
<p>So, the reader thread <code>R</code> accesses <code>m_buffer[read_index]</code>. However, in this thread <code>m_buffer</code> still refers to the old memory block. This is UB(undefined behavior).</p>
<p>Consequently, lock-free queues are usually bounded. You can implement growing lock-free queues, it’s much harder and potentially has higher overhead compared to a fixed-capacity queue.</p>
</section>
<section id="cache-lines-and-cache-coherency." class="level2">
<h2 class="anchored" data-anchor-id="cache-lines-and-cache-coherency.">Cache lines and cache coherency.</h2>
<p>A cache-line is typically <img src="https://latex.codecogs.com/png.latex?64">-bytes on most machines.</p>
<p>If cache line X is in the cache of multiple cores, and one of these cores mutates its data, then the change must be reflected in all the cores owning X via a cache coherency mechanism</p>
<p>For simplicity, suppose there are <img src="https://latex.codecogs.com/png.latex?2"> cores - A and B. Further assume, that core A reads and writes to a variable <code>a</code>, core B reads and writes to a variable <code>b</code>, and <code>a</code> and <code>b</code> are close to each other in main memory - they are on the same cache line.</p>
<p>Core A first reads the value of <code>a</code> from main memory. It therefore loads the entire cache line and marks it as <strong>exclusive</strong> access as it is the only core operating on this cache line. Core B decides to read the value of <code>b</code>. Since, <code>a</code> and <code>b</code> are close and reside on the same cache line, Core B loads the same cache line and both cores tag their cache lines as <strong>shared</strong> access.</p>
<p>Now, let’s suppose core A decides to change the value of <code>a</code>. The core A stores this change only in its store buffer and marks its cache line as <strong>modified</strong>. It also communicates this change to core B, and this core in turn will mark its cache as <strong>invalidated</strong>.</p>
<p>That’s how different cores ensure their caches are coherent with each other.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="http://quantdev.blog/posts/spsc_lockfree_queue/https:/wiki.cdot.senecapolytechnic.ca/w/imgs/CPUCacheline.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">CPU Cache line</figcaption>
</figure>
</div>
</section>
<section id="false-sharing" class="level2">
<h2 class="anchored" data-anchor-id="false-sharing">False Sharing</h2>
<p>False-sharing occurs when threads on different processors modify different variables residing on the same cache-line.</p>
<p>What happens now, when core B decides to re-read the value of <code>b</code>? Since, the cache line for core B is invalidated, it should now read the value of <code>b</code> from main memory again. This will force the core A to flush its store buffer, and then core B re-fetches the latest cache-line version from main memory. Both cores end up with the latest cache-line version in the <strong>shared</strong> state again.</p>
<p>So, this imposes a cache miss to one core and an early buffer flush to another one, even though the two cores weren’t operating on the same memory location. This is called <strong>false-sharing</strong>.</p>
<p>Keeping objects close in memory is often very desirable for performance reasons. False sharing is a potential risk for multithreaded applications that mutate data.</p>
</section>
<section id="avoiding-false-sharing" class="level2">
<h2 class="anchored" data-anchor-id="avoiding-false-sharing">Avoiding false sharing</h2>
<p>To avoid false-sharing, the <a href="https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0154r1.html"><code>std::hardware_destructive_interference_size</code></a> constant defined in the <code>thread</code> header, is used to determine the cache-line size and is to be used with <code>alignas()</code>.</p>
<p>So, we define our <code>spspc_queue</code> class as follows:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp number-lines code-with-copy"><code class="sourceCode cpp"><span id="cb2-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">template</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>Queueable T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>size_t<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> </span>N<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb2-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> spsc_queue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb2-3">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb2-4">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">using</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">size_type</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>size_t<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-5">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">using</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">value_type</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-6">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">using</span> reference <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;;</span></span>
<span id="cb2-7"></span>
<span id="cb2-8">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">static</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">constexpr</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>size_t<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> </span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_capacity</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> N<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb2-9">        T <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_buffer</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_capacity</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb2-10">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">alignas</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>hardware_destructive_interference_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>atomic<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>size_t<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_read_index</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb2-11">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">alignas</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>hardware_destructive_interference_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>atomic<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>size_t<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_write_index</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb2-12">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span></code></pre></div>
</section>
<section id="implementing-try_push-and-try_pop-methods" class="level2">
<h2 class="anchored" data-anchor-id="implementing-try_push-and-try_pop-methods">Implementing <code>try_push</code> and <code>try_pop</code> methods</h2>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp number-lines code-with-copy"><code class="sourceCode cpp"><span id="cb3-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;iostream&gt;</span></span>
<span id="cb3-2"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;atomic&gt;</span></span>
<span id="cb3-3"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;type_traits&gt;</span></span>
<span id="cb3-4"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;concepts&gt;</span></span>
<span id="cb3-5"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;vector&gt;</span></span>
<span id="cb3-6"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;optional&gt;</span></span>
<span id="cb3-7"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;thread&gt;</span></span>
<span id="cb3-8"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;math.h&gt;</span></span>
<span id="cb3-9"></span>
<span id="cb3-10"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">namespace</span> dev<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb3-11">    </span>
<span id="cb3-12">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">template</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">typename</span> T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb3-13">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">concept</span> Queueable <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>default_initializable<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>move_constructible<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;;</span></span>
<span id="cb3-14"></span>
<span id="cb3-15">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/**</span></span>
<span id="cb3-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">     * </span><span class="an" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@brief</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> The `spsc_queue` class provides a single-reader, single-writer</span></span>
<span id="cb3-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">     * fifo queue. </span></span>
<span id="cb3-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">     */</span></span>
<span id="cb3-19">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">template</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>Queueable T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>size_t<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> </span>N<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb3-20">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> spsc_queue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb3-21">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb3-22">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">using</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">size_type</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>size_t<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-23">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">using</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">value_type</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-24">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">using</span> reference <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;;</span></span>
<span id="cb3-25"></span>
<span id="cb3-26">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">static</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">constexpr</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>size_t<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> </span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_capacity</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> N<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)};</span></span>
<span id="cb3-27">        T <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_buffer</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_capacity</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb3-28">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">alignas</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>hardware_destructive_interference_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>atomic<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>size_t<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_read_index</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb3-29">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">alignas</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>hardware_destructive_interference_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>atomic<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>size_t<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_write_index</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb3-30"></span>
<span id="cb3-31">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb3-32">        spsc_queue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">default</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-33">        spsc_queue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> spsc_queue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">delete</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-34">        spsc_queue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">operator</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=(</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> spsc_queue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">delete</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-35">        spsc_queue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>spsc_queue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">delete</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-36">        spsc_queue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">operator</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=(</span>spsc_queue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">delete</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-37"></span>
<span id="cb3-38">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/**</span></span>
<span id="cb3-39"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">         * </span><span class="an" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@brief</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> pushes an element onto the ringbuffer.</span></span>
<span id="cb3-40"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">         * </span><span class="an" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@param</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> </span><span class="cv" style="color: #5E5E5E;
background-color: null;
font-style: italic;">`element`</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> will be pushed to the queue unless the queue is not full</span></span>
<span id="cb3-41"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">         */</span></span>
<span id="cb3-42">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">template</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">typename</span> U<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb3-43">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">requires</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>is_convertible_v<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span>U<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb3-44">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">bool</span> try_push<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>U<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;</span> element<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">){</span></span>
<span id="cb3-45">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>size_t<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> </span>write_index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_write_index</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>load<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>memory_order_relaxed<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb3-46">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>size_t<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> </span>next_write_index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>write_index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_capacity</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb3-47"></span>
<span id="cb3-48">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>next_write_index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_read_index</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>load<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>memory_order_acquire<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">))</span></span>
<span id="cb3-49">            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb3-50">                <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_buffer</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>write_index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>forward<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>U<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;(</span>element<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb3-51">                <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_write_index</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>store<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>next_write_index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>memory_order_release<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb3-52">                <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">true</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-53">            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span>   </span>
<span id="cb3-54">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">false</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-55">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb3-56">        </span>
<span id="cb3-57">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>optional<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> try_pop<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(){</span></span>
<span id="cb3-58">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>optional<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> result<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>nullopt<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb3-59">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>size_t<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> </span>read_index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_read_index</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>load<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>memory_order_relaxed<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb3-60"></span>
<span id="cb3-61">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>read_index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_write_index</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>load<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>memory_order_acquire<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">))</span></span>
<span id="cb3-62">                <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> result<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-63"></span>
<span id="cb3-64">            result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>move<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_buffer</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>read_index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]);</span></span>
<span id="cb3-65">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_read_index</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>store<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">((</span>read_index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_capacity</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">),</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>memory_order_release<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb3-66">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> result<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-67">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb3-68">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb3-69"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>


</section>
</section>

 ]]></description>
  <category>C++</category>
  <guid>http://quantdev.blog/posts/spsc_lockfree_queue/index.html</guid>
  <pubDate>Sat, 07 Jun 2025 23:00:00 GMT</pubDate>
  <media:content url="http://quantdev.blog/posts/spsc_lockfree_queue/cpp.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Storage Durations in C++</title>
  <dc:creator>Quasar </dc:creator>
  <link>http://quantdev.blog/posts/storage-duration/index.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>Two key properties of an object in C++ are storage and linkage.</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p><strong>Storage Duration.</strong> The storage duration is the property of an object that defines the minimum potential lifetime of the storage containing the object. The storage duration is determined by the construct used to create the object.</p>
</div>
</div>
<p>An object in C++ has one of the following storage durations:</p>
<ul>
<li><p><code>automatic</code> : Automatic means that the storage is allocated at the start of the scope. Most local variables have <code>automatic</code> storage duration (except those declared as <code>static</code>, <code>extern</code> or <code>thread_local</code> ).</p></li>
<li><p><code>static</code> : The storage for an object is allocated when the program begins usually before the <code>main()</code> function starts and is deallocated when the program ends. There’s only one instance of such an object in the whole program.</p></li>
<li><p><code>thread</code> : The storage for an object is tied to a thread: it’s started when a thread begins and is deallocated when the thread ends. Each thread has its own copy of the object.</p></li>
<li><p><code>dynamic</code> : The storage for an object is allocated and deallocated using explicit dynamic memory allocation functions.</p></li>
</ul>
<p>The definition of the second property linkage from the standard is as follows:</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p><strong>Linkage.</strong> A name is said to have a linkage when it can denote the same object, reference , function type, template, namespace as a name introduced in another scope.</p>
</div>
</div>
<p>We can have several linkage types:</p>
<ul>
<li><code>external</code> linkage : External means that the name can be referred to in scopes within the same translation unit or outside. Non-<code>const</code> global variables have <code>extern</code> storage duration.</li>
</ul>


</section>

 ]]></description>
  <category>C++</category>
  <guid>http://quantdev.blog/posts/storage-duration/index.html</guid>
  <pubDate>Wed, 21 May 2025 23:00:00 GMT</pubDate>
  <media:content url="http://quantdev.blog/posts/storage-duration/cpp.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>The virtual keyword</title>
  <dc:creator>Quasar </dc:creator>
  <link>http://quantdev.blog/posts/virtualization/index.html</link>
  <description><![CDATA[ 




<section id="virtual-functions" class="level1">
<h1><code>virtual</code> functions</h1>
<p>The <code>virtual</code> keyword specifies that a non-static member function is <code>virtual</code> and supports dynamic dispatch. It may only appear in the initial declaration of a non-static member function (i.e., when it is declared in the class definition).</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp number-lines code-with-copy"><code class="sourceCode cpp"><span id="cb1-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;iostream&gt;</span></span>
<span id="cb1-2"></span>
<span id="cb1-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> Base</span>
<span id="cb1-4"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb1-5">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb1-6">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> foo<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(){</span></span>
<span id="cb1-7">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>cout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> &lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Base::foo()"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-8">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb1-9"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb1-10"></span>
<span id="cb1-11"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> Derived <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> Base<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb1-12">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb1-13">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> foo<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(){</span></span>
<span id="cb1-14">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>cout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> &lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Derived::foo()"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-15">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb1-16"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb1-17"></span>
<span id="cb1-18"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> main<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(){</span></span>
<span id="cb1-19">    Base base_obj<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-20">    Derived derived_obj<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-21">    Base<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> base_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">nullptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb1-22"></span>
<span id="cb1-23">    base_ptr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span>base_obj<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-24">    base_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span>foo<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb1-25"></span>
<span id="cb1-26">    base_ptr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span>derived_obj<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-27">    base_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span>foo<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb1-28">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-29"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p>Run at <a href="https://godbolt.org/z/jG9bG4Yrs">Compiler Explorer</a></p>
<p>Output:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource shell number-lines code-with-copy"><code class="sourceCode"><span id="cb2-1">Base::foo()</span>
<span id="cb2-2">Base::foo()</span></code></pre></div>
<p>The version of <code>foo</code> invoked is determined at compile time, based on the pointer type.</p>
<p>If we declare the <code>foo()</code> as a virtual method, then the version of <code>foo()</code> invoked is resolved dynamically on-the-fly depending on <strong>the type of object being pointed to</strong> (<em>pointee</em>).</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp number-lines code-with-copy"><code class="sourceCode cpp"><span id="cb3-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;iostream&gt;</span></span>
<span id="cb3-2"></span>
<span id="cb3-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> Base</span>
<span id="cb3-4"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb3-5">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb3-6">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">virtual</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> foo<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(){</span></span>
<span id="cb3-7">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>cout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> &lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Base::foo()"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-8">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb3-9"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb3-10"></span>
<span id="cb3-11"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> Derived <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> Base<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb3-12">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb3-13">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> foo<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">override</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//override is optional</span></span>
<span id="cb3-14">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>cout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> &lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Derived::foo()"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-15">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb3-16"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb3-17"></span>
<span id="cb3-18"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> main<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(){</span></span>
<span id="cb3-19">    Base b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-20">    Derived d<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-21">    </span>
<span id="cb3-22">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Virtual function call through reference</span></span>
<span id="cb3-23">    Base<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> br <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span>   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// the type of br is Base&amp;</span></span>
<span id="cb3-24">    Base<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> dr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> d<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span>   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// the type of dr is Base&amp;</span></span>
<span id="cb3-25">    br<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>foo<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span>       <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Calls Base::foo()</span></span>
<span id="cb3-26">    dr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>foo<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span>       <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Calls Derived::foo()</span></span>
<span id="cb3-27"></span>
<span id="cb3-28">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Virtual function call through pointers</span></span>
<span id="cb3-29">    Base<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> bp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span>b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// type of bp is Base*</span></span>
<span id="cb3-30">    Base<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> dp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span>d<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// type of dp is Base* as well</span></span>
<span id="cb3-31">    bp<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span>foo<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span>      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Calls Base::foo()</span></span>
<span id="cb3-32">    dp<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span>foo<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span>      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Calls Derived::foo()</span></span>
<span id="cb3-33"></span>
<span id="cb3-34">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Non-virtual function calls</span></span>
<span id="cb3-35">    br<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>Base<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>foo<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb3-36">    dr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>Base<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>foo<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb3-37">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-38"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p>Run at <a href="https://godbolt.org/z/aYhbofMPb">Compiler Explorer</a></p>
<p>Output:</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode numberSource shell number-lines code-with-copy"><code class="sourceCode"><span id="cb4-1">Base::foo()</span>
<span id="cb4-2">Derived::foo()</span>
<span id="cb4-3">Base::foo()</span>
<span id="cb4-4">Derived::foo()</span>
<span id="cb4-5">Base::foo()</span>
<span id="cb4-6">Base::foo()</span></code></pre></div>
<p>A derived class <code>virtual</code> function is considered an override if and only if it has the same</p>
<ul>
<li>name</li>
<li>parameter type list (but not the return type)</li>
<li>cv-qualifiers</li>
<li>ref-qualifiers</li>
</ul>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp number-lines code-with-copy"><code class="sourceCode cpp"><span id="cb5-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;iostream&gt;</span></span>
<span id="cb5-2"></span>
<span id="cb5-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> Base</span>
<span id="cb5-4"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb5-5">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb5-6">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">virtual</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> vf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(){</span></span>
<span id="cb5-7">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>cout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> &lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Base::vf()"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb5-8">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb5-9"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb5-10"></span>
<span id="cb5-11"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> Derived <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> Base<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb5-12">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb5-13">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> vf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb5-14">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>cout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> &lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Derived::vf() const"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb5-15">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb5-16"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb5-17"></span>
<span id="cb5-18"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> main<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(){</span></span>
<span id="cb5-19">    Base b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb5-20">    Derived d<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb5-21">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> Derived const_d<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb5-22"></span>
<span id="cb5-23">    Base<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> bp<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">nullptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb5-24"></span>
<span id="cb5-25">    bp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span>b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb5-26">    bp<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span>vf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb5-27"></span>
<span id="cb5-28">    bp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span>d<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb5-29">    bp<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span>vf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb5-30">    d<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>vf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb5-31">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb5-32"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p>Output:</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode numberSource shell number-lines code-with-copy"><code class="sourceCode"><span id="cb6-1">Base::vf()</span>
<span id="cb6-2">Base::vf()</span>
<span id="cb6-3">Derived::vf() const</span></code></pre></div>
<p>In the above code snippet, the compiler does not treat <code>void Derived::vf() const</code> as an override for the base class virtual member function <code>void Base::vf()</code>.</p>
<section id="dynamic-dispatch" class="level2">
<h2 class="anchored" data-anchor-id="dynamic-dispatch">Dynamic dispatch</h2>
<p>A member function defined as <code>virtual</code> in the base class will be <code>virtual</code> in all child classes.</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp number-lines code-with-copy"><code class="sourceCode cpp"><span id="cb7-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include</span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;iostream&gt;</span></span>
<span id="cb7-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> A<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb7-3">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">virtual</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> vf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(){</span></span>
<span id="cb7-4">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>cout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> &lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"A::vf()"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb7-5">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb7-6"></span>
<span id="cb7-7">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> g<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(){</span></span>
<span id="cb7-8">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>cout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> &lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"A::g()"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb7-9">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb7-10"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb7-11"> </span>
<span id="cb7-12"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> B <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> A<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb7-13">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> vf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">override</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb7-14">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>cout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> &lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"B::vf()"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb7-15">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb7-16"></span>
<span id="cb7-17">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> g<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(){</span></span>
<span id="cb7-18">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>cout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> &lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"B::g()"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb7-19">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb7-20"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb7-21"></span>
<span id="cb7-22"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> C <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> B<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb7-23">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> vf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">override</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb7-24">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>cout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> &lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"C::vf()"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb7-25">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb7-26"></span>
<span id="cb7-27">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> g<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(){</span></span>
<span id="cb7-28">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>cout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> &lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"C::g()"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb7-29">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb7-30"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb7-31"></span>
<span id="cb7-32"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> D <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> C<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb7-33">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> g<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(){</span></span>
<span id="cb7-34">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>cout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> &lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"D::g()"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb7-35">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb7-36"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb7-37"></span>
<span id="cb7-38"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> main<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span></span>
<span id="cb7-39"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb7-40">    A a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> B b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> C c<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> D d<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb7-41">    A<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> a_as_aptr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span>a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb7-42">    A<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> b_as_aptr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span>b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb7-43">    A<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> c_as_aptr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span>c<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb7-44">    A<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> d_as_aptr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span>d<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb7-45"></span>
<span id="cb7-46">    a_as_aptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span>vf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb7-47">    b_as_aptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span>vf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb7-48">    c_as_aptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span>vf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb7-49">    d_as_aptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span>vf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb7-50"></span>
<span id="cb7-51">    a_as_aptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span>g<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb7-52">    b_as_aptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span>g<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb7-53">    c_as_aptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span>g<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb7-54">    d_as_aptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span>g<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb7-55"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p>Run at <a href="https://godbolt.org/z/zxeo53ah6">Compiler Explorer</a></p>
<p>Output:</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode numberSource shell number-lines code-with-copy"><code class="sourceCode"><span id="cb8-1">A::vf()</span>
<span id="cb8-2">B::vf()</span>
<span id="cb8-3">C::vf()</span>
<span id="cb8-4">C::vf()</span>
<span id="cb8-5">A::g()</span>
<span id="cb8-6">A::g()</span>
<span id="cb8-7">A::g()</span>
<span id="cb8-8">A::g()</span></code></pre></div>
<p>Because <code>vf()</code> is a virtual function, the dynamic type (type of the pointee object) is used at run-time to resolve calls to <code>b_as_aptr-&gt;vf()</code> or <code>c_as_aptr-&gt;vf()</code>. With non-virtual functions such as <code>g()</code>, the compiler uses the static type to determine what function to call, and it can do so at compile-time.</p>
</section>
<section id="override-a-useful-feature-to-prevent-bugs" class="level2">
<h2 class="anchored" data-anchor-id="override-a-useful-feature-to-prevent-bugs"><code>override</code>: a useful feature to prevent bugs</h2>
<p>Every time you define a method in the derived class that override <code>virtual</code> member function in the base class, as a good practice, tag it <code>override</code>. This way, you show that your intention for the derived class is to override the behavior of <code>vf</code> in the base class.</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp number-lines code-with-copy"><code class="sourceCode cpp"><span id="cb9-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include</span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;iostream&gt;</span></span>
<span id="cb9-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> Base<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb9-3">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">virtual</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> vf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(){</span></span>
<span id="cb9-4">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>cout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> &lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"void Base::vf()"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb9-5">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb9-6"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb9-7"></span>
<span id="cb9-8"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> Derived <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> Base<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb9-9">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> vf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">override</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb9-10">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>cout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> &lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"void Derived::vf()"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb9-11">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb9-12"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span></code></pre></div>
<p>If a function is declared with specifier <code>override</code> but does not override a base class <code>virtual</code> member function, the program is ill-formed and will not compile.</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp number-lines code-with-copy"><code class="sourceCode cpp"><span id="cb10-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include</span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;iostream&gt;</span></span>
<span id="cb10-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> Base<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb10-3">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">virtual</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> vf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(){</span></span>
<span id="cb10-4">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>cout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> &lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"void Base::vf()"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb10-5">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb10-6"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb10-7"></span>
<span id="cb10-8"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> Derived <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> Base<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb10-9">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> vf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">long</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">override</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb10-10">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>cout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> &lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"void Derived::vf()"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb10-11">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb10-12"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span></code></pre></div>
<p>Run at <a href="https://godbolt.org/z/jGcW14Gfs">Compiler Explorer</a></p>
<p><code>Base::vf()</code> does not need to be accessible or visible to be overriden. <code>Base::vf()</code> can be declared as <code>private</code>, or <code>Base</code> can be inherited using <code>private</code> inheritance.</p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp number-lines code-with-copy"><code class="sourceCode cpp"><span id="cb11-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include</span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;iostream&gt;</span></span>
<span id="cb11-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> B</span>
<span id="cb11-3"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb11-4">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">virtual</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> do_f<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(){</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// private member</span></span>
<span id="cb11-5">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>cout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> &lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"B::do_f()"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb11-6">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb11-7">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb11-8">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> f<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span> do_f<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// public interface</span></span>
<span id="cb11-9"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb11-10"> </span>
<span id="cb11-11"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> D <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> B</span>
<span id="cb11-12"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb11-13">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> do_f<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">override</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// overrides B::do_f</span></span>
<span id="cb11-14">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>cout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> &lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"D::do_f()"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb11-15">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb11-16"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb11-17"> </span>
<span id="cb11-18"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> main<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span></span>
<span id="cb11-19"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb11-20">    D d<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb11-21">    B<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> bp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span>d<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb11-22">    bp<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span>f<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// internally calls D::do_f();</span></span>
<span id="cb11-23"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p>Run at <a href="https://godbolt.org/z/Ge9vob6hG">Compiler Explorer</a></p>
</section>
</section>
<section id="virtual-destructors" class="level1">
<h1><code>virtual</code> destructors</h1>
<p>Consider the following code snippet, where we intend to use a class hierarchy polymorphically:</p>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp number-lines code-with-copy"><code class="sourceCode cpp"><span id="cb12-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include</span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;iostream&gt;</span></span>
<span id="cb12-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> A<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb12-3">    A<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(){</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>cout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> &lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"A()"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb12-4">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>A<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(){</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>cout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> &lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"~A()"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb12-5"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb12-6"></span>
<span id="cb12-7"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> B <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> A<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb12-8">    B<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(){</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>cout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> &lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"B()"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb12-9">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>B<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(){</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>cout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> &lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"~B()"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb12-10"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb12-11"></span>
<span id="cb12-12"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> C <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> B<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb12-13">    C<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(){</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>cout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> &lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"C()"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb12-14">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>C<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(){</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>cout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> &lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"~C()"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb12-15"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb12-16"></span>
<span id="cb12-17"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> main<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(){</span></span>
<span id="cb12-18">    A<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> c_as_aptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">new</span> C<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()};</span></span>
<span id="cb12-19">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">delete</span> c_as_aptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb12-20">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb12-21"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p>Run at <a href="https://godbolt.org/z/GoTGsrKq8">Compiler Explorer</a></p>
<p>Output:</p>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode numberSource shell number-lines code-with-copy"><code class="sourceCode"><span id="cb13-1">A()</span>
<span id="cb13-2">B()</span>
<span id="cb13-3">C()</span>
<span id="cb13-4">~A()</span></code></pre></div>
<p><code>new C()</code> dynamically allocates memory on the heap and default-initializes a <code>C()</code> object in this memory block. The address of the newly constructed object is stored in <code>c_as_aptr</code> pointer variable.</p>
<p>If we comment out line 19, we shall leak memory. All calls to <code>new</code> or <code>new[]</code> must be matched by corresponding calls to <code>delete</code> or <code>delete[]</code>.</p>
<p><code>delete T</code> for a type <code>T</code> calls the destructor <code>~T()</code> and deallocates the memory space occupied by <code>T</code>.</p>
<p>Since the base-class destructor <code>~A()</code> is a non-virtual function, <code>delete c_as_aptr</code> has undefined behavior. In most implementations, the call to the destructor will be resolved like any non-virtual code, meaning that the destructor of the base class will be called but not the one of the derived class, resulting in a resources leak.</p>
<p>Always make base classes’ destructors virtual when they’re meant to be manipulated polymorphically.</p>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp number-lines code-with-copy"><code class="sourceCode cpp"><span id="cb14-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include</span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;iostream&gt;</span></span>
<span id="cb14-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> A<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb14-3">    A<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(){</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>cout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> &lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"A()"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb14-4">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">virtual</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>A<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(){</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>cout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> &lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"~A()"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb14-5"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb14-6"></span>
<span id="cb14-7"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> B <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> A<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb14-8">    B<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(){</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>cout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> &lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"B()"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb14-9">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>B<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(){</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>cout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> &lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"~B()"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb14-10"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb14-11"></span>
<span id="cb14-12"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> C <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> B<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb14-13">    C<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(){</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>cout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> &lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"C()"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb14-14">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>C<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(){</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>cout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> &lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"~C()"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb14-15"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb14-16"></span>
<span id="cb14-17"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> main<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(){</span></span>
<span id="cb14-18">    A<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> c_as_aptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">new</span> C<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()};</span></span>
<span id="cb14-19">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">delete</span> c_as_aptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb14-20">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb14-21"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p>Run at <a href="https://godbolt.org/z/zh5rT9T5d">Compiler Explorer</a></p>
<p>Output:</p>
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode numberSource shell number-lines code-with-copy"><code class="sourceCode"><span id="cb15-1">A()</span>
<span id="cb15-2">B()</span>
<span id="cb15-3">C()</span>
<span id="cb15-4">~C()</span>
<span id="cb15-5">~B()</span>
<span id="cb15-6">~A()</span></code></pre></div>
</section>
<section id="virtual-inheritance-and-the-diamond-problem" class="level1">
<h1><code>virtual</code> inheritance and the diamond problem</h1>
<p>Unlike non-virtual inheritance described above, <code>virtual</code> inheritance uses the keyword <code>virtual</code> as the access specifier, when inheriting from a base class.</p>
<p>The difference between conventional inheritance and <code>virtual</code> inheritance is that <code>virtual</code> inheritance allows a diamond class hierarchy and child classes inherit only one copy of the <code>virtual</code> base class.</p>
<p>Consider the following code snippet:</p>
<div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp number-lines code-with-copy"><code class="sourceCode cpp"><span id="cb16-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> A<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{};</span></span>
<span id="cb16-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> B <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> A <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{};</span></span>
<span id="cb16-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> C <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> A <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{};</span></span>
<span id="cb16-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> D <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> B<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> C <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{};</span></span></code></pre></div>
<p>Here, <code>D</code> inherits indirectly from <code>A</code>, it inherits a copy of class <code>A</code> from via <code>B</code> and a second copy of class <code>A</code> via <code>C</code>. So, <code>D</code> inherits two copies of class <code>A</code>.</p>
<div class="sourceCode" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode numberSource shell number-lines code-with-copy"><code class="sourceCode"><span id="cb17-1">A   A</span>
<span id="cb17-2">|   |</span>
<span id="cb17-3">B   C</span>
<span id="cb17-4"> \ /</span>
<span id="cb17-5">  D</span></code></pre></div>
<div class="sourceCode" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp number-lines code-with-copy"><code class="sourceCode cpp"><span id="cb18-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include</span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;iostream&gt;</span></span>
<span id="cb18-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> A<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb18-3">    A<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(){</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>cout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> &lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"A()"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;}</span></span>
<span id="cb18-4">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">virtual</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>A<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(){</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>cout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> &lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"~A()"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb18-5"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb18-6"></span>
<span id="cb18-7"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> B <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> A<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb18-8">    B<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(){</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>cout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> &lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"B()"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;}</span></span>
<span id="cb18-9">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">virtual</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>B<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(){</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>cout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> &lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"~B()"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb18-10"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb18-11"></span>
<span id="cb18-12"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> C <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> A<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb18-13">    C<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(){</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>cout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> &lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"C()"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;}</span></span>
<span id="cb18-14">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">virtual</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>C<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(){</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>cout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> &lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"~C()"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb18-15"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb18-16"></span>
<span id="cb18-17"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> D <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> B<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> C<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb18-18">    D<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(){</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>cout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> &lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"D()"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;}</span></span>
<span id="cb18-19">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">virtual</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>D<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(){</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>cout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> &lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"~D()"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb18-20"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb18-21"></span>
<span id="cb18-22"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> main<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(){</span></span>
<span id="cb18-23">    D d<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb18-24">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb18-25"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p>Run at <a href="https://godbolt.org/z/Mf4bjo3xK">Compiler Explorer</a></p>
<p>Output:</p>
<div class="sourceCode" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode numberSource shell number-lines code-with-copy"><code class="sourceCode"><span id="cb19-1">A()</span>
<span id="cb19-2">B()</span>
<span id="cb19-3">A()</span>
<span id="cb19-4">C()</span>
<span id="cb19-5">D()</span>
<span id="cb19-6">~D()</span>
<span id="cb19-7">~C()</span>
<span id="cb19-8">~A()</span>
<span id="cb19-9">~B()</span>
<span id="cb19-10">~A()</span></code></pre></div>
<p>To solve this problem, we must make <code>A</code> as a <code>virtual</code> base class for both <code>B</code> and <code>C</code>. <code>D</code> inherits from both <code>B</code> and <code>C</code>. This time, because <code>A</code> is inherited virtually by <code>B</code> and <code>C</code> only one instance of the <code>A</code> subobject will be created for `D.</p>
<div class="sourceCode" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp number-lines code-with-copy"><code class="sourceCode cpp"><span id="cb20-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include</span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;iostream&gt;</span></span>
<span id="cb20-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> A<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb20-3">    A<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(){</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>cout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> &lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"A()"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;}</span></span>
<span id="cb20-4">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">virtual</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>A<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(){</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>cout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> &lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"~A()"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb20-5"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb20-6"></span>
<span id="cb20-7"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> B <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">virtual</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> A<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb20-8">    B<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(){</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>cout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> &lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"B()"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;}</span></span>
<span id="cb20-9">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">virtual</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>B<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(){</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>cout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> &lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"~B()"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb20-10"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb20-11"></span>
<span id="cb20-12"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> C <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">virtual</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> A<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb20-13">    C<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(){</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>cout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> &lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"C()"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;}</span></span>
<span id="cb20-14">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">virtual</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>C<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(){</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>cout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> &lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"~C()"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb20-15"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb20-16"></span>
<span id="cb20-17"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> D <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> B<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> C<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb20-18">    D<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(){</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>cout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> &lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"D()"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;}</span></span>
<span id="cb20-19">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">virtual</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>D<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(){</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>cout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> &lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"~D()"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb20-20"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb20-21"></span>
<span id="cb20-22"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> main<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(){</span></span>
<span id="cb20-23">    D d<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb20-24">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb20-25"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p>Run at <a href="https://godbolt.org/z/9ME45Gbod">Compiler Explorer</a></p>
<p>Output:</p>
<div class="sourceCode" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode numberSource shell number-lines code-with-copy"><code class="sourceCode"><span id="cb21-1">A()</span>
<span id="cb21-2">B()</span>
<span id="cb21-3">C()</span>
<span id="cb21-4">D()</span>
<span id="cb21-5">~D()</span>
<span id="cb21-6">~C()</span>
<span id="cb21-7">~B()</span>
<span id="cb21-8">~A()</span></code></pre></div>
</section>
<section id="class-hierarchy-virtual-tables-virtual-table-table" class="level1">
<h1>Class Hierarchy, Virtual Tables, Virtual Table Table</h1>
<p>Consider the following class hierarchy:</p>
<div class="sourceCode" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp number-lines code-with-copy"><code class="sourceCode cpp"><span id="cb22-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> A<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb22-2">    A<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">default</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb22-3">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">virtual</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> foo<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb22-4">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">virtual</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> baz<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{};</span></span>
<span id="cb22-5">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">virtual</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>A<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">default</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb22-6"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb22-7"></span>
<span id="cb22-8"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> B<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb22-9">    B<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">default</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb22-10">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">virtual</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> foo<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(){};</span></span>
<span id="cb22-11">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">virtual</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> baz<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(){};</span></span>
<span id="cb22-12">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">virtual</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>B<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">default</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb22-13"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb22-14"></span>
<span id="cb22-15"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> C <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> B<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb22-16">    C<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">default</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb22-17">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> foo<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">override</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span></span>
<span id="cb22-18">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> c_bar<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span></span>
<span id="cb22-19">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">virtual</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> bar<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span></span>
<span id="cb22-20">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">virtual</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>C<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">default</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb22-21"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb22-22"></span>
<span id="cb22-23"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> D <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> C<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> A<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb22-24">    D<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">default</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb22-25">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Overriding A virtual functions</span></span>
<span id="cb22-26">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">virtual</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> foo<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">override</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span></span>
<span id="cb22-27">    </span>
<span id="cb22-28">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Overriding C virtual functions</span></span>
<span id="cb22-29">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">virtual</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> bar<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">override</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span></span>
<span id="cb22-30"></span>
<span id="cb22-31">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// non-virtual functions</span></span>
<span id="cb22-32">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> d_bar<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span></span>
<span id="cb22-33">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">virtual</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>D<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">default</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb22-34"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb22-35"></span>
<span id="cb22-36"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> main<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(){</span></span>
<span id="cb22-37">    D d<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb22-38">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb22-39"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p>We could dump the class hierarchy information including the virtual table information, using the <code>gcc</code> compiler flag <code>-fdump-lang-class</code>.</p>
<div class="sourceCode" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode numberSource shell number-lines code-with-copy"><code class="sourceCode"><span id="cb23-1">[quantdev@quasar-arch virtual_tables]$ g++ -g -fdump-lang-class main.cpp -o main</span>
<span id="cb23-2">[quantdev@quasar-arch virtual_tables]$ cat main.cpp.001l.class</span>
<span id="cb23-3">Vtable for A</span>
<span id="cb23-4">A::_ZTV1A: 6 entries</span>
<span id="cb23-5">0     (int (*)(...))0</span>
<span id="cb23-6">8     (int (*)(...))(&amp; _ZTI1A)</span>
<span id="cb23-7">16    (int (*)(...))__cxa_pure_virtual</span>
<span id="cb23-8">24    (int (*)(...))A::baz</span>
<span id="cb23-9">32    0</span>
<span id="cb23-10">40    0</span>
<span id="cb23-11"></span>
<span id="cb23-12">Class A</span>
<span id="cb23-13">   size=8 align=8</span>
<span id="cb23-14">   base size=8 base align=8</span>
<span id="cb23-15">A (0x0x7cb4a0bd8000) 0 nearly-empty</span>
<span id="cb23-16">    vptr=((&amp; A::_ZTV1A) + 16)</span>
<span id="cb23-17"></span>
<span id="cb23-18">Vtable for B</span>
<span id="cb23-19">B::_ZTV1B: 6 entries</span>
<span id="cb23-20">0     (int (*)(...))0</span>
<span id="cb23-21">8     (int (*)(...))(&amp; _ZTI1B)</span>
<span id="cb23-22">16    (int (*)(...))B::foo</span>
<span id="cb23-23">24    (int (*)(...))B::baz</span>
<span id="cb23-24">32    (int (*)(...))B::~B</span>
<span id="cb23-25">40    (int (*)(...))B::~B</span>
<span id="cb23-26"></span>
<span id="cb23-27">Class B</span>
<span id="cb23-28">   size=8 align=8</span>
<span id="cb23-29">   base size=8 base align=8</span>
<span id="cb23-30">B (0x0x7cb4a0bd8120) 0 nearly-empty</span>
<span id="cb23-31">    vptr=((&amp; B::_ZTV1B) + 16)</span>
<span id="cb23-32"></span>
<span id="cb23-33">Vtable for C</span>
<span id="cb23-34">C::_ZTV1C: 7 entries</span>
<span id="cb23-35">0     (int (*)(...))0</span>
<span id="cb23-36">8     (int (*)(...))(&amp; _ZTI1C)</span>
<span id="cb23-37">16    (int (*)(...))C::foo</span>
<span id="cb23-38">24    (int (*)(...))B::baz</span>
<span id="cb23-39">32    (int (*)(...))C::~C</span>
<span id="cb23-40">40    (int (*)(...))C::~C</span>
<span id="cb23-41">48    (int (*)(...))C::bar</span>
<span id="cb23-42"></span>
<span id="cb23-43">Class C</span>
<span id="cb23-44">   size=8 align=8</span>
<span id="cb23-45">   base size=8 base align=8</span>
<span id="cb23-46">C (0x0x7cb4a0a0e618) 0 nearly-empty</span>
<span id="cb23-47">    vptr=((&amp; C::_ZTV1C) + 16)</span>
<span id="cb23-48">B (0x0x7cb4a0bd8180) 0 nearly-empty</span>
<span id="cb23-49">      primary-for C (0x0x7cb4a0a0e618)</span>
<span id="cb23-50"></span>
<span id="cb23-51">Vtable for D</span>
<span id="cb23-52">D::_ZTV1D: 13 entries</span>
<span id="cb23-53">0     (int (*)(...))0</span>
<span id="cb23-54">8     (int (*)(...))(&amp; _ZTI1D)</span>
<span id="cb23-55">16    (int (*)(...))D::foo</span>
<span id="cb23-56">24    (int (*)(...))B::baz</span>
<span id="cb23-57">32    (int (*)(...))D::~D</span>
<span id="cb23-58">40    (int (*)(...))D::~D</span>
<span id="cb23-59">48    (int (*)(...))D::bar</span>
<span id="cb23-60">56    (int (*)(...))-8</span>
<span id="cb23-61">64    (int (*)(...))(&amp; _ZTI1D)</span>
<span id="cb23-62">72    (int (*)(...))D::_ZThn8_N1D3fooEv</span>
<span id="cb23-63">80    (int (*)(...))A::baz</span>
<span id="cb23-64">88    (int (*)(...))D::_ZThn8_N1DD1Ev</span>
<span id="cb23-65">96    (int (*)(...))D::_ZThn8_N1DD0Ev</span>
<span id="cb23-66"></span>
<span id="cb23-67">Class D</span>
<span id="cb23-68">   size=16 align=8</span>
<span id="cb23-69">   base size=16 base align=8</span>
<span id="cb23-70">D (0x0x7cb4a0be7000) 0</span>
<span id="cb23-71">    vptr=((&amp; D::_ZTV1D) + 16)</span>
<span id="cb23-72">C (0x0x7cb4a0a0e8f0) 0 nearly-empty</span>
<span id="cb23-73">      primary-for D (0x0x7cb4a0be7000)</span>
<span id="cb23-74">B (0x0x7cb4a0bd8240) 0 nearly-empty</span>
<span id="cb23-75">        primary-for C (0x0x7cb4a0a0e8f0)</span>
<span id="cb23-76">A (0x0x7cb4a0bd82a0) 8 nearly-empty</span>
<span id="cb23-77">      vptr=((&amp; D::_ZTV1D) + 72)</span></code></pre></div>
<section id="vtable-for-class-a" class="level2">
<h2 class="anchored" data-anchor-id="vtable-for-class-a"><code>vtable</code> for <code>class A</code></h2>
<p><code>A::_ZTV1A: 6 entries</code> says the name of the <code>vtable</code>, which is a static array, is <code>A::_ZTV1A</code> and there are <img src="https://latex.codecogs.com/png.latex?6"> function pointer entries in this static array. The offset of each entry is <img src="https://latex.codecogs.com/png.latex?8"> bytes.</p>
<div class="sourceCode" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode numberSource shell number-lines code-with-copy"><code class="sourceCode"><span id="cb24-1">Vtable for A</span>
<span id="cb24-2">A::_ZTV1A: 6 entries</span>
<span id="cb24-3">0     (int (*)(...))0</span>
<span id="cb24-4">8     (int (*)(...))(&amp; _ZTI1A)</span>
<span id="cb24-5">16    (int (*)(...))__cxa_pure_virtual</span>
<span id="cb24-6">24    (int (*)(...))A::baz</span>
<span id="cb24-7">32    0</span>
<span id="cb24-8">40    0</span>
<span id="cb24-9"></span>
<span id="cb24-10">Class A</span>
<span id="cb24-11">   size=8 align=8</span>
<span id="cb24-12">   base size=8 base align=8</span>
<span id="cb24-13">A (0x0x7cb4a0bd8000) 0 nearly-empty</span>
<span id="cb24-14">    vptr=((&amp; A::_ZTV1A) + 16)</span></code></pre></div>
<p><code>16 (int (*)(...))__cxa_pure_virtual</code> and <code>24 (int (*)(...))A::baz</code> are pointers to the pure virtual function <code>A::foo()=0</code> and the virtual function <code>A::baz()</code> respectively.</p>
</section>
<section id="vtable-for-class-b" class="level2">
<h2 class="anchored" data-anchor-id="vtable-for-class-b"><code>vtable</code> for <code>class B</code></h2>
<div class="sourceCode" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode numberSource shell number-lines code-with-copy"><code class="sourceCode"><span id="cb25-1">Vtable for B</span>
<span id="cb25-2">B::_ZTV1B: 6 entries</span>
<span id="cb25-3">0     (int (*)(...))0</span>
<span id="cb25-4">8     (int (*)(...))(&amp; _ZTI1B)</span>
<span id="cb25-5">16    (int (*)(...))B::foo</span>
<span id="cb25-6">24    (int (*)(...))B::baz</span>
<span id="cb25-7">32    (int (*)(...))B::~B</span>
<span id="cb25-8">40    (int (*)(...))B::~B</span>
<span id="cb25-9"></span>
<span id="cb25-10">Class B</span>
<span id="cb25-11">   size=8 align=8</span>
<span id="cb25-12">   base size=8 base align=8</span>
<span id="cb25-13">B (0x0x7cb4a0bd8120) 0 nearly-empty</span>
<span id="cb25-14">    vptr=((&amp; B::_ZTV1B) + 16)</span></code></pre></div>
<p>Again, <code>16 (int (*)(...))B::foo</code> and <code>24 (int (*)(...))B::baz</code> are pointers to the <code>virtual</code> functions <code>B::foo()</code> and <code>B::baz()</code>.</p>
<p>The entries for virtual destructors are actually pairs of entries.</p>
<p>The first destructor, <code>32 (int (*)(...))B::~B</code> called <em>the complete object destructor</em>, only performs destruction of variables that live on the stack having automatic storage duration. This memory does not need to be deallocated.</p>
<p>The second destructor, <code>40 (int (*)(...))B::~B</code> called <em>the deleting destructor of</em> <code>T</code> is function, that in addition, to calling the complete object destructor, also calls the appropriate deallocation function for <code>T</code> (<code>operator delete</code> on <code>T</code>).</p>
<p>Since the class <code>A</code> has atleast one pure <code>virtual</code> method, it cannot be instantiated directly, hence its <code>vtable</code> does not contain entries for destructors.</p>
</section>
<section id="vtable-for-class-c" class="level2">
<h2 class="anchored" data-anchor-id="vtable-for-class-c"><code>vtable</code> for <code>class C</code></h2>
<div class="sourceCode" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode numberSource shell number-lines code-with-copy"><code class="sourceCode"><span id="cb26-1">Vtable for C</span>
<span id="cb26-2">C::_ZTV1C: 7 entries</span>
<span id="cb26-3">0     (int (*)(...))0</span>
<span id="cb26-4">8     (int (*)(...))(&amp; _ZTI1C)</span>
<span id="cb26-5">16    (int (*)(...))C::foo</span>
<span id="cb26-6">24    (int (*)(...))B::baz</span>
<span id="cb26-7">32    (int (*)(...))C::~C</span>
<span id="cb26-8">40    (int (*)(...))C::~C</span>
<span id="cb26-9">48    (int (*)(...))C::bar</span>
<span id="cb26-10"></span>
<span id="cb26-11">Class C</span>
<span id="cb26-12">   size=8 align=8</span>
<span id="cb26-13">   base size=8 base align=8</span>
<span id="cb26-14">C (0x0x7cb4a0a0e618) 0 nearly-empty</span>
<span id="cb26-15">    vptr=((&amp; C::_ZTV1C) + 16)</span>
<span id="cb26-16">B (0x0x7cb4a0bd8180) 0 nearly-empty</span>
<span id="cb26-17">      primary-for C (0x0x7cb4a0a0e618)</span></code></pre></div>
<p><code>C</code> is a child class of <code>B</code>. <code>16 (int (*)(...))C::foo</code> is a pointer to the overriding function of <code>B::foo()</code> - <code>C::foo()</code> and <code>24 (int (*)(...))B::baz</code> is a pointer to the inherited function <code>B::baz()</code>.</p>
<p><code>32 (int (*)(...))C::~C</code> and <code>40 (int (*)(...))C::~C</code> are the pairs of destrutors.</p>
<p><code>48 (int (*)(...))C::bar</code> is the pointer to the subclass method <code>C::bar()</code>.</p>
</section>
<section id="vtable-for-class-d" class="level2">
<h2 class="anchored" data-anchor-id="vtable-for-class-d"><code>vtable</code> for <code>class D</code></h2>
<p><code>D</code> inherits from both <code>A</code> and <code>C</code> (indirectly from <code>B</code>).</p>
<div class="sourceCode" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode numberSource shell number-lines code-with-copy"><code class="sourceCode"><span id="cb27-1">Vtable for D</span>
<span id="cb27-2">D::_ZTV1D: 13 entries</span>
<span id="cb27-3">0     (int (*)(...))0</span>
<span id="cb27-4">8     (int (*)(...))(&amp; _ZTI1D)</span>
<span id="cb27-5">16    (int (*)(...))D::foo</span>
<span id="cb27-6">24    (int (*)(...))B::baz</span>
<span id="cb27-7">32    (int (*)(...))D::~D</span>
<span id="cb27-8">40    (int (*)(...))D::~D</span>
<span id="cb27-9">48    (int (*)(...))D::bar</span>
<span id="cb27-10">56    (int (*)(...))-8</span>
<span id="cb27-11">64    (int (*)(...))(&amp; _ZTI1D)</span>
<span id="cb27-12">72    (int (*)(...))D::_ZThn8_N1D3fooEv</span>
<span id="cb27-13">80    (int (*)(...))A::baz</span>
<span id="cb27-14">88    (int (*)(...))D::_ZThn8_N1DD1Ev</span>
<span id="cb27-15">96    (int (*)(...))D::_ZThn8_N1DD0Ev</span>
<span id="cb27-16"></span>
<span id="cb27-17">Class D</span>
<span id="cb27-18">   size=16 align=8</span>
<span id="cb27-19">   base size=16 base align=8</span>
<span id="cb27-20">D (0x0x7cb4a0be7000) 0</span>
<span id="cb27-21">    vptr=((&amp; D::_ZTV1D) + 16)</span>
<span id="cb27-22">C (0x0x7cb4a0a0e8f0) 0 nearly-empty</span>
<span id="cb27-23">      primary-for D (0x0x7cb4a0be7000)</span>
<span id="cb27-24">B (0x0x7cb4a0bd8240) 0 nearly-empty</span>
<span id="cb27-25">        primary-for C (0x0x7cb4a0a0e8f0)</span>
<span id="cb27-26">A (0x0x7cb4a0bd82a0) 8 nearly-empty</span>
<span id="cb27-27">      vptr=((&amp; D::_ZTV1D) + 72)</span></code></pre></div>
<p><code>16 (int (*)(...))D::foo</code> is a pointer to the overriding function of <code>A:foo()</code> and <code>C::foo()</code> - <code>D::foo()</code>.</p>
<p><code>24 (int (*)(...))B::baz</code> and <code>80 (int (*)(...))A::baz</code> are pointers to the copies of <code>baz()</code> inherited through the parents <code>A</code> and <code>B</code>.</p>
<p><code>32 (int (*)(...))D::~D</code> and <code>40 (int (*)(...))D::~D</code> are pairs of destructors.</p>
<p><code>48 (int (*)(...))D::bar</code> is a pointer to the overriding function of <code>C::bar()</code> - <code>D::bar()</code>.</p>
<p>When a class inherits from multiple base classes ( as in the case of <code>class D</code> inheriting from both <code>A</code> and <code>C</code>), the memory layout of the derived class <code>D</code> includes subobjects for each of the base class. The <code>this</code> pointer must be adjusted to point to the correct subobject when calling a virtual function from one of the base classes.</p>
<p>The <em>vcall-offset</em> is an adjustment value that ensures that the <code>this</code> pointer points to the correct base class subobject, when a <code>virtual</code> function is invoked.</p>
<p>The <em>vcall-offset</em> is stored in the <code>vtable</code> as an entry (in this case, <code>-8</code>). When a virtual function is called, the <em>vcall-offset</em> is added to the current <code>this</code> pointer to adjust it to the correct base class subobject.</p>
<p>If the <code>this</code> pointer points to the <code>D</code> subobject, adding the <em>vcall-offset</em> <code>-8</code> adjusts it to point to the <code>A</code> subobject inherited directly by <code>D</code>.</p>
</section>
</section>
<section id="class-memory-layout" class="level1">
<h1>Class memory layout</h1>
<p>The <code>pahole</code> utility is used to inspect the object memory layout in linux. Install <code>pahole</code> using your package manager:</p>
<div class="sourceCode" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode numberSource shell number-lines code-with-copy"><code class="sourceCode"><span id="cb28-1">[quantdev@quasar-arch virtual_tables]$ sudo pacman -S pahole</span></code></pre></div>
<p>The output of running <code>pahole</code> on our binary is as follows:</p>
<div class="sourceCode" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode numberSource shell number-lines code-with-copy"><code class="sourceCode"><span id="cb29-1">[quantdev@quasar-arch virtual_tables]$ pahole main</span>
<span id="cb29-2">struct D : C, A {</span>
<span id="cb29-3">        /* struct C                   &lt;ancestor&gt;; */     /*     0     8 */</span>
<span id="cb29-4">        /* struct A                   &lt;ancestor&gt;; */     /*     8     8 */</span>
<span id="cb29-5">        void D(struct D *, const struct D  &amp;);</span>
<span id="cb29-6"></span>
<span id="cb29-7">        void D(struct D *);</span>
<span id="cb29-8"></span>
<span id="cb29-9">        virtual void foo(struct D *);</span>
<span id="cb29-10"></span>
<span id="cb29-11">        virtual void bar(struct D *);</span>
<span id="cb29-12"></span>
<span id="cb29-13">        void d_bar(struct D *);</span>
<span id="cb29-14"></span>
<span id="cb29-15">        virtual void ~D(struct D *);</span>
<span id="cb29-16"></span>
<span id="cb29-17">        /* vtable has 2 entries: {</span>
<span id="cb29-18">           [0] = foo((null)), </span>
<span id="cb29-19">           [4] = bar((null)), </span>
<span id="cb29-20">        } */</span>
<span id="cb29-21">        /* size: 16, cachelines: 1, members: 2 */</span>
<span id="cb29-22">        /* last cacheline: 16 bytes */</span>
<span id="cb29-23">};</span>
<span id="cb29-24">struct C : B {</span>
<span id="cb29-25">        /* struct B                   &lt;ancestor&gt;; */     /*     0     8 */</span>
<span id="cb29-26">        void C(struct C *, const struct C  &amp;);</span>
<span id="cb29-27"></span>
<span id="cb29-28">        void C(struct C *);</span>
<span id="cb29-29"></span>
<span id="cb29-30">        virtual void foo(struct C *);</span>
<span id="cb29-31"></span>
<span id="cb29-32">        void c_bar(const struct C  *);</span>
<span id="cb29-33"></span>
<span id="cb29-34">        virtual void bar(struct C *);</span>
<span id="cb29-35"></span>
<span id="cb29-36">        virtual void ~C(struct C *);</span>
<span id="cb29-37"></span>
<span id="cb29-38">        /* vtable has 2 entries: {</span>
<span id="cb29-39">           [0] = foo((null)), </span>
<span id="cb29-40">           [4] = bar((null)), </span>
<span id="cb29-41">        } */</span>
<span id="cb29-42">        /* size: 8, cachelines: 1, members: 1 */</span>
<span id="cb29-43">        /* last cacheline: 8 bytes */</span>
<span id="cb29-44">};</span>
<span id="cb29-45">struct A {</span>
<span id="cb29-46">        void A(struct A *, const struct A  &amp;);</span>
<span id="cb29-47"></span>
<span id="cb29-48">        int ()(void) * *           _vptr.A;              /*     0     8 */</span>
<span id="cb29-49">        void A(struct A *);</span>
<span id="cb29-50"></span>
<span id="cb29-51">        virtual void foo(struct A *);</span>
<span id="cb29-52"></span>
<span id="cb29-53">        virtual void baz(struct A *);</span>
<span id="cb29-54"></span>
<span id="cb29-55">        virtual void ~A(struct A *);</span>
<span id="cb29-56"></span>
<span id="cb29-57">        /* vtable has 2 entries: {</span>
<span id="cb29-58">           [0] = foo((null)), </span>
<span id="cb29-59">           [1] = baz((null)), </span>
<span id="cb29-60">        } */</span>
<span id="cb29-61">        /* size: 8, cachelines: 1, members: 1 */</span>
<span id="cb29-62">        /* last cacheline: 8 bytes */</span>
<span id="cb29-63">};</span>
<span id="cb29-64">struct B {</span>
<span id="cb29-65">        void B(struct B *, const struct B  &amp;);</span>
<span id="cb29-66"></span>
<span id="cb29-67">        int ()(void) * *           _vptr.B;              /*     0     8 */</span>
<span id="cb29-68">        void B(struct B *);</span>
<span id="cb29-69"></span>
<span id="cb29-70">        virtual void foo(struct B *);</span>
<span id="cb29-71"></span>
<span id="cb29-72">        virtual void baz(struct B *);</span>
<span id="cb29-73"></span>
<span id="cb29-74">        virtual void ~B(struct B *);</span>
<span id="cb29-75"></span>
<span id="cb29-76">        /* vtable has 2 entries: {</span>
<span id="cb29-77">           [0] = foo((null)), </span>
<span id="cb29-78">           [1] = baz((null)), </span>
<span id="cb29-79">        } */</span>
<span id="cb29-80">        /* size: 8, cachelines: 1, members: 1 */</span>
<span id="cb29-81">        /* last cacheline: 8 bytes */</span>
<span id="cb29-82">};</span></code></pre></div>
<p>As an example, <code>struct D</code> has <code>size: 16</code> and consists of two subobjects <code>C</code> and <code>A</code>.</p>
<div class="sourceCode" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode numberSource shell number-lines code-with-copy"><code class="sourceCode"><span id="cb30-1">struct D {</span>
<span id="cb30-2">    struct C c; /* 0x0 */</span>
<span id="cb30-3">    struct A a; /* 0x8 */</span>
<span id="cb30-4">    /* size: 0x10, cachelines: 1, members: 2 */</span>
<span id="cb30-5">};</span></code></pre></div>

</section>

<div id="quarto-appendix" class="default"><section id="references" class="level2 appendix"><h2 class="anchored quarto-appendix-heading">References</h2><div class="quarto-appendix-contents">

<ul>
<li><a href="https://leimao.github.io/blog/CPP-Virtual-Table/">Virtual Tables</a>.</li>
</ul>


</div></section></div> ]]></description>
  <category>C++</category>
  <guid>http://quantdev.blog/posts/virtualization/index.html</guid>
  <pubDate>Wed, 21 May 2025 23:00:00 GMT</pubDate>
  <media:content url="http://quantdev.blog/posts/virtualization/cpp.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Quanto Options</title>
  <dc:creator>Quasar </dc:creator>
  <link>http://quantdev.blog/posts/quanto-options/index.html</link>
  <description><![CDATA[ 




<section id="a-quick-refresher" class="level1">
<h1>A quick refresher</h1>
<p>A quanto option is a derivative where the underlying is denominated in one currency, but the option-payoff is settled in a different one (the quanto-currency) at a pre-defined fixed exchange rate <img src="https://latex.codecogs.com/png.latex?Q">.</p>
<p>I take the example of gold quoted as <img src="https://latex.codecogs.com/png.latex?XAU/USD"> that is quantoed in <img src="https://latex.codecogs.com/png.latex?INR">.</p>
<p>Define :</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign*%7D%0AS_T%20&amp;:=%20%5Ctext%7BPrice%20of%20gold%20in%20the%20underlying%20currency%7D%20%5C%5C%0AX_T%20&amp;:=%20%5Ctext%7BPrice%20of%20the%20underlying%20currency%20in%20quanto%20currency%20terms%7D%5C%5C%0AK%20&amp;:=%20%5Ctext%7BStrike%20expressed%20in%20underlying%20currency%20terms%7D%5C%5C%0AQ%20&amp;:=%20%5Ctext%7BPre-specified%20exchange%20rate%7D%0A%5Cend%7Balign*%7D%0A"></p>
<p>Since the payoff is in <img src="https://latex.codecogs.com/png.latex?INR">, we take <img src="https://latex.codecogs.com/png.latex?INR"> as the base currency or numeraire in the Black-Scholes model.</p>
<p>Then, the payoff of the quanto-call option is:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0AV_T%20=%20Q%5Cleft(%5Cfrac%7BS_T%7D%7BX_T%7D%20-%20K%5Cright)%5E%7B+%7D%0A"></p>
<p><img src="https://latex.codecogs.com/png.latex?S_T/X_T"> has units <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7BXAU%7D%7BUSD%7D">, and <img src="https://latex.codecogs.com/png.latex?Q"> - the pre-specified conversion factor has units <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7BUSD%7D%7BINR%7D">.</p>
</section>
<section id="the-setup" class="level1">
<h1>The Setup</h1>
<p>The domestic risk-neutral measure <img src="https://latex.codecogs.com/png.latex?Q%5E%7BINR%7D"> is the probability measure linked to the domestic money-market account <img src="https://latex.codecogs.com/png.latex?M_T%5E%7BINR%7D">.</p>
<p>The risk-neutral measure <img src="https://latex.codecogs.com/png.latex?Q%5E%7BUSD%7D"> is the probability measure linked to the underlying money-market account expressed in quanto currency terms, <img src="https://latex.codecogs.com/png.latex?(M_T%5E%7BUSD%7D%20%5Ccdot%20X_T)">. <img src="https://latex.codecogs.com/png.latex?M_T%5E%7BUSD%7D"> has units <img src="https://latex.codecogs.com/png.latex?USD%5E%7B-1%7D"> and <img src="https://latex.codecogs.com/png.latex?X_T"> has units <img src="https://latex.codecogs.com/png.latex?USD%20%5Ccdot%20INR%5E%7B-1%7D">.</p>
<p>Consider the Black-Scholes model:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign*%7D%0A%7BXAU/INR%20:%20%7D%20%5Cquad%20dS_t%20&amp;=%20r_%7BINR%7D%20S_t%20dt%20+%20%5Csigma_S%20S_t%20dW_%7BS%7D%5E%7BQ%5E%7BINR%7D%7D(t)%20%5C%5C%0A%7BUSD/INR%20:%20%7D%20%5Cquad%20dX_t%20&amp;=%20(r_%7BINR%7D%20-%20r_%7BUSD%7D)X_t%20dt%20+%20%5Csigma_X%20X(t)%20dW_X%5E%7BQ%5E%7BINR%7D%7D(t)%5C%5C%0AdW_%7BS%7D%5E%7BQ%5E%7BINR%7D%7D(t)%20%5Ccdot%20dW_X%5E%7BQ%5E%7BINR%7D%7D(t)%20&amp;=%20%5Crho_%7B(f,q),(d,q)%7D%20dt%0A%5Cend%7Balign*%7D%0A"></p>
<p>where <img src="https://latex.codecogs.com/png.latex?(W%5E%7BQ%5E%7BINR%7D%7D(t),t%5Cgeq%200)"> is a <img src="https://latex.codecogs.com/png.latex?Q%5E%7BINR%7D">-standard brownian motion.</p>
</section>
<section id="the-evolution-of-the-underlying-xau-usd" class="level1">
<h1>The evolution of the underlying XAU-USD</h1>
<p>The actual underlying is :</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Ctext%7BXAU/USD%20%7D%20:=%20%5Cfrac%7BS(t)%7D%7BX(t)%7D%0A"></p>
<p>Using Ito’s formula, we obtain:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign*%7D%0Ad%5Cleft(%5Cfrac%7B1%7D%7BX_t%7D%5Cright)%20&amp;=%20-%5Cfrac%7B1%7D%7BX_t%5E2%7DdX_t%20+%20%5Cfrac%7B1%7D%7B2%7D%5Ccdot%5Cfrac%7B2%7D%7BX_t%5E3%7D%20(dX_t)%5E2%20%5C%5C%0A&amp;=%20-%5Cfrac%7B1%7D%7BX_t%7D%5B(r_%7BINR%7D%20-%20r_%7BUSD%7D)%20dt%20+%20%5Csigma_X%20dW_X%5E%7BQ%5E%7BINR%7D%7D(t)%5D%20+%20%5Cfrac%7B1%7D%7BX_t%7D%5Csigma_X%5E2%20dt%5C%5C%0A&amp;=%20%5Cfrac%7B1%7D%7BX_t%7D%20%5B(%5Csigma_X%5E2%20+%20r_%7BUSD%7D%20-%20r_%7BINR%7D)%20dt%20-%20%5Csigma_X%20dW_X%5E%7BQ%5E%7BINR%7D%7D(t)%5D%0A%5Cend%7Balign*%7D%0A"></p>
<p>and hence:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign*%7D%0Ad%5Cleft(%5Cfrac%7BS_t%7D%7BX_t%7D%5Cright)%20&amp;=%20S_t%20%5Ccdot%20d%5Cleft(%5Cfrac%7B1%7D%7BX_t%7D%5Cright)%20+%20%5Cfrac%7B1%7D%7BX_t%7D%20dS_t%20+%20dS_t%20%5Ccdot%20d%5Cleft(%5Cfrac%7B1%7D%7BX_t%7D%5Cright)%5C%5C%0A&amp;=%20%5Cfrac%7BS_t%7D%7BX_t%7D%5B(%5Csigma_X%5E2%20+%20r_%7BUSD%7D%20-%20r_%7BINR%7D)%20dt%20-%20%5Csigma_X%20dW_X%5E%7BQ%5E%7BINR%7D%7D(t)%5D%20+%20%5Cfrac%7BS_t%7D%7BX_t%7D%5Br_%7BINR%7D%20dt%20+%20%5Csigma_S%20dW_%7BS%7D%5E%7BQ%5E%7BINR%7D%7D(t)%5D%20%5C%5C%0A&amp;-%5Cfrac%7BS_t%7D%7BX_t%7D%20%5B((%5Csigma_X%5E2%20+%20r_%7BUSD%7D%20-%20r_%7BINR%7D)%20dt%20-%20%5Csigma_X%20dW_X%5E%7BQ%5E%7BINR%7D%7D(t))(r_%7BINR%7D%20dt%20+%20%5Csigma_S%20dW_%7BS%7D%5E%7BQ%5E%7BINR%7D%7D(t))%5D%20%5C%5C%0A&amp;=%5Cfrac%7BS_t%7D%7BX_t%7D%5B(%5Csigma_X%5E2%20+r_%7BUSD%7D%20+%20%5Crho%20%5Csigma_X%20%5Csigma_S%20)%20dt%20+%20%5Csigma_S%20dW_S%5E%7BQ%5E%7BINR%7D(t)%7D%20-%20%5Csigma_X%20dW_X%5E%7BQ%5E%7BINR%7D%7D(t)%5D%0A%5Cend%7Balign*%7D%0A"></p>
<p>We can find an orthogonal decomposition of the random vector process <img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Bbmatrix%7D%20W_S%5E%7BQ%5E%7BINR%7D%7D(t)%20%5C%5C%20W_X%5E%7BQ%5E%7BINR%7D%7D(t)%5Cend%7Bbmatrix%7D">.</p>
<p>Define : <img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Bbmatrix%7D%0AW_S%5E%7BQ%5E%7BINR%7D%7D(t)%20%5C%5C%0AW_X%5E%7BQ%5E%7BINR%7D%7D(t)%0A%5Cend%7Bbmatrix%7D%20=%0A%5Cbegin%7Bbmatrix%7D%0AZ_S%5E%7BQ%5E%7BINR%7D%7D(t)%20%5C%5C%0A%5Crho%20Z_S%5E%7BQ%5E%7BINR%7D%7D(t)%20+%20%5Csqrt%7B1-%5Crho%5E2%7D%20Z_X%5E%7BQ%5E%7BINR%7D%7D(t)%0A%5Cend%7Bbmatrix%7D%0A"></p>
<p>where <img src="https://latex.codecogs.com/png.latex?Z_S%5E%7BQ%5E%7BINR%7D%7D(t)"> and <img src="https://latex.codecogs.com/png.latex?Z_X%5E%7BQ%5E%7BINR%7D%7D(t)"> are independent standard brownian motions.</p>
<p>So, the SDE can be written as:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign*%7D%0Ad%5Cleft(%5Cfrac%7BS_t%7D%7BX_t%7D%5Cright)%20&amp;=%20%5Cfrac%7BS_t%7D%7BX_t%7D%5B(%5Csigma_X%5E2%20+r_%7BUSD%7D%20+%20%5Crho%20%5Csigma_X%20%5Csigma_S%20)%20dt%20+%20%5Csigma_S%20dZ_S%5E%7BQ%5E%7BINR%7D%7D(t)%20-%20%5Csigma_X%20(%5Crho%20%5Ccdot%20dZ_S%5E%7BQ%5E%7BINR%7D%7D(t)%20+%20%20%5Csqrt%7B1-%5Crho%5E2%7D%20%5Ccdot%20dZ_X%5E%7BQ%5E%7BINR%7D%7D(t))%5D%20%5C%5C%0A&amp;=%5Cfrac%7BS_t%7D%7BX_t%7D%5B(%5Csigma_X%5E2%20+r_%7BUSD%7D%20+%20%5Crho%20%5Csigma_X%20%5Csigma_S%20)%20dt%20+%20(%5Csigma_S%20-%20%5Crho%20%5Csigma_X%20)%20dZ_S%5E%7BQ%5E%7BINR%7D%7D(t)%20-%20(%5Csigma_X%20%5Csqrt%7B1-%5Crho%5E2%7D)%20dZ_X%5E%7BQ%5E%7BINR%7D%7D(t)%5D%0A%5Cend%7Balign*%7D%0A"></p>
<p>Define:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0AB%5E%7BQ%5E%7BINR%7D%7D(t)%20=%20%5Cfrac%7B(%5Csigma_S%20-%20%5Crho%20%5Csigma_X%20)%20Z_S%5E%7BQ%5E%7BINR%7D%7D(t)%20-%20(%5Csigma_X%20%5Csqrt%7B1-%5Crho%5E2%7D)%20Z_X%5E%7BQ%5E%7BINR%7D%7D(t)%7D%7B(%5Csigma_S%20-%20%5Crho%20%5Csigma_X%20)%5E2%20+%20(%5Csigma_X%20%5Csqrt%7B1-%5Crho%5E2%7D)%5E2%7D%0A"></p>
<p>It’s easy to see that <img src="https://latex.codecogs.com/png.latex?B%5E%7BQ%5E%7BINR%7D%7D(t)"> is Gaussian and has mean and variance given by <img src="https://latex.codecogs.com/png.latex?%5Cmathcal%7BN%7D(0,t)">.</p>
<p>Consequently, we can re-write the SDE as:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0Ad%5Cleft(%5Cfrac%7BS_t%7D%7BX_t%7D%5Cright)%20=%20%5Cfrac%7BS_t%7D%7BX_t%7D%5B(%5Csigma_X%5E2%20+r_%7BUSD%7D%20+%20%5Crho%20%5Csigma_X%20%5Csigma_S%20)%20dt%20+%20(%5Csigma_S%5E2%20-%202%5Crho%20%5Csigma_S%20%5Csigma_X%20+%20%5Csigma_X%5E2)dB%5E%7BQ%5E%7BINR%7D%7D(t)%5D%0A"></p>
<p>Thus, <img src="https://latex.codecogs.com/png.latex?(%5Cfrac%7BS_t%7D%7BX_t%7D)_%7Bt%5Cgeq%200%7D"> follows a geometric brownian motion:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cfrac%7BS_t%7D%7BX_t%7D%20=%20%5Cfrac%7BS_0%7D%7BX_0%7D%5Cexp%5Cleft%5B%5Cleft(%5Calpha%20-%20%5Cfrac%7B%5Cbeta%5E2%7D%7B2%7D%5Cright)T+%5Cbeta%20B%5E%7BQ%5E%7BINR%7D%7D(T)%5Cright%5D%0A"></p>
<p>where <img src="https://latex.codecogs.com/png.latex?%5Calpha%20=%20%5Csigma_X%5E2%20+r_%7BUSD%7D%20+%20%5Crho%20%5Csigma_X%20%5Csigma_S">, <img src="https://latex.codecogs.com/png.latex?%5Cbeta%20=%20%5Csigma_S%5E2%20-%202%5Crho%20%5Csigma_S%20%5Csigma_X%20+%20%5Csigma_X%5E2"></p>
<p>This can easily be plugged into the Black formula to derive analytic expressions for quanto vanilla calls and puts.</p>


</section>

 ]]></description>
  <category>Stochastic Calculus</category>
  <guid>http://quantdev.blog/posts/quanto-options/index.html</guid>
  <pubDate>Thu, 15 May 2025 23:00:00 GMT</pubDate>
  <media:content url="http://quantdev.blog/posts/quanto-options/image.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Custom iterators and Iterator concepts</title>
  <dc:creator>Quasar </dc:creator>
  <link>http://quantdev.blog/posts/custom-iterators/index.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>An iterator is a generalization of a pointer. C++ STL containers usually expose iterators as part of their interface. They abstract away lower-level implementation details of traversing through container types, thus freeing the container-user to focus on algorithm design/business logic.</p>
</section>
<section id="traditional-c-iterators" class="level1">
<h1>Traditional C++ iterators</h1>
<p>Iterators have been around since before C++11, but they really hit mainstream since C++11 started shipping. The STL containers all implement their own iterators, however, it’s possible for developers to write their own iterators for custom collections.</p>
<p>In the past, you’d implement iterators using <a href="https://en.cppreference.com/w/cpp/iterator/iterator_tags">tagging</a>. A tag is simply an empty struct, with no data or behavior. It is often used to perform static dispatching (compile-time polymorphism). Here is a minimalistic example:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp number-lines code-with-copy"><code class="sourceCode cpp"><span id="cb1-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include</span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;iostream&gt;</span></span>
<span id="cb1-2"></span>
<span id="cb1-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">namespace</span> dev<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb1-4">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> random_access_iterator_tag<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{};</span></span>
<span id="cb1-5">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> forward_iterator_tag<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{};</span></span>
<span id="cb1-6"></span>
<span id="cb1-7">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">template</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">typename</span> T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb1-8">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> vector<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb1-9">        T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_data</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-10">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>size_t<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> </span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_size</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-11">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>size_t<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> </span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_capacity</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-12">        </span>
<span id="cb1-13">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> iterator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb1-14">            <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">using</span> iterator_category <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> random_access_iterator_tag<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-15">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/* .... */</span></span>
<span id="cb1-16">            T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_ptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-17">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb1-18"></span>
<span id="cb1-19">        iterator begin<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(){</span></span>
<span id="cb1-20">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>iterator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_data</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">));</span></span>
<span id="cb1-21">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb1-22">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb1-23"></span>
<span id="cb1-24">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">template</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">typename</span> T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb1-25">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> list<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb1-26">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> node<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb1-27">            T data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-28">            node<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> next<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-29">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb1-30"></span>
<span id="cb1-31">        node<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> head<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-32">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>size_t<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> </span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_size</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-33">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> iterator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb1-34">            <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">using</span> iterator_category <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> forward_iterator_tag<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-35">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/* .... */</span></span>
<span id="cb1-36">            node<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_ptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-37">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb1-38"></span>
<span id="cb1-39">        iterator begin<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(){</span></span>
<span id="cb1-40">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>iterator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>head<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">));</span></span>
<span id="cb1-41">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb1-42">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb1-43"></span>
<span id="cb1-44">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">template</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">typename</span> It<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb1-45">    It advance<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>It iterator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>size_t<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> </span>n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> forward_iterator_tag<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">){</span></span>
<span id="cb1-46">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>cout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> &lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Advance a foward iterator"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-47">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> iterator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-48">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb1-49"></span>
<span id="cb1-50">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">template</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">typename</span> It<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb1-51">    It advance<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>It iterator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>size_t<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> </span>n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> random_access_iterator_tag<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">){</span></span>
<span id="cb1-52">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>cout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> &lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Advance a random access iterator"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-53">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> iterator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-54">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb1-55"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb1-56"></span>
<span id="cb1-57"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> main<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(){</span></span>
<span id="cb1-58">    dev<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>vector<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> vec<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-59">    dev<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>list<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> lst<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-60"></span>
<span id="cb1-61">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">auto</span> it <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> vec<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>begin<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb1-62">    dev<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>advance<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>it<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> dev<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>vector<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;::</span>iterator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>iterator_category<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">());</span></span>
<span id="cb1-63"></span>
<span id="cb1-64">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">auto</span> it2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> lst<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>begin<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb1-65">    dev<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>advance<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>it2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> dev<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>list<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;::</span>iterator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>iterator_category<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">());</span></span>
<span id="cb1-66"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p><a href="https://godbolt.org/z/q7YGG8oj5">Compiler Explorer</a></p>
<p>An iterator over a custom array-like sequence of elements would look like the following:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp number-lines code-with-copy"><code class="sourceCode cpp"><span id="cb2-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;iterator&gt;</span></span>
<span id="cb2-2"></span>
<span id="cb2-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">template</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb2-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> Iterator <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb2-5">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">using</span> iterator_category <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>forward_iterator_tag<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-6">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">using</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">value_type</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-7">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">using</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">difference_type</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>ptrdiff_t<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-8">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">using</span> pointer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*;</span></span>
<span id="cb2-9">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">using</span> reference <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;;</span></span>
<span id="cb2-10"></span>
<span id="cb2-11">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// ...rest of iterator implementation here</span></span>
<span id="cb2-12"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span></code></pre></div>
<p>This requires you to write a lot of boiler-plate code. While tagging works, it puts an extra-burden on the developer.</p>
</section>
<section id="modern-c-iterators" class="level1">
<h1>Modern C++ iterators</h1>
<p>C++20 has a language feature called <a href="https://quantdev.blog/posts/c++20-concepts/index.html">concepts</a> - a set of named constaints that a type should satisfy. So, we can now implement iterators based on their behavior, rather than their <em>identity</em>. This is often referred to as <strong>duck typing</strong>: the idea that <em>if an entity looks like a duck and quacks like a duck, it must be a duck.</em></p>
<p>A new system of iterators based on concepts has been introduced.</p>
<ul>
<li><a href="https://en.cppreference.com/w/cpp/iterator/input_iterator"><code>std::input_iterator</code></a></li>
<li><a href="https://en.cppreference.com/w/cpp/iterator/output_iterator"><code>std::output_iterator</code></a></li>
<li><a href="https://en.cppreference.com/w/cpp/iterator/forward_iterator"><code>std::forward_iterator</code></a></li>
<li><a href="https://en.cppreference.com/w/cpp/iterator/bidirectional_iterator"><code>std::birdirectional_iterator</code></a></li>
<li><a href="https://en.cppreference.com/w/cpp/iterator/random_access_iterator"><code>std::random_access_iterator</code></a></li>
<li><a href="https://en.cppreference.com/w/cpp/iterator/contiguous_iterator"><code>std::contiguous_iterator</code></a></li>
</ul>
<p>Before we deep-dive into these iterator concepts, let’s understand <a href="https://en.cppreference.com/w/cpp/iterator/sentinel_for"><code>std::sentinel_for</code></a> concept.</p>
<p>A sentinel signals the end of a sequence of values. Prior to C++20, when traversing a collection, the way you’d check if you’ve hit the end of the collection was to compare your current iterator with an <code>end()</code> iterator.</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp number-lines code-with-copy"><code class="sourceCode cpp"><span id="cb3-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include</span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;vector&gt;</span></span>
<span id="cb3-2"></span>
<span id="cb3-3"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> main<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(){</span></span>
<span id="cb3-4">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>vector<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">double</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> v<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">4.0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">5.0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb3-5"></span>
<span id="cb3-6">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Traverse a std::vector</span></span>
<span id="cb3-7">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">auto</span> it <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>v<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>begin<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()};</span> it<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span>v<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>end<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++</span>it<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">){</span></span>
<span id="cb3-8">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>cout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> &lt;&lt;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>it <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-9">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb3-10"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p>Usually, this end iterator was just a case of your normal iterator that had some internal state identifying it as one past the last element of the container.</p>
<p>Beginning C++20, you can actually use any type as a sentinel for an iterator so long as the type satisfies the <code>std::sentinel_for</code> concept. <code>std::sentinel_for</code> concept requires</p>
<section id="stdinput_or_output_iterator" class="level2">
<h2 class="anchored" data-anchor-id="stdinput_or_output_iterator"><code>std::input_or_output_iterator</code></h2>
<p>The <code>input_or_output_iterator</code> is the basis of the iterator concept taxonomy. It only requires that an iterator type <code>It</code> supports the operations for dereferencing and incrementing the iterator.</p>
</section>
<section id="stdoutput_iterator" class="level2">
<h2 class="anchored" data-anchor-id="stdoutput_iterator"><code>std::output_iterator</code></h2>
<p><code>std::output_iterator</code> concept models the idea of a write-only iterator. E.g. such an iterator can be used to write to the standard output stream. Hence, they can only be dereferenced on the left-hand side of an assignment operator.</p>
<p>Since, they are single pass, we don’t even need to implement an equality comparison operator, because they don’t have an end iterator or sentinel value to compare against.</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp number-lines code-with-copy"><code class="sourceCode cpp"><span id="cb4-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;cstddef&gt;</span></span>
<span id="cb4-2"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;iterator&gt;</span></span>
<span id="cb4-3"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;concepts&gt;</span></span>
<span id="cb4-4"></span>
<span id="cb4-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">template</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">typename</span> T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb4-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> SimpleOutputIterator <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb4-7">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">using</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">difference_type</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>ptrdiff_t<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-8">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">using</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">value_type</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-9">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">using</span> pointer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*;</span></span>
<span id="cb4-10"></span>
<span id="cb4-11">    pointer <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_buffer_ptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-12"></span>
<span id="cb4-13">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Default constructor</span></span>
<span id="cb4-14">    SimpleOutputIterator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">default</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-15"></span>
<span id="cb4-16">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Constructor</span></span>
<span id="cb4-17">    SimpleOutputIterator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>pointer start<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb4-18">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_buffer_ptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>start<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span></span>
<span id="cb4-19"></span>
<span id="cb4-20">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Dereference operator</span></span>
<span id="cb4-21">    T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">operator</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb4-22">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_buffer_ptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-23">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb4-24"></span>
<span id="cb4-25">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Pre-increment</span></span>
<span id="cb4-26">    SimpleOutputIterator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">operator</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb4-27">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_buffer_ptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-28">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(*</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">this</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb4-29">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb4-30"></span>
<span id="cb4-31">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Post-increment</span></span>
<span id="cb4-32">    SimpleOutputIterator <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">operator</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb4-33">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">auto</span> tmp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">this</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-34">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++(*</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">this</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb4-35">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> tmp<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-36">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb4-37"></span>
<span id="cb4-38"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb4-39"></span>
<span id="cb4-40"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">static_assert</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>output_iterator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>SimpleOutputIterator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;);</span></span>
<span id="cb4-41"></span>
<span id="cb4-42"></span>
<span id="cb4-43"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> main<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(){</span></span>
<span id="cb4-44">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-45"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p><a href="https://godbolt.org/z/nEEh35q45">Compiler Explorer</a></p>
</section>
<section id="stdinput_iterator" class="level2">
<h2 class="anchored" data-anchor-id="stdinput_iterator"><code>std::input_iterator</code></h2>
<p><code>std::input_iterator</code> concept models the idea of a read-only iterator. Such an iterator, for example, can be used read packets data from a network socket.</p>
<p>Input iterators are also single-pass, because once you’ve read a byte of data from a network socket, you can’t read it again. They must also be comparable to some sentinel value such as <code>EOF</code>, <code>\0</code>, to signal the end of data etc.</p>
<p>However, the equality comparison operator <code>bool operator==(It, Sen)</code> is only used by the algorithm operating on the container, and therefore it’s the responsibility of the algorithm writer to supply an implementation of <code>bool operator==(It, Sen)</code>. This definition is not required in the container implementation.</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp number-lines code-with-copy"><code class="sourceCode cpp"><span id="cb5-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;cstddef&gt;</span></span>
<span id="cb5-2"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;iterator&gt;</span></span>
<span id="cb5-3"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;concepts&gt;</span></span>
<span id="cb5-4"></span>
<span id="cb5-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">template</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">typename</span> T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb5-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> SimpleInputIterator <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb5-7">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">using</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">difference_type</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>ptrdiff_t<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb5-8">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">using</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">value_type</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb5-9">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">using</span> pointer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*;</span></span>
<span id="cb5-10">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">using</span> reference <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;;</span></span>
<span id="cb5-11"></span>
<span id="cb5-12">    pointer <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_socket_fd</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb5-13"></span>
<span id="cb5-14">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Default constructor</span></span>
<span id="cb5-15">    SimpleInputIterator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">default</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb5-16"></span>
<span id="cb5-17">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Constructor</span></span>
<span id="cb5-18">    SimpleInputIterator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>pointer start<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb5-19">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_socket_fd</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>start<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span></span>
<span id="cb5-20"></span>
<span id="cb5-21">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Dereference operator</span></span>
<span id="cb5-22">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">operator</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*()</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb5-23">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_socket_fd</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb5-24">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb5-25"></span>
<span id="cb5-26">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Pre-increment</span></span>
<span id="cb5-27">    SimpleInputIterator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">operator</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb5-28">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_socket_fd</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb5-29">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(*</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">this</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb5-30">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb5-31"></span>
<span id="cb5-32">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Post-increment</span></span>
<span id="cb5-33">    SimpleInputIterator <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">operator</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb5-34">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">auto</span> tmp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">this</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb5-35">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++(*</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">this</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb5-36">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> tmp<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb5-37">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb5-38"></span>
<span id="cb5-39"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb5-40"></span>
<span id="cb5-41"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">static_assert</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>input_iterator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>SimpleInputIterator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;);</span></span>
<span id="cb5-42"></span>
<span id="cb5-43"></span>
<span id="cb5-44"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> main<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(){</span></span>
<span id="cb5-45">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb5-46"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p><a href="https://godbolt.org/z/4ocGnaaPM">Compiler Explorer</a></p>
</section>
<section id="stdforward_iterator" class="level2">
<h2 class="anchored" data-anchor-id="stdforward_iterator"><code>std::forward_iterator</code></h2>
<p><code>std::forward_iterator</code> requires that the iterator type be an input (read-only) iterator and also be <a href="https://en.cppreference.com/w/cpp/iterator/incrementable">std::incrementable</a>.</p>
<p><code>std::input_iterator</code> only requires the iterator be <code>std::weakly_incrementable</code>. So while it supports the increment <code>operator++()</code>, if <code>i</code> and <code>j</code> are two instances of the iterator type <code>It</code>, <code>i == j</code> does not imply <code>++i == ++j</code>. That is, algorithms on weakly-incrementable types must be single-pass algorithms.</p>
<p><code>std::incrementable</code> concept informally means that <code>i == j</code> <img src="https://latex.codecogs.com/png.latex?%5Cimplies"> <code>++i == ++j</code>. Algorithms on incrementable types are multi-pass algorithms.</p>
<p>You might use an iterator satisfying <code>std::forward_iterator</code> concept to traverse through a <code>std::forward_list</code> (a singly linked-list).</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp number-lines code-with-copy"><code class="sourceCode cpp"><span id="cb6-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;cstddef&gt;</span></span>
<span id="cb6-2"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;iterator&gt;</span></span>
<span id="cb6-3"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;concepts&gt;</span></span>
<span id="cb6-4"></span>
<span id="cb6-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">template</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">typename</span> T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb6-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> list_node <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb6-7">    T <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_data</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb6-8">    list_node<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_next</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb6-9"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb6-10"></span>
<span id="cb6-11"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">template</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">typename</span> T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb6-12"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> SimpleForwardIterator <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb6-13">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">using</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">difference_type</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>ptrdiff_t<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb6-14">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">using</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">value_type</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// The value type is T, not list_node&lt;T&gt;</span></span>
<span id="cb6-15">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">using</span> pointer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*;</span></span>
<span id="cb6-16">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">using</span> reference <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;;</span></span>
<span id="cb6-17"></span>
<span id="cb6-18">    list_node<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;*</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_node_ptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb6-19"></span>
<span id="cb6-20">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Default constructor</span></span>
<span id="cb6-21">    SimpleForwardIterator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">default</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb6-22"></span>
<span id="cb6-23">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Constructor</span></span>
<span id="cb6-24">    SimpleForwardIterator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>list_node<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;*</span> start<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb6-25">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_node_ptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>start<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span></span>
<span id="cb6-26"></span>
<span id="cb6-27">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Dereference operator</span></span>
<span id="cb6-28">    reference <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">operator</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*()</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb6-29">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_node_ptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_data</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Return the data stored in the node</span></span>
<span id="cb6-30">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb6-31"></span>
<span id="cb6-32">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Pre-increment</span></span>
<span id="cb6-33">    SimpleForwardIterator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">operator</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb6-34">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_node_ptr</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_node_ptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_next</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb6-35">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">this</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb6-36">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb6-37"></span>
<span id="cb6-38">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Post-increment</span></span>
<span id="cb6-39">    SimpleForwardIterator <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">operator</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb6-40">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">auto</span> tmp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">this</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb6-41">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++(*</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">this</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb6-42">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> tmp<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb6-43">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb6-44"></span>
<span id="cb6-45">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Equality comparison</span></span>
<span id="cb6-46">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">bool</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">operator</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==(</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> SimpleForwardIterator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> other<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb6-47">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_node_ptr</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> other<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_node_ptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb6-48">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb6-49"></span>
<span id="cb6-50">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Inequality comparison</span></span>
<span id="cb6-51">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">bool</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">operator</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=(</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> SimpleForwardIterator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> other<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb6-52">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!(*</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">this</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> other<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb6-53">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb6-54"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb6-55"></span>
<span id="cb6-56"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">static_assert</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>forward_iterator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>SimpleForwardIterator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;);</span></span>
<span id="cb6-57"></span>
<span id="cb6-58"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> main<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb6-59">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb6-60"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p><a href="https://godbolt.org/z/edEr4oedn">Compiler Explorer</a></p>
</section>
<section id="stdbidirectional_iterator" class="level2">
<h2 class="anchored" data-anchor-id="stdbidirectional_iterator"><code>std::bidirectional_iterator</code></h2>
<p>A <code>std::list</code> is a doubly linked that supports both traversals in the forward as well as reverse direction. When we want to be able to move forward and backwards across our collection, we must implement an iterator satisfying <code>std::bidirectional_iterator</code> concept.</p>
<p>You need to implement pre-increment, post-increment, pre-decrement and post-decrement operations.</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp number-lines code-with-copy"><code class="sourceCode cpp"><span id="cb7-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;cstddef&gt;</span></span>
<span id="cb7-2"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;iterator&gt;</span></span>
<span id="cb7-3"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;concepts&gt;</span></span>
<span id="cb7-4"></span>
<span id="cb7-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">template</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">typename</span> T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb7-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> list_node <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb7-7">    T <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_data</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb7-8">    list_node<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_next</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb7-9">    list_node<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_prev</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb7-10"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb7-11"></span>
<span id="cb7-12"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">template</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">typename</span> T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb7-13"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> SimpleBidirectionalIterator <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb7-14">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">using</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">difference_type</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>ptrdiff_t<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb7-15">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">using</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">value_type</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// The value type is T, not list_node&lt;T&gt;</span></span>
<span id="cb7-16">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">using</span> pointer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*;</span></span>
<span id="cb7-17">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">using</span> reference <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;;</span></span>
<span id="cb7-18"></span>
<span id="cb7-19">    list_node<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;*</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_node_ptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb7-20"></span>
<span id="cb7-21">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Default constructor</span></span>
<span id="cb7-22">    SimpleBidirectionalIterator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">default</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb7-23"></span>
<span id="cb7-24">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Constructor</span></span>
<span id="cb7-25">    SimpleBidirectionalIterator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>list_node<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;*</span> start<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb7-26">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_node_ptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>start<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span></span>
<span id="cb7-27"></span>
<span id="cb7-28">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Dereference operator</span></span>
<span id="cb7-29">    reference <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">operator</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*()</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb7-30">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_node_ptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_data</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Return the data stored in the node</span></span>
<span id="cb7-31">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb7-32"></span>
<span id="cb7-33">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Pre-increment</span></span>
<span id="cb7-34">    SimpleBidirectionalIterator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">operator</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb7-35">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_node_ptr</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_node_ptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_next</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb7-36">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">this</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb7-37">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb7-38"></span>
<span id="cb7-39">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Post-increment</span></span>
<span id="cb7-40">    SimpleBidirectionalIterator <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">operator</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb7-41">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">auto</span> tmp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">this</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb7-42">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++(*</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">this</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb7-43">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> tmp<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb7-44">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb7-45"></span>
<span id="cb7-46">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Pre-decrement</span></span>
<span id="cb7-47">    SimpleBidirectionalIterator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">operator</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">--(){</span></span>
<span id="cb7-48">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_node_ptr</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_node_ptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_prev</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb7-49">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">this</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb7-50">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb7-51"></span>
<span id="cb7-52">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Post-decrement</span></span>
<span id="cb7-53">    SimpleBidirectionalIterator <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">operator</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">--(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">){</span></span>
<span id="cb7-54">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">auto</span> tmp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">this</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb7-55">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">--(*</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">this</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb7-56">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> tmp<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb7-57">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb7-58"></span>
<span id="cb7-59">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Equality comparison</span></span>
<span id="cb7-60">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">bool</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">operator</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==(</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> SimpleBidirectionalIterator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> other<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb7-61">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_node_ptr</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> other<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_node_ptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb7-62">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb7-63"></span>
<span id="cb7-64">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Inequality comparison</span></span>
<span id="cb7-65">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">bool</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">operator</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=(</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> SimpleBidirectionalIterator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> other<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb7-66">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!(*</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">this</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> other<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb7-67">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb7-68"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb7-69"></span>
<span id="cb7-70"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">static_assert</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>bidirectional_iterator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>SimpleBidirectionalIterator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;);</span></span>
<span id="cb7-71"></span>
<span id="cb7-72"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> main<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb7-73">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb7-74"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p><a href="https://godbolt.org/z/o4cY68zse">Compiler Explorer</a></p>
</section>
<section id="stdrandom_access_iterator" class="level2">
<h2 class="anchored" data-anchor-id="stdrandom_access_iterator"><code>std::random_access_iterator</code></h2>
<p>Containers such as <code>std::vector&lt;T&gt;</code> and <code>std::array&lt;T,N&gt;</code> are a collection of elements that are stored contiguously in memory. Hence, the element at index <code>i</code> can be accessed in <img src="https://latex.codecogs.com/png.latex?O(1)"> constant-time.</p>
<p>What if I want to code up an iterator for jumping around the collection? Such an iterator must satisfy the <code>std::random_access_iterator</code> concept. The <code>std::random_access_iterator</code> concept requires that advancement with <code>+=</code>, <code>-=</code>, <code>+</code> and <code>-</code>, computation of distance between two elements and element access using the indexing operator <code>[]</code> be constant-time operations.</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp number-lines code-with-copy"><code class="sourceCode cpp"><span id="cb8-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;cstddef&gt;</span></span>
<span id="cb8-2"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;iterator&gt;</span></span>
<span id="cb8-3"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;concepts&gt;</span></span>
<span id="cb8-4"></span>
<span id="cb8-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">template</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">typename</span> T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb8-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> SimpleRandomAccessIterator <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb8-7">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">using</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">difference_type</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>ptrdiff_t<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb8-8">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">using</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">value_type</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb8-9">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">using</span> pointer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*;</span></span>
<span id="cb8-10">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">using</span> reference <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;;</span></span>
<span id="cb8-11"></span>
<span id="cb8-12">    T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_raw_data_ptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb8-13"></span>
<span id="cb8-14">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Default constructor</span></span>
<span id="cb8-15">    SimpleRandomAccessIterator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">default</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb8-16"></span>
<span id="cb8-17">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Constructor</span></span>
<span id="cb8-18">    SimpleRandomAccessIterator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> start<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb8-19">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_raw_data_ptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>start<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span></span>
<span id="cb8-20"></span>
<span id="cb8-21">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Dereference operator</span></span>
<span id="cb8-22">    reference <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">operator</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*()</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb8-23">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_raw_data_ptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb8-24">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb8-25"></span>
<span id="cb8-26">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Pre-increment</span></span>
<span id="cb8-27">    SimpleRandomAccessIterator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">operator</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb8-28">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_raw_data_ptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb8-29">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">this</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb8-30">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb8-31"></span>
<span id="cb8-32">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Post-increment</span></span>
<span id="cb8-33">    SimpleRandomAccessIterator <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">operator</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb8-34">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">auto</span> tmp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">this</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb8-35">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++(*</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">this</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb8-36">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> tmp<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb8-37">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb8-38"></span>
<span id="cb8-39">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Pre-decrement</span></span>
<span id="cb8-40">    SimpleRandomAccessIterator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">operator</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">--()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb8-41">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">--</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_raw_data_ptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb8-42">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">this</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb8-43">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb8-44"></span>
<span id="cb8-45">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Post-decrement</span></span>
<span id="cb8-46">    SimpleRandomAccessIterator <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">operator</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">--(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb8-47">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">auto</span> tmp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">this</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb8-48">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">--(*</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">this</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb8-49">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> tmp<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb8-50">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb8-51"></span>
<span id="cb8-52">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Array subscript operator</span></span>
<span id="cb8-53">    reference <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">operator</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[](</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">difference_type</span> n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb8-54">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_raw_data_ptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb8-55">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb8-56"></span>
<span id="cb8-57">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Compound addition</span></span>
<span id="cb8-58">    SimpleRandomAccessIterator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">operator</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">difference_type</span> n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb8-59">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_raw_data_ptr</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb8-60">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">this</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb8-61">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb8-62"></span>
<span id="cb8-63">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Compound subtraction</span></span>
<span id="cb8-64">    SimpleRandomAccessIterator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">operator</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-=(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">difference_type</span> n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb8-65">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_raw_data_ptr</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-=</span> n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb8-66">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">this</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb8-67">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb8-68"></span>
<span id="cb8-69">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Addition</span></span>
<span id="cb8-70">    SimpleRandomAccessIterator <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">operator</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">difference_type</span> n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb8-71">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> SimpleRandomAccessIterator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_raw_data_ptr</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb8-72">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb8-73"></span>
<span id="cb8-74">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Subtraction</span></span>
<span id="cb8-75">    SimpleRandomAccessIterator <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">operator</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">difference_type</span> n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb8-76">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> SimpleRandomAccessIterator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_raw_data_ptr</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb8-77">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb8-78"></span>
<span id="cb8-79">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Distance between iterators</span></span>
<span id="cb8-80">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">difference_type</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">operator</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-(</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> SimpleRandomAccessIterator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> other<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb8-81">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_raw_data_ptr</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> other<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_raw_data_ptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb8-82">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb8-83"></span>
<span id="cb8-84">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Equality comparison</span></span>
<span id="cb8-85">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">bool</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">operator</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==(</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> SimpleRandomAccessIterator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> other<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb8-86">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_raw_data_ptr</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> other<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_raw_data_ptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb8-87">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb8-88"></span>
<span id="cb8-89">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Inequality comparison</span></span>
<span id="cb8-90">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">bool</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">operator</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=(</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> SimpleRandomAccessIterator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> other<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb8-91">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!(*</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">this</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> other<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb8-92">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb8-93"></span>
<span id="cb8-94">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Relational operators</span></span>
<span id="cb8-95">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">bool</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">operator</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;(</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> SimpleRandomAccessIterator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> other<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb8-96">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_raw_data_ptr</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> other<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_raw_data_ptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb8-97">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb8-98"></span>
<span id="cb8-99">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">bool</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">operator</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=(</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> SimpleRandomAccessIterator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> other<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb8-100">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_raw_data_ptr</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> other<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_raw_data_ptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb8-101">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb8-102"></span>
<span id="cb8-103">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">bool</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">operator</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;(</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> SimpleRandomAccessIterator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> other<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb8-104">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_raw_data_ptr</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> other<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_raw_data_ptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb8-105">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb8-106"></span>
<span id="cb8-107">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">bool</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">operator</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=(</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> SimpleRandomAccessIterator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> other<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb8-108">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_raw_data_ptr</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> other<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_raw_data_ptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb8-109">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb8-110"></span>
<span id="cb8-111">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Friend operator+ for n + iterator</span></span>
<span id="cb8-112">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">template</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">typename</span> U<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb8-113">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">friend</span> SimpleRandomAccessIterator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>U<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">operator</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+(</span></span>
<span id="cb8-114">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">typename</span> SimpleRandomAccessIterator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>U<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;::</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">difference_type</span> n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb8-115">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> SimpleRandomAccessIterator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>U<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&amp;</span> it</span>
<span id="cb8-116">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb8-117">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> SimpleRandomAccessIterator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>U<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;(</span>it<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_raw_data_ptr</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb8-118">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb8-119"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb8-120"></span>
<span id="cb8-121"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">static_assert</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>random_access_iterator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>SimpleRandomAccessIterator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;);</span></span>
<span id="cb8-122"></span>
<span id="cb8-123"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> main<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb8-124">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb8-125"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p><a href="https://godbolt.org/z/8xYY4G75W">Compiler Explorer</a></p>
</section>
</section>


<div id="quarto-appendix" class="default"><section id="references" class="level1 appendix"><h2 class="anchored quarto-appendix-heading">References</h2><div class="quarto-appendix-contents">

<ul>
<li><a href="https://hitchcock.codes/blog/cpp-iterators-in-depth">cpp iterators in depth</a> by Braden Hitchcock.</li>
</ul>


</div></section></div> ]]></description>
  <category>C++</category>
  <guid>http://quantdev.blog/posts/custom-iterators/index.html</guid>
  <pubDate>Sun, 04 May 2025 23:00:00 GMT</pubDate>
  <media:content url="http://quantdev.blog/posts/custom-iterators/cpp.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>A note on make_shared&lt;T&gt;(Args&amp;&amp;...) and make_unique&lt;T&gt;(Args&amp;&amp;...)</title>
  <dc:creator>Quasar </dc:creator>
  <link>http://quantdev.blog/posts/make-shared-and-make-unique/index.html</link>
  <description><![CDATA[ 




<section id="a-note-on-make_uniquetargs..." class="level1">
<h1>A note on <code>make_unique&lt;T&gt;(Args&amp;&amp;...)</code></h1>
<p>Since C++14, <code>unique_ptr&lt;T&gt;</code> has been accpompanied by the factory function <code>make_unique&lt;T&gt;(Args&amp;&amp;...)</code> that perfectly forwards its arguments to the constructor of <code>T</code>. Why standard library implementors provide a separate factory function <code>make_unique&lt;T&gt;(Args&amp;&amp;...)</code>, when the constructor <code>unique_ptr&lt;T&gt;(T*)</code> does the same job?</p>
<p><code>std::unique_ptr&lt;T&gt;</code> models ownership of the resource semantics. Calling <code>unique_ptr&lt;T&gt;(T*)</code> makes the client code responsible for supplying a pre-existing <code>T</code> object whose address is passed as an argument.</p>
<p>Consider the following code snippet:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp number-lines code-with-copy"><code class="sourceCode cpp"><span id="cb1-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include</span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;iostream&gt;</span></span>
<span id="cb1-2"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include</span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;memory&gt;</span></span>
<span id="cb1-3"></span>
<span id="cb1-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">template</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">typename</span> T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb1-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> pair_allocator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb1-6">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb1-7">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>unique_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> p1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-8">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>unique_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> p2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-9"></span>
<span id="cb1-10">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb1-11">    pair_allocator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">default</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-12">    pair_allocator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>T x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> T y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb1-13">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> p1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">new</span> T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">))</span></span>
<span id="cb1-14">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> p2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">new</span> T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">))</span></span>
<span id="cb1-15">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span></span>
<span id="cb1-16"></span>
<span id="cb1-17">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>pair_allocator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">default</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-18"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span></code></pre></div>
<p>We know that, the member subobjects of a C++ object are constructed in the order of their declaration. So, <code>p1</code> is constructed before <code>p2</code>. Also, the allocation and construction operation <code>new T(x)</code> precedes the construction of <code>p1</code>. <code>new T(y)</code> precedes the construction of <code>p2</code>.</p>
<p>Denoting <img src="https://latex.codecogs.com/png.latex?A:="> <code>new T(x)</code>, <img src="https://latex.codecogs.com/png.latex?B:="> Construction of <code>p1</code>, <img src="https://latex.codecogs.com/png.latex?C:="> <code>new T(y)</code>, <img src="https://latex.codecogs.com/png.latex?D:="> Construction of <code>p2</code>.</p>
<p>If we see the rules laid out above, we could have the operations in the following order: <img src="https://latex.codecogs.com/png.latex?A%20%5Crightarrow%20B%20%5Crightarrow%20C%20%5Crightarrow%20D">, but we could also have <img src="https://latex.codecogs.com/png.latex?A%20%5Crightarrow%20C%20%5Crightarrow%20B%20%5Crightarrow%20D"> or <img src="https://latex.codecogs.com/png.latex?C%20%5Crightarrow%20A%20%5Crightarrow%20B%20%5Crightarrow%20D">, in which case the two calls to <code>new T(...)</code> occur prior to the construction of <code>p1</code> and <code>p2</code>. If this happens, then an exception thrown by the second call to <code>new T(...)</code> would lead to a memory leak, because we fail to release the memory allocated by the first call to <code>new T()</code>.</p>
<p>The factory function <code>make_unique&lt;T&gt;(Args&amp;&amp;...)</code> is a wrapper over the operations <code>new T()</code> and <code>unique__ptr&lt;T&gt;()</code>, and so if the second call to <code>new T()</code> fails, the object <code>p1</code> goes out of scope, its destructor <code>~unique_ptr&lt;T&gt;()</code> in turn calls operator <code>delete T</code>, destroying the <code>T</code> object and releasing the memory held by <code>T</code>.</p>
<p>If we modify the above snippet as:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp number-lines code-with-copy"><code class="sourceCode cpp"><span id="cb2-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include</span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;iostream&gt;</span></span>
<span id="cb2-2"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include</span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;memory&gt;</span></span>
<span id="cb2-3"></span>
<span id="cb2-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">template</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">typename</span> T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb2-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> pair_allocator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb2-6">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb2-7">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>unique_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> p1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-8">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>unique_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> p2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-9"></span>
<span id="cb2-10">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb2-11">    pair_allocator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">default</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-12">    pair_allocator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>T x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> T y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb2-13">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> p1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>make_unique<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;(</span>x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">))</span></span>
<span id="cb2-14">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> p2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>make_unique<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;(</span>y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">))</span></span>
<span id="cb2-15">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span></span>
<span id="cb2-16"></span>
<span id="cb2-17">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>pair_allocator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">default</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-18"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span></code></pre></div>
<p>In this instance, the client code will never find itself with <em>floating results from calls to <code>new</code></em>. <code>make_unique&lt;T&gt;</code> is therefore a security feature that prevents client code being exposed to ownerless resources.</p>
</section>
<section id="a-note-on-make_sharedtargs..." class="level1">
<h1>A note on <code>make_shared&lt;T&gt;(Args&amp;&amp;...)</code></h1>
<p>In modern C++, it is recommended practice to replace this:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp number-lines code-with-copy"><code class="sourceCode cpp"><span id="cb3-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>shared_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span></span>
<span id="cb3-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">new</span> T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/* ... constructor args ... */</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb3-3"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span></code></pre></div>
<p>with</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp number-lines code-with-copy"><code class="sourceCode cpp"><span id="cb4-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>shared_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>make_shared<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;(</span> </span>
<span id="cb4-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/* ... constructor args ... */</span></span>
<span id="cb4-3"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span></code></pre></div>
<p>One might wonder, why this is recommended practice? To understand why the factory function <code>make_shared&lt;T&gt;(/* ... ctor args ...*/)</code> is preferred to the constructor <code>shared_ptr&lt;T&gt;( new T( /*... ctor args ...*/) )</code>, we need to realize that with the <code>shared_ptr&lt;T&gt;(T*)</code> constructor, the client code is reponsible for the construction of the <code>T</code> object (pointee), and is then given to <code>shared_ptr&lt;T&gt;</code> under construction, which takes ownership of the pointer and allocates a shared counter <strong>separately</strong>. So, there are two separate allocations (the <code>T</code> object and the counter), probably on different cache lines.</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>The cache memory usually keeps 64-byte lines of memory. A cache line is also the smallest fundamental unit of data transfer between the CPU cache and the main memory. On most architectures, a cache line is 64 bytes or 128 bytes.</p>
</div>
</div>
<p>Now, if we go through <code>make_shared&lt;T&gt;()</code>, this factory function is responsible for allocating both the <code>T</code> object and the counter, perfectly forwarding the constructor arguments received by the function to the constructor of <code>T</code>. Since, the same function performs both allocations, it can fuse them into a single allocation of a memory block that contains both the <code>T</code> object and the shared counter, <em>putting them both on the same cache line</em>. This can lead to enhanced performance characteristics, if a single thread tries to read from both the pointers (<code>T*</code> and the counter) in a short span of time.</p>
<p>In most libraries, the factory function <code>make_shared&lt;T&gt;</code> is implemented as:</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp number-lines code-with-copy"><code class="sourceCode cpp"><span id="cb5-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">template</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">typename</span> T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">typename</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...</span> Args<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb5-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>shared_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> make_shared<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>Args<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;...</span> args<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">){</span></span>
<span id="cb5-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>shared_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span></span>
<span id="cb5-4">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">new</span> T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>forward<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;(</span>args<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)...)</span></span>
<span id="cb5-5">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb5-6"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>


</section>

 ]]></description>
  <category>C++</category>
  <guid>http://quantdev.blog/posts/make-shared-and-make-unique/index.html</guid>
  <pubDate>Sat, 03 May 2025 23:00:00 GMT</pubDate>
  <media:content url="http://quantdev.blog/posts/make-shared-and-make-unique/cpp.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>unique_ptr - A custom implementation</title>
  <dc:creator>Quasar </dc:creator>
  <link>http://quantdev.blog/posts/unique_ptr/index.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>In this post, I try to write a simple homegrown version of <code>std::unique_ptr&lt;T&gt;</code>. This post is partly inspired by the fantastic book <a href="https://www.amazon.com/Memory-Management-leaner-memory-management-techniques/dp/1805129805">C++ Memory Management</a> by <em>Patrice Roy</em>. Tghe toy examples in this book are very instructive and I highly reckon you order a copy. Our goal is just to build intuition for the kind of code required to write such a type, and not to try and replace the standard library facilities.</p>
<p>The <code>std::unique_ptr&lt;T&gt;</code> smart pointer type models unqiue(sole) ownership of the resource semantics.</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp number-lines code-with-copy"><code class="sourceCode cpp"><span id="cb1-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> X<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{};</span></span>
<span id="cb1-2"></span>
<span id="cb1-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>unique_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>X<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> p1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>make_unique<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>X<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;();</span>  </span>
<span id="cb1-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//std::unique_ptr&lt;X&gt; p2(p1);      // Error when calling copy constructor, </span></span>
<span id="cb1-5">                                  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// p1 is the exclusive owner</span></span></code></pre></div>
<p><code>std::unique_ptr</code> enforces exclusive ownership using the fact, that it is not <em>copy-constructible</em> or <em>copy-assignable</em>. Note however, that it doesn’t prevent you from writing deliberately hostile code. The below code is compiles perfectly well and is valid C++.</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp number-lines code-with-copy"><code class="sourceCode cpp"><span id="cb2-1"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">new</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb2-2"></span>
<span id="cb2-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>unique_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> p1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span>  </span>
<span id="cb2-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>unique_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> p2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span>      </span></code></pre></div>
<p>The copy constructor and the copy assignment operator of <code>std::unique_ptr&lt;T&gt;</code> are marked <code>delete</code>. It is however, <em>move constructible</em> and <em>move-assignable</em>.</p>
</section>
<section id="basic-functionalities-to-expect-out-of-stdunique_ptrt" class="level1">
<h1>Basic functionalities to expect out of <code>std::unique_ptr&lt;T&gt;</code></h1>
<p>I skimmed through the documentation for <code>std::unique_ptr</code> on cppreference.com. A basic implementation of <code>unique_ptr</code> in less than 200 lines of code should pass the following unit tests:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp number-lines code-with-copy"><code class="sourceCode cpp"><span id="cb3-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;gtest/gtest.h&gt;</span></span>
<span id="cb3-2"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">"unique_ptr.h"</span></span>
<span id="cb3-3"></span>
<span id="cb3-4">TEST<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>UniquePtrTest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> CreateAndAccessTest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb3-5"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb3-6">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> raw_ptr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">new</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb3-7">    dev<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>unique_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> p1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>raw_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb3-8">    </span>
<span id="cb3-9">    EXPECT_EQ<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(*</span>p1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">true</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb3-10">    EXPECT_EQ<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>p1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>get<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(),</span> raw_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb3-11"></span>
<span id="cb3-12">    dev<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>unique_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> p2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">new</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">17</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb3-13">    EXPECT_EQ<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(*</span>p2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">17</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">true</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb3-14">    EXPECT_EQ<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>p2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>get<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">nullptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">true</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb3-15"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb3-16"></span>
<span id="cb3-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/* Move constructor - Transfer of ownership */</span></span>
<span id="cb3-18">TEST<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>UniquePtrTest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> MoveConstructorTest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb3-19"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb3-20">    dev<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>unique_ptr p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>dev<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>unique_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">new</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">17</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">))};</span></span>
<span id="cb3-21"></span>
<span id="cb3-22">    EXPECT_EQ<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(*</span>p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">17</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb3-23">    EXPECT_EQ<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">nullptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">true</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb3-24"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb3-25"></span>
<span id="cb3-26"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/* Move assignment */</span></span>
<span id="cb3-27">TEST<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>UniquePtrTest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> MoveAssignmentTest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb3-28"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb3-29">    dev<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>unique_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> p1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">new</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">));</span></span>
<span id="cb3-30">    p1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dev<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>unique_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">new</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">17</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">));</span></span>
<span id="cb3-31"></span>
<span id="cb3-32">    EXPECT_EQ<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>p1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">nullptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">true</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb3-33">    EXPECT_EQ<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(*</span>p1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">17</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">true</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb3-34"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb3-35"></span>
<span id="cb3-36"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Modifiers</span></span>
<span id="cb3-37"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/* release() : Returns the pointer to resource and releases ownership*/</span></span>
<span id="cb3-38">TEST<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>UniquePtrTest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> ReleaseTest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">){</span></span>
<span id="cb3-39">    dev<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>unique_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">double</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">new</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">double</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.14</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">));</span></span>
<span id="cb3-40">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">double</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> rawPtr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>release<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb3-41"></span>
<span id="cb3-42">    EXPECT_EQ<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>ptr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">nullptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">true</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb3-43">    EXPECT_EQ<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>rawPtr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">nullptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">true</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb3-44">    EXPECT_EQ<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(*</span>rawPtr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.14</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">true</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb3-45"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb3-46"></span>
<span id="cb3-47"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/* reset() :  replaces the managed object */</span></span>
<span id="cb3-48">TEST<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>UniquePtrTest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> ResetUniquePtr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb3-49">    dev<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>unique_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">new</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">));</span></span>
<span id="cb3-50">    ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>reset<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">new</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">));</span></span>
<span id="cb3-51">    EXPECT_EQ<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>ptr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">nullptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">true</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb3-52">    EXPECT_EQ<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(*</span>ptr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">true</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb3-53"></span>
<span id="cb3-54">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Self-reset test</span></span>
<span id="cb3-55">    ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>reset<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>get<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">());</span></span>
<span id="cb3-56"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb3-57"></span>
<span id="cb3-58"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/* swap() : swap the managed objects */</span></span>
<span id="cb3-59">TEST<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>UniquePtrTest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> SwapTest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">){</span></span>
<span id="cb3-60">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> first <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">new</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb3-61">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> second <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">new</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">17</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb3-62"></span>
<span id="cb3-63">    dev<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>unique_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> p1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>first<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb3-64">    dev<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>unique_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> p2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>second<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb3-65"></span>
<span id="cb3-66">    swap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>p1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> p2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb3-67"></span>
<span id="cb3-68">    EXPECT_EQ<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>p2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>get<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> first <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;</span> p1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>get<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> second<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">true</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb3-69">    EXPECT_EQ<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(((*</span>p1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">17</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">((*</span>p2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">),</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">true</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb3-70"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb3-71"></span>
<span id="cb3-72"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Observers</span></span>
<span id="cb3-73"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/* get() : Returns a pointer to the managed object or nullptr*/</span></span>
<span id="cb3-74">TEST<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>UniquePtrTest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> GetTest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">){</span></span>
<span id="cb3-75">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">double</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> resource <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">new</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">double</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.50</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb3-76">    dev<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>unique_ptr p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>resource<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb3-77"></span>
<span id="cb3-78">    EXPECT_EQ<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>get<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> resource<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">true</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb3-79">    EXPECT_EQ<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(*(</span>p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>get<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">())</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.50</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">true</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb3-80"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb3-81"></span>
<span id="cb3-82"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/* operator bool() : Checks whether *this owns an object*/</span></span>
<span id="cb3-83"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/*</span><span class="al" style="color: #AD0000;
background-color: null;
font-style: inherit;">TEST</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(UniquePtrTest, OperatorBoolTest){</span></span>
<span id="cb3-84"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    int* resource = new int(28);</span></span>
<span id="cb3-85"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    dev::unique_ptr&lt;int&gt; p1;</span></span>
<span id="cb3-86"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    dev::unique_ptr&lt;int&gt; p2(resource);</span></span>
<span id="cb3-87"></span>
<span id="cb3-88"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    EXPECT_EQ(p1, false);</span></span>
<span id="cb3-89"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    EXPECT_EQ(p2, true);</span></span>
<span id="cb3-90"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}*/</span></span>
<span id="cb3-91"></span>
<span id="cb3-92"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Pointer-like functions</span></span>
<span id="cb3-93">TEST<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>UniquePtrTest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> IndirectionOperatorTest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb3-94">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/* indirection operator* to dereference pointer to managed object,</span></span>
<span id="cb3-95"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">       member access operator -&gt; to call member function*/</span></span>
<span id="cb3-96">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb3-97">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> _n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-98"></span>
<span id="cb3-99">        X<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">default</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-100">        X<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> _n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span></span>
<span id="cb3-101">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>X<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">default</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-102">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> foo<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> _n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb3-103">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb3-104"></span>
<span id="cb3-105">    dev<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>unique_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>X<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">new</span> X<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">));</span></span>
<span id="cb3-106">    EXPECT_EQ<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">((*</span>ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">).</span>_n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">true</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb3-107">    EXPECT_EQ<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span>foo<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">true</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb3-108"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb3-109"></span>
<span id="cb3-110">TEST<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>UniquePtrTest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> PointerToArrayOfTConstructionAndAccess<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">){</span></span>
<span id="cb3-111">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/* Constructing unique_ptr&lt;T[]&gt; and access */</span></span>
<span id="cb3-112">    dev<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>unique_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[]&gt;</span> p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-113">    EXPECT_EQ<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">nullptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">true</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb3-114">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb3-115">        p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">new</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]{</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb3-116">        EXPECT_EQ<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">nullptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">true</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb3-117">        EXPECT_EQ<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(*</span>p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">true</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb3-118">        EXPECT_EQ<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">true</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb3-119">        p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>release<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb3-120">        EXPECT_EQ<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">nullptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">true</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb3-121">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb3-122"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="a-custom-implementation" class="level1">
<h1>A custom implementation</h1>
<p>Most of the code is self-evident. The special case, where the resource(pointee) is an array of elements of type <code>T</code>, we write a partial specialization of <code>unique_ptr&lt;T[],D&gt;</code>.</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp number-lines code-with-copy"><code class="sourceCode cpp"><span id="cb4-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include</span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;format&gt;</span></span>
<span id="cb4-2"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include</span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;concepts&gt;</span></span>
<span id="cb4-3"></span>
<span id="cb4-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">namespace</span> dev<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb4-5"></span>
<span id="cb4-6">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/* Default deleter - single object version */</span></span>
<span id="cb4-7">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">template</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">typename</span> T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb4-8">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> default_deleter<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb4-9">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">operator</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()(</span>T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> raw_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">){</span></span>
<span id="cb4-10">            <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">delete</span> raw_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-11">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb4-12">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb4-13"></span>
<span id="cb4-14">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/* Default deleter - pointee is an array of objects version */</span></span>
<span id="cb4-15">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">template</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">typename</span> T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb4-16">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> default_deleter<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[]&gt;{</span></span>
<span id="cb4-17">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">operator</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()(</span>T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> raw_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">){</span></span>
<span id="cb4-18">            <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">delete</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[]</span> raw_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-19">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb4-20">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb4-21"></span>
<span id="cb4-22">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/* Single object version */</span></span>
<span id="cb4-23">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">template</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">typename</span> T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">typename</span> D <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> default_deleter<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;</span></span>
<span id="cb4-24">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> unique_ptr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> D<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb4-25">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb4-26">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">using</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">deleter_type</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> D<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-27"></span>
<span id="cb4-28">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/* Default c'tor */</span></span>
<span id="cb4-29">        unique_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">default</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-30"></span>
<span id="cb4-31">        unique_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> unique_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">delete</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-32">        unique_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">operator</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=(</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> unique_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">delete</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-33"></span>
<span id="cb4-34">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/* Parameteric constructor */</span></span>
<span id="cb4-35">        unique_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_underlying_ptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb4-36">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span></span>
<span id="cb4-37"></span>
<span id="cb4-38">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/* Swap function */</span></span>
<span id="cb4-39">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> swap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>unique_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> other<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">noexcept</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb4-40">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>swap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_underlying_ptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> other<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_underlying_ptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb4-41">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb4-42"></span>
<span id="cb4-43">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/* Move constructor */</span></span>
<span id="cb4-44">        unique_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>unique_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;</span> other<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb4-45">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_underlying_ptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>move<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>other<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_underlying_ptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)}</span></span>
<span id="cb4-46">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span></span>
<span id="cb4-47"></span>
<span id="cb4-48">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/* Move assignment */</span></span>
<span id="cb4-49">        unique_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">operator</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=(</span>unique_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;</span> other<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">){</span></span>
<span id="cb4-50">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>swap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_underlying_ptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> other<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_underlying_ptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb4-51">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">this</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-52">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb4-53"></span>
<span id="cb4-54">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/* Destructor */</span></span>
<span id="cb4-55">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>unique_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(){</span></span>
<span id="cb4-56">            <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">deleter_type</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> deleter <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">static_cast</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">deleter_type</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*&gt;(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">this</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb4-57">            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(*</span>deleter<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_underlying_ptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb4-58">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb4-59"></span>
<span id="cb4-60">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Pointer-like functions</span></span>
<span id="cb4-61">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/* Dereferencing operator */</span></span>
<span id="cb4-62">        T <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">operator</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*(){</span></span>
<span id="cb4-63">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_underlying_ptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-64">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb4-65"></span>
<span id="cb4-66">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/* Indirection operator*/</span></span>
<span id="cb4-67">        T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">operator</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;(){</span></span>
<span id="cb4-68">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_underlying_ptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-69">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb4-70"></span>
<span id="cb4-71">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/* get() - get the raw underlying pointer*/</span></span>
<span id="cb4-72">        T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> get<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb4-73">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_underlying_ptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-74">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb4-75"></span>
<span id="cb4-76">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Modifiers</span></span>
<span id="cb4-77">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/* Release - returns a pointer to the managed object</span></span>
<span id="cb4-78"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           and releases the ownership*/</span></span>
<span id="cb4-79">        T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> release<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(){</span></span>
<span id="cb4-80">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>exchange<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_underlying_ptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">nullptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb4-81">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb4-82"></span>
<span id="cb4-83">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/* Reset - Replaces the managed object */</span></span>
<span id="cb4-84">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> reset<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> other<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">){</span></span>
<span id="cb4-85">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_underlying_ptr</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> other<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb4-86">            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb4-87">                <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">deleter_type</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> deleter <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">static_cast</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">deleter_type</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*&gt;(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">this</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb4-88">                <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(*</span>deleter<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_underlying_ptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb4-89">    </span>
<span id="cb4-90">                <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_underlying_ptr</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> other<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-91">            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb4-92">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb4-93"></span>
<span id="cb4-94">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> reset<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>nullptr_t<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">){</span></span>
<span id="cb4-95">            <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">deleter_type</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> deleter <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">static_cast</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">deleter_type</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*&gt;(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">this</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb4-96">            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(*</span>deleter<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_underlying_ptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb4-97">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_underlying_ptr</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">nullptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-98">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb4-99"></span>
<span id="cb4-100">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">explicit</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">operator</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">bool</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb4-101">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_underlying_ptr</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">nullptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb4-102">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb4-103"></span>
<span id="cb4-104">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">friend</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">bool</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">operator</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==(</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> unique_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> lhs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> unique_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> rhs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">){</span></span>
<span id="cb4-105">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>lhs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>get<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> rhs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>get<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">());</span></span>
<span id="cb4-106">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb4-107"></span>
<span id="cb4-108">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">friend</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">bool</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">operator</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==(</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> unique_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> lhs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>nullptr_t<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> </span>rhs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">){</span></span>
<span id="cb4-109">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>lhs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_underlying_ptr</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">nullptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb4-110">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb4-111"></span>
<span id="cb4-112">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">friend</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">bool</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">operator</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=(</span>unique_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> lhs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> unique_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> rhs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">){</span></span>
<span id="cb4-113">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!(</span>lhs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> rhs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb4-114">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb4-115"></span>
<span id="cb4-116">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">friend</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">bool</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">operator</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=(</span>unique_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> lhs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>nullptr_t<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">){</span></span>
<span id="cb4-117">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!(</span>lhs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">nullptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb4-118">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb4-119"></span>
<span id="cb4-120">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">friend</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> swap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>unique_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> lhs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> unique_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> rhs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">){</span></span>
<span id="cb4-121">            lhs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>swap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>rhs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb4-122">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb4-123"></span>
<span id="cb4-124">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb4-125">        T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_underlying_ptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">nullptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb4-126">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb4-127"></span>
<span id="cb4-128">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/* Array version*/</span></span>
<span id="cb4-129">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">template</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">typename</span> T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">typename</span> D<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb4-130">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> unique_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[],</span> D<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> D<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb4-131">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb4-132">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">using</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">deleter_type</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> D<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-133"></span>
<span id="cb4-134">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/* Default c'tor */</span></span>
<span id="cb4-135">        unique_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">default</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-136"></span>
<span id="cb4-137">        unique_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> unique_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">delete</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-138">        unique_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">operator</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=(</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> unique_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">delete</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-139"></span>
<span id="cb4-140">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/* Parameteric constructor */</span></span>
<span id="cb4-141">        unique_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_underlying_ptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb4-142">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span></span>
<span id="cb4-143"></span>
<span id="cb4-144">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/* Swap function */</span></span>
<span id="cb4-145">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> swap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>unique_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> other<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">noexcept</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb4-146">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>swap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_underlying_ptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> other<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_underlying_ptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb4-147">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb4-148"></span>
<span id="cb4-149">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/* Move constructor */</span></span>
<span id="cb4-150">        unique_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>unique_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;</span> other<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb4-151">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_underlying_ptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>exchange<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>other<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_underlying_ptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">nullptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)}</span></span>
<span id="cb4-152">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span></span>
<span id="cb4-153"></span>
<span id="cb4-154">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/* Move assignment */</span></span>
<span id="cb4-155">        unique_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">operator</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=(</span>unique_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;</span> other<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">){</span></span>
<span id="cb4-156">            unique_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>move<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>other<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)).</span>swap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(*</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">this</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb4-157">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">this</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-158">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb4-159"></span>
<span id="cb4-160">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/* Destructor */</span></span>
<span id="cb4-161">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>unique_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(){</span></span>
<span id="cb4-162">            <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">deleter_type</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> deleter <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">static_cast</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">deleter_type</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*&gt;(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">this</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb4-163">            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(*</span>deleter<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_underlying_ptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb4-164">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb4-165"></span>
<span id="cb4-166">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Pointer-like functions</span></span>
<span id="cb4-167">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/* Dereferencing operator */</span></span>
<span id="cb4-168">        T <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">operator</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*(){</span></span>
<span id="cb4-169">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_underlying_ptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-170">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb4-171"></span>
<span id="cb4-172">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/* Indirection operator*/</span></span>
<span id="cb4-173">        T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">operator</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;(){</span></span>
<span id="cb4-174">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_underlying_ptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-175">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb4-176"></span>
<span id="cb4-177">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/* IndexOf operator - provides indexed access </span></span>
<span id="cb4-178"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           to the managed array.*/</span></span>
<span id="cb4-179">        T <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">operator</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[](</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>size_t<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> </span>index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">){</span></span>
<span id="cb4-180">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_underlying_ptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb4-181">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb4-182"></span>
<span id="cb4-183">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/* get() - get the raw underlying pointer*/</span></span>
<span id="cb4-184">        T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> get<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb4-185">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_underlying_ptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-186">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb4-187"></span>
<span id="cb4-188">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Modifiers</span></span>
<span id="cb4-189">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/* Release - returns a pointer to the managed object</span></span>
<span id="cb4-190"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           and releases the ownership*/</span></span>
<span id="cb4-191">        T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> release<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(){</span></span>
<span id="cb4-192">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>exchange<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_underlying_ptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">nullptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb4-193">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb4-194"></span>
<span id="cb4-195">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/* Reset - Replaces the managed object */</span></span>
<span id="cb4-196">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> reset<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> other<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">){</span></span>
<span id="cb4-197">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_underlying_ptr</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> other<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb4-198">            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb4-199">                <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">deleter_type</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> deleter <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">static_cast</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">deleter_type</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*&gt;(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">this</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb4-200">                <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(*</span>deleter<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_underlying_ptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb4-201">    </span>
<span id="cb4-202">                <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_underlying_ptr</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> other<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-203">            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb4-204">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb4-205"></span>
<span id="cb4-206">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> reset<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>nullptr_t<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">){</span></span>
<span id="cb4-207">            <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">deleter_type</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> deleter <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">static_cast</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">deleter_type</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*&gt;(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">this</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb4-208">            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(*</span>deleter<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_underlying_ptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb4-209">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_underlying_ptr</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">nullptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-210">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb4-211"></span>
<span id="cb4-212">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">explicit</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">operator</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">bool</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb4-213">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_underlying_ptr</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">nullptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb4-214">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb4-215"></span>
<span id="cb4-216">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">friend</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">bool</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">operator</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==(</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> unique_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> lhs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> unique_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> rhs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">){</span></span>
<span id="cb4-217">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>lhs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>get<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> rhs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>get<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">());</span></span>
<span id="cb4-218">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb4-219"></span>
<span id="cb4-220">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">friend</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">bool</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">operator</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==(</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> unique_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> lhs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>nullptr_t<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> </span>rhs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">){</span></span>
<span id="cb4-221">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>lhs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_underlying_ptr</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">nullptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb4-222">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb4-223"></span>
<span id="cb4-224">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">friend</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">bool</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">operator</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=(</span>unique_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> lhs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> unique_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> rhs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">){</span></span>
<span id="cb4-225">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!(</span>lhs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> rhs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb4-226">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb4-227"></span>
<span id="cb4-228">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">friend</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">bool</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">operator</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=(</span>unique_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> lhs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>nullptr_t<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">){</span></span>
<span id="cb4-229">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!(</span>lhs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">nullptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb4-230">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb4-231"></span>
<span id="cb4-232">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">friend</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> swap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>unique_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> lhs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> unique_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> rhs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">){</span></span>
<span id="cb4-233">            lhs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>swap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>rhs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb4-234">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb4-235"></span>
<span id="cb4-236">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb4-237">        T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_underlying_ptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">nullptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb4-238">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb4-239"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p>You can play around the code files, build the project and run unit tests for this (naive) toy-implementation of <code>unique_ptr</code> by cloning my GitHub repo <a href="https://github.com/quasar-chunawala/interview_data_structures">github.com/quasar-chunawala/interview_data_structures</a>.</p>

</section>

<div id="quarto-appendix" class="default"><section id="references" class="level2 appendix"><h2 class="anchored quarto-appendix-heading">References</h2><div class="quarto-appendix-contents">

<ul>
<li><a href="https://www.amazon.com/Memory-Management-leaner-memory-management-techniques/dp/1805129805">C++ Memory Management</a> by <em>Patrice Roy</em>.</li>
</ul>


</div></section></div> ]]></description>
  <category>C++</category>
  <guid>http://quantdev.blog/posts/unique_ptr/index.html</guid>
  <pubDate>Sun, 20 Apr 2025 23:00:00 GMT</pubDate>
  <media:content url="http://quantdev.blog/posts/unique_ptr/cpp.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>The inner workings of the shared_ptr</title>
  <dc:creator>Quasar </dc:creator>
  <link>http://quantdev.blog/posts/shared_ptr/index.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p><code>shared_ptr&lt;T&gt;</code> is tricky to implement, since it is a wrapper over raw underlying pointer of type <code>T*</code> and a reference counter. This post is partly inspired by the fantastic book <a href="https://www.amazon.com/Memory-Management-leaner-memory-management-techniques/dp/1805129805">C++ Memory Management</a> by <em>Patrice Roy</em>. The toy examples in this book are very instructive and I highly reckon you order a copy.</p>
<p>If you follow the instructions in my <a href="https://github.com/quasar-chunawala/interview_data_structures">GitHub repo</a>, you should be able to build the source and run unit tests against my homegrown version of <code>shared_ptr&lt;T&gt;</code>.</p>
</section>
<section id="basic-functionalities-expected-out-of-a-shared_ptrt-implementation." class="level1">
<h1>Basic functionalities expected out of a <code>shared_ptr&lt;T&gt;</code> implementation.</h1>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp number-lines code-with-copy"><code class="sourceCode cpp"><span id="cb1-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;gtest/gtest.h&gt;</span></span>
<span id="cb1-2"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;thread&gt;</span></span>
<span id="cb1-3"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;atomic&gt;</span></span>
<span id="cb1-4"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">"shared_ptr.h"</span></span>
<span id="cb1-5"></span>
<span id="cb1-6">TEST<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>SharedPtrTest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> ParametrizedCTorTest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb1-7"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb1-8">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/* Contructor that takes T* */</span></span>
<span id="cb1-9">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> raw_ptr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">new</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb1-10">    dev<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>shared_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> p1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>raw_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb1-11">    </span>
<span id="cb1-12">    EXPECT_EQ<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(*</span>p1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">true</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb1-13">    EXPECT_EQ<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>p1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>get<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(),</span> raw_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb1-14"></span>
<span id="cb1-15">    dev<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>shared_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> p2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">new</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">17</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb1-16">    EXPECT_EQ<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(*</span>p2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">17</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">true</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb1-17">    EXPECT_EQ<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>p2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>get<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">nullptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">true</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb1-18"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb1-19"></span>
<span id="cb1-20">TEST<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>SharedPtrTest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> RefCountingTest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">){</span></span>
<span id="cb1-21">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> raw_ptr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">new</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb1-22">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb1-23">        dev<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>shared_ptr ptr1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> raw_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-24">        EXPECT_EQ<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>ptr1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>use_count<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">true</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb1-25">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb1-26">            dev<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>shared_ptr ptr2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ptr1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-27">            EXPECT_EQ<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>ptr1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>use_count<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">true</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb1-28">            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb1-29">                dev<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>shared_ptr ptr3 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ptr2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-30">                EXPECT_EQ<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>ptr1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>use_count<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">true</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb1-31">            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb1-32">            EXPECT_EQ<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>ptr1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>use_count<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">true</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb1-33">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb1-34">        EXPECT_EQ<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>ptr1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>use_count<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">true</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb1-35">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb1-36"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb1-37"></span>
<span id="cb1-38">TEST<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>SharedPtrTest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> MultithreadedConstructionAndDestructionTest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">){</span></span>
<span id="cb1-39">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">using</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">namespace</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>chrono_literals<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-40">    dev<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>shared_ptr ptr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">new</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb1-41">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>atomic<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">bool</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> go<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">false</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb1-42">    EXPECT_EQ<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>use_count<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">true</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb1-43"></span>
<span id="cb1-44">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>thread<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> </span>t1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">([&amp;]{</span></span>
<span id="cb1-45">        dev<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>shared_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> ptr1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-46">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">while</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(!</span>go<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>load<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">());</span></span>
<span id="cb1-47">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>cout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> &lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Ref Count = "</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>use_count<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb1-48">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>this_thread<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">::</span>sleep_for<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">s</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb1-49">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">});</span></span>
<span id="cb1-50"></span>
<span id="cb1-51">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>thread<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> </span>t2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">([&amp;]{</span></span>
<span id="cb1-52">        dev<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>shared_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> ptr2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-53">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">while</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(!</span>go<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>load<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">());</span></span>
<span id="cb1-54">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>cout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> &lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Ref Count = "</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>use_count<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb1-55">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>this_thread<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">::</span>sleep_for<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">s</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb1-56">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">});</span></span>
<span id="cb1-57"></span>
<span id="cb1-58">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>this_thread<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">::</span>sleep_for<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">s</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb1-59">    go<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>store<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">true</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb1-60">    t1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>join<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb1-61">    t2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>join<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb1-62">    EXPECT_EQ<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>use_count<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">true</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb1-63"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb1-64"></span>
<span id="cb1-65">TEST<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>SharedPtrTest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> CopyConstructorTest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">){</span></span>
<span id="cb1-66">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/* Copy constructor */</span></span>
<span id="cb1-67">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> raw_ptr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">new</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb1-68">    dev<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>shared_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> p1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>raw_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb1-69"></span>
<span id="cb1-70">    dev<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>shared_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> p2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> p1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-71">    EXPECT_EQ<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(*</span>p2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">true</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb1-72">    EXPECT_EQ<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>p2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>get<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(),</span> raw_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb1-73"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb1-74"></span>
<span id="cb1-75">TEST<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>SharedPtrTest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> MoveConstructorTest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">){</span></span>
<span id="cb1-76">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/* Move constructor*/</span></span>
<span id="cb1-77">    dev<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>shared_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> p1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">new</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">));</span></span>
<span id="cb1-78">    dev<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>shared_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> p2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>move<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>p1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb1-79">    dev<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>shared_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> p3 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>move<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>p2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb1-80">    EXPECT_EQ<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(*</span>p3 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">true</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb1-81"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb1-82"></span>
<span id="cb1-83">TEST<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>SharedPtrTest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> CopyAssignmentTest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">){</span></span>
<span id="cb1-84">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/* Copy Assignment */</span></span>
<span id="cb1-85">    dev<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>shared_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">double</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> p1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">new</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">double</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.71828</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">));</span></span>
<span id="cb1-86">    dev<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>shared_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">double</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> p2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">new</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">double</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.14159</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">));</span></span>
<span id="cb1-87"></span>
<span id="cb1-88">    EXPECT_EQ<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(*</span>p2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.14159</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">true</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb1-89">    p2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> p1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-90">    EXPECT_EQ<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>p2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>get<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> p1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>get<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(),</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">true</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb1-91">    EXPECT_EQ<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(*</span>p2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>p1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">true</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb1-92"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb1-93"></span>
<span id="cb1-94">TEST<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>SharedPtrTest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> MoveAssignmentTest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">){</span></span>
<span id="cb1-95">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/* Move Assignment */</span></span>
<span id="cb1-96">    dev<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>shared_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> p1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">new</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">));</span></span>
<span id="cb1-97">    dev<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>shared_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> p2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">new</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">));</span></span>
<span id="cb1-98">    p2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>move<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>p1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb1-99">    EXPECT_EQ<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>p2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>get<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">nullptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">true</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb1-100">    EXPECT_EQ<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(*</span>p2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">true</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb1-101"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb1-102"></span>
<span id="cb1-103"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/* reset() :  replaces the managed object */</span></span>
<span id="cb1-104">TEST<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>SharedPtrTest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> ResetSharedPtr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb1-105">    dev<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>shared_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">new</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">));</span></span>
<span id="cb1-106">    ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>reset<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">new</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">));</span></span>
<span id="cb1-107">    EXPECT_EQ<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>ptr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">nullptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">true</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb1-108">    EXPECT_EQ<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(*</span>ptr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">true</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb1-109"></span>
<span id="cb1-110">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Self-reset test</span></span>
<span id="cb1-111">    ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>reset<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>get<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">());</span></span>
<span id="cb1-112"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb1-113"></span>
<span id="cb1-114"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/* swap() : swap the managed objects */</span></span>
<span id="cb1-115">TEST<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>SharedPtrTest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> SwapTest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">){</span></span>
<span id="cb1-116">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> first <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">new</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb1-117">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> second <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">new</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">17</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb1-118"></span>
<span id="cb1-119">    dev<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>shared_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> p1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>first<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb1-120">    dev<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>shared_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> p2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>second<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb1-121"></span>
<span id="cb1-122">    swap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>p1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> p2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb1-123"></span>
<span id="cb1-124">    EXPECT_EQ<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>p2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>get<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> first <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;</span> p1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>get<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> second<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">true</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb1-125">    EXPECT_EQ<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(((*</span>p1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">17</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">((*</span>p2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">),</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">true</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb1-126"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb1-127"></span>
<span id="cb1-128"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Observers</span></span>
<span id="cb1-129"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/* get() : Returns a pointer to the </span></span>
<span id="cb1-130"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    managed object or nullptr*/</span></span>
<span id="cb1-131">TEST<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>SharedPtrTest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> GetTest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">){</span></span>
<span id="cb1-132">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">double</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> resource <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">new</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">double</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.50</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb1-133">    dev<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>shared_ptr p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>resource<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb1-134"></span>
<span id="cb1-135">    EXPECT_EQ<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>get<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> resource<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">true</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb1-136">    EXPECT_EQ<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(*(</span>p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>get<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">())</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.50</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">true</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb1-137"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb1-138"></span>
<span id="cb1-139"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Pointer-like functions</span></span>
<span id="cb1-140">TEST<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>SharedPtrTest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> IndirectionOperatorTest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb1-141">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/* indirection operator* to dereference pointer to </span></span>
<span id="cb1-142"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    managed object, member access operator -&gt; </span></span>
<span id="cb1-143"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    to call member function*/</span></span>
<span id="cb1-144">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb1-145">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> _n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-146"></span>
<span id="cb1-147">        X<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">default</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-148">        X<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> _n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span></span>
<span id="cb1-149">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>X<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">default</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-150">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> foo<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> _n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb1-151">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb1-152"></span>
<span id="cb1-153">    dev<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>shared_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>X<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">new</span> X<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">));</span></span>
<span id="cb1-154">    EXPECT_EQ<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">((*</span>ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">).</span>_n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">true</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb1-155">    EXPECT_EQ<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span>foo<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">true</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb1-156"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="a-minimalistic-implementation." class="level1">
<h1>A minimalistic implementation.</h1>
<p>Writing a homegrown version of <code>shared_ptr&lt;T&gt;</code> implementation is fun! You could have multiple handles (pointers) to the same shared resource(object). So, a <code>shared_ptr</code> object needs to track the reference count. The tracking is done through a <em>control block</em>. The control block holds meta-information. Since multiple <code>shared_ptr</code> share the same control block, the <code>shared_ptr</code> implementation only stores a pointer to the <em>control block</em>.</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp number-lines code-with-copy"><code class="sourceCode cpp"><span id="cb2-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">template</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">typename</span> T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb2-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> shared_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb2-3">    T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_raw_underlying_ptr</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">nullptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb2-4">    control_block_base<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_control_block_ptr</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">nullptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb2-5"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb2-6"></span>
<span id="cb2-7"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> control_block_base<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb2-8">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>atomic<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">unsigned</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">long</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">long</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_ref_count</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-9"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span></code></pre></div>
<p>A minmialistic implementation of <code>shared_ptr</code> is as follows:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp number-lines code-with-copy"><code class="sourceCode cpp"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Reference: C++ Memory Management</span></span>
<span id="cb3-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Patrice Roy, Packt 2025</span></span>
<span id="cb3-3"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include</span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;format&gt;</span></span>
<span id="cb3-4"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include</span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;atomic&gt;</span></span>
<span id="cb3-5"></span>
<span id="cb3-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">namespace</span> dev<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb3-7">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> control_block_base<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb3-8">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>atomic<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">unsigned</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">long</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">long</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_ref_count</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb3-9"></span>
<span id="cb3-10">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> increment<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(){</span></span>
<span id="cb3-11">            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_ref_count</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-12">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb3-13"></span>
<span id="cb3-14">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">auto</span> decrement<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(){</span></span>
<span id="cb3-15">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">--</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_ref_count</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-16">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb3-17"></span>
<span id="cb3-18">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">auto</span> use_count<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(){</span></span>
<span id="cb3-19">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_ref_count</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>load<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb3-20">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb3-21"></span>
<span id="cb3-22">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">virtual</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> release_shared<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-23">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb3-24"></span>
<span id="cb3-25">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">template</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">typename</span> T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb3-26">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> control_block <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> control_block_base<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb3-27">        T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_object_ptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-28">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">explicit</span> control_block<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb3-29">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> control_block_base<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span></span>
<span id="cb3-30">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_object_ptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb3-31">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span></span>
<span id="cb3-32"></span>
<span id="cb3-33">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> release_shared<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">override</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb3-34">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>decrement<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()==</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb3-35">            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb3-36">                <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">delete</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_object_ptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-37">                <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">delete</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">this</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-38">            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb3-39">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb3-40">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb3-41"></span>
<span id="cb3-42">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">template</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">typename</span> T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb3-43">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> control_block_with_storage <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> control_block_base<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb3-44">        T <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_object</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-45">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">template</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">typename</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...</span> Args<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb3-46">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">explicit</span> control_block_with_storage<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>Args<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;...</span> args<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb3-47">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> control_block_base<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span></span>
<span id="cb3-48">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_object</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>forward<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>Args<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;(</span>args<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)...)}</span></span>
<span id="cb3-49">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span></span>
<span id="cb3-50"></span>
<span id="cb3-51">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> release_shared<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">override</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb3-52">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>decrement<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">){</span></span>
<span id="cb3-53">                <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">delete</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">this</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-54">            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb3-55">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb3-56"></span>
<span id="cb3-57">        T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> get<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(){</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_object</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb3-58">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb3-59"></span>
<span id="cb3-60">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">template</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">typename</span> T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb3-61">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> shared_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb3-62">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb3-63"></span>
<span id="cb3-64">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/* Default constructor*/</span></span>
<span id="cb3-65">        shared_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">default</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-66"></span>
<span id="cb3-67">        shared_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> t<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> control_block_base<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> cb<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb3-68">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_raw_underlying_ptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>t<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb3-69">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_control_block_ptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>cb<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb3-70">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span></span>
<span id="cb3-71"></span>
<span id="cb3-72">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/* Parametrized constructor : Takes ownership of the pointee */</span></span>
<span id="cb3-73">        shared_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> </span>
<span id="cb3-74">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_raw_underlying_ptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb3-75">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb3-76">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">try</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb3-77">                <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_control_block_ptr</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">new</span> control_block<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb3-78">            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">catch</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(...){</span></span>
<span id="cb3-79">                <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">delete</span> ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-80">                <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">throw</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-81">            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb3-82">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb3-83"></span>
<span id="cb3-84">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/* Copy constructor : Implements shared co-ownership of the pointee semantics */</span></span>
<span id="cb3-85">        shared_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> shared_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> other<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb3-86">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_raw_underlying_ptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>other<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_raw_underlying_ptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb3-87">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_control_block_ptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>other<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_control_block_ptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb3-88">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb3-89">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_control_block_ptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb3-90">                <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_control_block_ptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span>increment<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span>   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//Atomic pre-increment</span></span>
<span id="cb3-91">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb3-92"></span>
<span id="cb3-93">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/* Move constructor : Represents the transfer of ownership */</span></span>
<span id="cb3-94">        shared_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>shared_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;</span> other<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb3-95">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_raw_underlying_ptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>exchange<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>other<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_raw_underlying_ptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">nullptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)}</span></span>
<span id="cb3-96">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_control_block_ptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>exchange<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>other<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_control_block_ptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">nullptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)}</span></span>
<span id="cb3-97">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span></span>
<span id="cb3-98"></span>
<span id="cb3-99">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/* Swap : Swap two shared_ptr objects member by member */</span></span>
<span id="cb3-100">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> swap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>shared_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> other<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">){</span></span>
<span id="cb3-101">            <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">using</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>swap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-102">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>swap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_raw_underlying_ptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> other<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_raw_underlying_ptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb3-103">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>swap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_control_block_ptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> other<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_control_block_ptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb3-104">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb3-105"></span>
<span id="cb3-106">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">friend</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> swap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>shared_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> lhs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> shared_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> rhs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">){</span></span>
<span id="cb3-107">            lhs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>swap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>rhs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb3-108">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb3-109"></span>
<span id="cb3-110">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/* Copy assignment operator : Release the current held resource</span></span>
<span id="cb3-111"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           and share the ownership of the resource specified by args */</span></span>
<span id="cb3-112">        shared_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">operator</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=(</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> shared_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> other<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">){</span></span>
<span id="cb3-113">            shared_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span> other <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}.</span>swap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(*</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">this</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb3-114">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">this</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-115">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb3-116"></span>
<span id="cb3-117">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/* Move assignment : Release the currently held resource</span></span>
<span id="cb3-118"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           and transfer the ownership of resource specified in args */</span></span>
<span id="cb3-119">        shared_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">operator</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=(</span>shared_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;</span> other<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">){</span></span>
<span id="cb3-120">            shared_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>move<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>other<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}.</span>swap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(*</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">this</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb3-121">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">this</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-122">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb3-123"></span>
<span id="cb3-124">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>shared_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(){</span></span>
<span id="cb3-125">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_control_block_ptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">){</span></span>
<span id="cb3-126">                <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_control_block_ptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span>release_shared<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb3-127">            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb3-128">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb3-129"></span>
<span id="cb3-130">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/* get() - Returns the stored pointer */</span></span>
<span id="cb3-131">        T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> get<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(){</span></span>
<span id="cb3-132">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_raw_underlying_ptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-133">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb3-134"></span>
<span id="cb3-135">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> get<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb3-136">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_raw_underlying_ptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-137">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb3-138"></span>
<span id="cb3-139">        T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">operator</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*()</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">noexcept</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb3-140">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_raw_underlying_ptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-141">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb3-142"></span>
<span id="cb3-143">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">operator</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*()</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">noexcept</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb3-144">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_raw_underlying_ptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-145">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb3-146"></span>
<span id="cb3-147">        T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">operator</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;()</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">noexcept</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb3-148">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_raw_underlying_ptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-149">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb3-150">        </span>
<span id="cb3-151">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">operator</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;()</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">noexcept</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb3-152">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_raw_underlying_ptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-153">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb3-154"></span>
<span id="cb3-155">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/* Comparison operator*/</span></span>
<span id="cb3-156">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">bool</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">operator</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==(</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> shared_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> other<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">noexcept</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb3-157">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_raw_underlying_ptr</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> other<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_raw_underlying_ptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb3-158">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb3-159"></span>
<span id="cb3-160">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">bool</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">operator</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=(</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> shared_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> other<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">noexcept</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb3-161">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!(*</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">this</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> other<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb3-162">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb3-163"></span>
<span id="cb3-164">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">unsigned</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">long</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">long</span> use_count<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">noexcept</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb3-165">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_control_block_ptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb3-166">                <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_control_block_ptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span>use_count<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb3-167">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span></span>
<span id="cb3-168">                <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-169">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb3-170">        </span>
<span id="cb3-171">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/* Replaces the managed resource */</span></span>
<span id="cb3-172">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> reset<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">){</span></span>
<span id="cb3-173">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_raw_underlying_ptr</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb3-174">                shared_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">).</span>swap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(*</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">this</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb3-175">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb3-176"></span>
<span id="cb3-177">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">template</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">typename</span> U<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">typename</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...</span> Args<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb3-178">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">friend</span> shared_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>U<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> make_shared<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>Args<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;...</span> args<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb3-179"></span>
<span id="cb3-180">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb3-181">        T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_raw_underlying_ptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">nullptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb3-182">        control_block_base<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_control_block_ptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">nullptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb3-183">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb3-184"></span>
<span id="cb3-185">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">template</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">typename</span> T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">typename</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...</span> Args<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb3-186">    shared_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> make_shared<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>Args<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;...</span> args<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">){</span></span>
<span id="cb3-187">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/* Perform a single heap memory allocation */</span></span>
<span id="cb3-188">        control_block_with_storage<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;*</span> cb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">new</span> control_block_with_storage<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;(</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>forward<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>Args<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;(</span>args<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)...);</span></span>
<span id="cb3-189">        T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cb<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span>get<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb3-190">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> shared_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;(</span>data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> cb<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb3-191">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb3-192"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p>You can play around the code files, build the project and run unit tests for this (naive) toy-implementation of <code>shared_ptr</code> by cloning my <a href="https://github.com/quasar-chunawala/interview_data_structures">GitHub repo</a>.</p>
<section id="writing-the-shared_ptrt-destructor" class="level2">
<h2 class="anchored" data-anchor-id="writing-the-shared_ptrt-destructor">Writing the <code>~shared_ptr&lt;T&gt;()</code> destructor</h2>
<p>The destructor is tricky to get right.</p>
<p>A naive algorithm for destruction could be that, if <code>*m_ref_count_ptr == 1</code>, call delete on both pointees, otherwise decrement the counter. It is possible that two threads enter the destructor concurrently with <code>*m_ref_count_ptr=2</code>, and neither thread sees <code>*m_ref_count_ptr==1</code> and the pointees are never destroyed.</p>
<p>Another algorithm could be to decrement <code>*m_ref_count_ptr</code>. If <code>*m_ref_count_ptr==0</code>, invoke delete’s. There is a possibility that two threads enter the destructor concurrently, with <code>*m_ref_count_ptr=2</code>, then both concurrently decrement <code>*m_ref_count_ptr</code> leading to the possibility of both seeing <code>*m_ref_count_ptr=0</code>, resulting in double deletion.</p>
</section>
</section>


<div id="quarto-appendix" class="default"><section id="references" class="level1 appendix"><h2 class="anchored quarto-appendix-heading">References</h2><div class="quarto-appendix-contents">

<ul>
<li><a href="https://www.amazon.com/Memory-Management-leaner-memory-management-techniques/dp/1805129805">C++ Memory Management</a> by Patrice Roy.</li>
</ul>


</div></section></div> ]]></description>
  <category>C++</category>
  <guid>http://quantdev.blog/posts/shared_ptr/index.html</guid>
  <pubDate>Sun, 20 Apr 2025 23:00:00 GMT</pubDate>
  <media:content url="http://quantdev.blog/posts/shared_ptr/cpp.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>C++ Atomics</title>
  <dc:creator>Quasar </dc:creator>
  <link>http://quantdev.blog/posts/atomic-operations/index.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<p>Atomic operations are indivisible. Consider, for instance a shared variable <code>counter</code> that is initialized to <code>0</code>. Consider the assembly instructions corresponding to the increment operation <code>count++</code>.</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp number-lines code-with-copy"><code class="sourceCode cpp"><span id="cb1-1"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> counter <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb1-2"></span>
<span id="cb1-3"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> main<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(){</span></span>
<span id="cb1-4">    counter<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++;</span></span>
<span id="cb1-5"></span>
<span id="cb1-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-7"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p><a href="https://godbolt.org/z/cjhYK3hv9">Play on Compiler Explorer</a></p>
<p>Look at the assembler code generated by the compiler and the instructions the CPU executes.</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource fasm number-lines code-with-copy"><code class="sourceCode fasm"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">counter:</span></span>
<span id="cb2-2">        .zero   <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span></span>
<span id="cb2-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">main:</span></span>
<span id="cb2-4">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">push</span>    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">rbp</span></span>
<span id="cb2-5">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">mov</span>     <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">rbp</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">rsp</span></span>
<span id="cb2-6">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">mov</span>     <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">eax</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">DWORD</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">PTR</span> counter<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>rip<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb2-7">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">add</span>     <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">eax</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb2-8">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">mov</span>     <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">DWORD</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">PTR</span> counter<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>rip<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">],</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">eax</span></span>
<span id="cb2-9">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">mov</span>     <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">eax</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb2-10">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">pop</span>     <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">rbp</span></span>
<span id="cb2-11">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">ret</span></span></code></pre></div>
<p>The code increments a global counter. The statement on line <code>6</code>, copies the value stored in the <code>counter</code> to the <code>eax</code> register, line <code>7</code> adds <code>1</code> to the value stored in <code>eax</code>, and finally line <code>8</code> copies back the contents of the <code>eax</code> register to the <code>counter</code> variable. So, a thread could execute line <code>6</code> and then be scheduled out, and another thread execute all threee instructions after that. When the first thread finishes increment the result, the counter will be increment just once and thus the result will incorrect.</p>
<p>The following code does the same: it increments a global counter. This time, though, we use an atomic type and operations.</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp number-lines code-with-copy"><code class="sourceCode cpp"><span id="cb3-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;atomic&gt;</span></span>
<span id="cb3-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>atomic<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> counter <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb3-3"></span>
<span id="cb3-4"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> main<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(){</span></span>
<span id="cb3-5">    counter<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++;</span></span>
<span id="cb3-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-7"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p><a href="https://godbolt.org/z/rs9Wrzz3M">Play on Compiler Explorer</a></p>
<p>I will explain the <code>std::atomic&lt;int&gt;</code> type and the atomic increment operation later. The generated assembly code is the following:</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode numberSource fasm number-lines code-with-copy"><code class="sourceCode fasm"><span id="cb4-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">lock</span> add        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">DWORD</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">PTR</span> counter<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>rip<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">],</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span></code></pre></div>
<p>Just one instruction has been generated to add <code>1</code> to the value stored in the <code>counter</code> variable. The lock prefix here means that the following instruction (in this case <code>add</code>) is going to be executed atomically. Hence, a thread cannot be interrupted in the middle of incrementing the counter.</p>
<p>Atomic operations allow threads to read, modify and write indivisibly and can also be used as synchronization primitives. Atomic operations must be provided by the CPU (as in the <code>lock add</code> instruction).</p>
</section>
<section id="non-blocking-data-structures" class="level2">
<h2 class="anchored" data-anchor-id="non-blocking-data-structures">Non-Blocking Data-Structures</h2>
<p>Data-structures synchronized with locks are called <strong>blocking data-structures</strong> because threads are blocked (by the operating system), waiting until the locks become available.</p>
<p>Data-structures that don’t use locks are called <strong>non-blocking data structures</strong>. Most (but not all) of them are lock-free.</p>
<p>A data-structure or algorithm is considered lock-free if each synchronized action completes in a finite number of steps, not allowing indefinite waiting for a condition to become true or false.</p>
<p>The types of lock-free data structures are the following:</p>
<ul>
<li><p><strong>Obstruction-free</strong>: A thread will complete its operation in a bounded number of steps if all other threads are suspended.</p></li>
<li><p><strong>Lock-free</strong>: Atleast one thread will complete its operation in a bounded number of steps while multiple threads are working on the data-structure.</p></li>
<li><p><strong>Wait-free</strong>: All threads will complete their operations in a bounded number of steps while multiple threads are working on the data-structure.</p></li>
</ul>
</section>
<section id="memory-access" class="level2">
<h2 class="anchored" data-anchor-id="memory-access">Memory Access</h2>
<p>Memory order refers to the order in which memory(that is, the variables in a program) are accessed. Memory can be either read or write(load and store). But, what is the actual order in which the variables of a program are accessed? For the following code, there are <img src="https://latex.codecogs.com/png.latex?3"> points of view: the written code order, the compiler-generated instructions order, and finally, the order in which the instructions are executed by the CPU. These <img src="https://latex.codecogs.com/png.latex?3"> orderings can all be the same or (more likely) different.</p>
<p>The first and obvious ordering is the one in the code.</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp number-lines code-with-copy"><code class="sourceCode cpp"><span id="cb5-1"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> func_1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">){</span></span>
<span id="cb5-2">    a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb5-3">    b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb5-4">    a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb5-5"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p>The <code>func_1</code> function first adds <img src="https://latex.codecogs.com/png.latex?1"> to the variable <code>a</code>, then adds <img src="https://latex.codecogs.com/png.latex?10"> to the variable <code>b</code> and finally adds <img src="https://latex.codecogs.com/png.latex?2"> to the variable <code>a</code>. This is our intention and the order in which we define the statements to be executed.</p>
<p>When compiling the code to assembly, the compiler may change the order of the statements to make the generate code more efficient provided the outcome of the code execution is unchanged. For example, with the preceding code, the compiler could either do the two additions with variable <code>a</code> first and then the addition with variable <code>b</code>, or it could simply add <code>3</code> to <code>a</code> and <code>10</code> to <code>b</code>.</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode numberSource fasm number-lines code-with-copy"><code class="sourceCode fasm"><span id="cb6-1">func_1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>int<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;,</span> int<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;):</span></span>
<span id="cb6-2">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">add</span>     <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">DWORD</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">PTR</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">rdi</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">],</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb6-3">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">add</span>     <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">DWORD</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">PTR</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">rsi</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">],</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span></span>
<span id="cb6-4">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">add</span>     <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">DWORD</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">PTR</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">rdi</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">],</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb6-5">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">ret</span></span></code></pre></div>
<p>If we define <code>func_2</code> as:</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp number-lines code-with-copy"><code class="sourceCode cpp"><span id="cb7-1"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> func_2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">){</span></span>
<span id="cb7-2">    a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb7-3">    a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb7-4">    b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb7-5"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p>the compiler generates:</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp number-lines code-with-copy"><code class="sourceCode cpp"><span id="cb8-1">func_2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;):</span></span>
<span id="cb8-2">        add     DWORD PTR <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>rdi<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">],</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span>
<span id="cb8-3">        add     DWORD PTR <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>rsi<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">],</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span></span>
<span id="cb8-4">        ret</span></code></pre></div>
<p>In this case, the CPU could execute the instructions out of order, as there is no dependency among the operations.</p>
<p>Consider <code>func_3(int&amp;, int&amp;)</code> defined as:</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp number-lines code-with-copy"><code class="sourceCode cpp"><span id="cb9-1"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> func_3<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span>b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">){</span></span>
<span id="cb9-2">    a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb9-3">    b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb9-4">    a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb9-5"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p>In this case, the operation on <code>b</code> depends on the previous operation on <code>a</code>, so the compiler cannot reorder the statements, and the generated code will be like the code we write (same order of operations).</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode numberSource fasm number-lines code-with-copy"><code class="sourceCode fasm"><span id="cb10-1">func_3<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>int<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;,</span> int<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;):</span></span>
<span id="cb10-2">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">mov</span>     <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">eax</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">DWORD</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">PTR</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">rdi</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb10-3">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">lea</span>     <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">edx</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">rax</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb10-4">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">add</span>     <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">eax</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span></span>
<span id="cb10-5">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">mov</span>     <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">DWORD</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">PTR</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">rdi</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">],</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">edx</span></span>
<span id="cb10-6">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">add</span>     <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">DWORD</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">PTR</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">rsi</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">],</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">eax</span></span>
<span id="cb10-7">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">add</span>     <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">DWORD</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">PTR</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">rdi</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">],</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb10-8">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">ret</span></span></code></pre></div>
<p>To conclude, the source code order, the compiler generated object-code order and the actual exection order on a multi-core CPU will differ.</p>
</section>
<section id="modification-order" class="level2">
<h2 class="anchored" data-anchor-id="modification-order">Modification Order</h2>
<p>Any entity with a type <code>T</code> that has a lifetime and occupies storage in memory is an object. Every object in a C++ program has a modification order, consisting of all writes to that object from all the threads in the program, starting with the object’s initialization. In multi-threaded code, the modification order may vary between runs, but in a given execution of the program, all threads must agree on the order.</p>
<p>If distinct threads see distinct sequences of values for a single variable, we have a data-race and UB.</p>
<p>Certain kinds of speculative execution aren’t permitted. Once a thread has seen a particular entry in the modification order, subsequent reads from the same thread must return later values and subsequent writes to that object must occur later in the modification order. A read of an object that follows a write to that object in the same thread must either return the same value or another value that occurs later in the modification order. Although all threads must agree on the modification orders of each individual object, they may not necessarily agree on the relative ordering of operations on separate objects.</p>
</section>
<section id="memory-model" class="level2">
<h2 class="anchored" data-anchor-id="memory-model">Memory Model</h2>
<p>Typically, each core in a multi-core processor has dedicated store buffers, its own L3 cache. A pair of cores often share the L2 cache. All cores share the L1 cache and the global main memory. So, the below picture is a more accurate mental model of a modern microprocessor.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="http://quantdev.blog/posts/atomic-operations/multicore_processor.png" width="700" height="500" class="figure-img"></p>
<figcaption class="figure-caption">Memory Model</figcaption>
</figure>
</div>
<p>Consider 2 globally declared atomic flags <code>flag1</code> and <code>flag2</code>. Assume that <code>thread_1</code> executes on processor-1 and <code>thread_2</code> executes on processor-2 and all reads and writes are atomic.</p>
<p>Essentially, <code>thread_1</code> declares its intent to enter a critical section by setting <code>flag1 = 1</code>. A <code>flag1.store(1)</code> operation writes <code>flag1 = 1</code> to the store buffer. Concurrently, <code>thread_2</code> declares its intent to enter the critical section by setting <code>flag2 = 1</code>. A <code>flag2.store(1)</code> operation writes <code>flag2 = 1</code> the processor’s store buffer.</p>
<p><code>thread_1</code> reads the value of <code>flag2</code> from the global main memory, which is <code>0</code> (since processor-2’s buffer has not been flushed). Hence, the predicate <code>!flag2</code> is satisfied and the <code>thread_1</code> enters the critical section. Similarly, <code>thread_2</code> reads the value of <code>flag1</code> from the global main memory, which is also <code>0</code> and enters the critical section at the same time.</p>
<p><img src="https://latex.codecogs.com/png.latex?1"> nanosecond later, the contents of the store buffers on processor-1 and process-2 are flushed to main memory.</p>
<p>Thus, we need synchronization and some form of ordering to prevent undefined behavior.</p>
<section id="sequential-consistency" class="level3">
<h3 class="anchored" data-anchor-id="sequential-consistency">Sequential consistency</h3>
<p><code>std::memory_order_seq_cst</code> has two implications. The operations of a program(thread) will always be executed in source code order.</p>
<p>In a given execution, there is a single global ordering of all operations tagged <code>memory_order_seq</code>, and all threads observe the same global order.</p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp number-lines code-with-copy"><code class="sourceCode cpp"><span id="cb11-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;iostream&gt;</span></span>
<span id="cb11-2"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;atomic&gt;</span></span>
<span id="cb11-3"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;thread&gt;</span></span>
<span id="cb11-4"></span>
<span id="cb11-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>atomic<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ATOMIC_INT_LOCK_FREE<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb11-6"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>atomic<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ATOMIC_INT_LOCK_FREE<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb11-7"></span>
<span id="cb11-8"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> main<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb11-9">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>thread<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> </span>t1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span></span>
<span id="cb11-10">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[&amp;]()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb11-11">            x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>store<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb11-12">            <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> result1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>load<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb11-13">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb11-14">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb11-15"></span>
<span id="cb11-16">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>thread<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> </span>t2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span></span>
<span id="cb11-17">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[&amp;]()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb11-18">            y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>store<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">17</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb11-19">            <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> result2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>load<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb11-20">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb11-21">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb11-22"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p>Sequential ordering is also the default memory ordering.</p>
<p><code>x.store(42)</code> will always be performed before <code>y.load()</code>. <code>y.store(17)</code> will always be performed before <code>x.load()</code>. That is the guarantee of the sequential consistency. And each thread sees operations of the other thread in the same order. This respects our intuition.</p>
<p>How many ways exist to perform these 4 operations? Extremely easy! There are 6 possibilities.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="http://quantdev.blog/posts/atomic-operations/sequential_memory_order.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">Sequential Memory Order</figcaption>
</figure>
</div>
<p>To further elaborate, consider the below snippet:</p>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp number-lines code-with-copy"><code class="sourceCode cpp"><span id="cb12-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Ref: Asynchronous programming with C++</span></span>
<span id="cb12-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Javier Reguera Salgado</span></span>
<span id="cb12-3"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;iostream&gt;</span></span>
<span id="cb12-4"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;atomic&gt;</span></span>
<span id="cb12-5"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;thread&gt;</span></span>
<span id="cb12-6"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;vector&gt;</span></span>
<span id="cb12-7"></span>
<span id="cb12-8"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>atomic<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">bool</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">false</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb12-9"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>atomic<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">bool</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">false</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb12-10"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>atomic<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> z<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb12-11"></span>
<span id="cb12-12"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> write_x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb12-13">    x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>store<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">true</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>memory_order_seq_cst<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb12-14"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb12-15"></span>
<span id="cb12-16"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> write_y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb12-17">    y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>store<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">true</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>memory_order_seq_cst<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb12-18"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb12-19"></span>
<span id="cb12-20"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> read_x_then_y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb12-21">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">while</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(!</span>x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>load<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>memory_order_seq_cst<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">));</span></span>
<span id="cb12-22"></span>
<span id="cb12-23">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>load<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>memory_order_seq_cst<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">))</span></span>
<span id="cb12-24">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++</span>z<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb12-25"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb12-26"></span>
<span id="cb12-27"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> read_y_then_x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb12-28">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">while</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(!</span>y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>load<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>memory_order_seq_cst<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">));</span></span>
<span id="cb12-29"></span>
<span id="cb12-30">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>load<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>memory_order_seq_cst<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">))</span></span>
<span id="cb12-31">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++</span>z<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb12-32"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb12-33"></span>
<span id="cb12-34"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> main<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb12-35">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>thread<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> </span>t1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>write_x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb12-36">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>thread<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> </span>t2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>write_y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb12-37">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>thread<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> </span>t3<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>read_x_then_y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb12-38">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>thread<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> </span>t4<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>read_y_then_x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb12-39"></span>
<span id="cb12-40">    t1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>join<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb12-41">    t2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>join<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb12-42">    t3<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>join<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb12-43">    t4<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>join<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb12-44"></span>
<span id="cb12-45">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>cout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> &lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x = "</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb12-46">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>cout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> &lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y = "</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb12-47">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>cout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> &lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"z = "</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> z<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb12-48"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p>Because we are using <code>std::memory_order_seq_cst</code> when running the code, we note the following:</p>
<ul>
<li>Operations in each thread are executed in the given order (no reordering of atomic operations)</li>
<li><code>t1</code> and <code>t2</code> update <code>x</code> and <code>y</code> in order, and <code>t3</code> and <code>t4</code> see the same order. Without this property, <code>t3</code> could see <code>x</code> and <code>y</code> change in one order, but <code>t4</code> could see the opposite.</li>
<li>Any other memory ordering may print <code>z=0</code> because <code>t3</code> and <code>t4</code> could see changes to <code>x</code> and <code>y</code> in the opposite order.</li>
</ul>
<p>Note that the order between operations in different threads is not guaranteed and instructions from different threads may be executed in any order, because the threads may be scheduled.</p>
</section>
</section>
<section id="acquire-release-semantic" class="level2">
<h2 class="anchored" data-anchor-id="acquire-release-semantic">Acquire-Release Semantic</h2>
<p>Consider the same code as in the previous section for sequential consistency, but in this case, I use acquire-release semantics.</p>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp number-lines code-with-copy"><code class="sourceCode cpp"><span id="cb13-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Ref: Asynchronous programming with C++, Javier Reguera Salgado</span></span>
<span id="cb13-2"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;iostream&gt;</span></span>
<span id="cb13-3"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;atomic&gt;</span></span>
<span id="cb13-4"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;thread&gt;</span></span>
<span id="cb13-5"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;vector&gt;</span></span>
<span id="cb13-6"></span>
<span id="cb13-7"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>atomic<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">bool</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">false</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb13-8"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>atomic<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">bool</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">false</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb13-9"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>atomic<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> z<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb13-10"></span>
<span id="cb13-11"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> write_x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb13-12">    x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>store<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">true</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>memory_order_release<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb13-13"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb13-14"></span>
<span id="cb13-15"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> write_y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb13-16">    y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>store<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">true</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>memory_order_release<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb13-17"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb13-18"></span>
<span id="cb13-19"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> read_x_then_y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb13-20">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">while</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(!</span>x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>load<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>memory_order_acquire<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">));</span></span>
<span id="cb13-21"></span>
<span id="cb13-22">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>load<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>memory_order_acquire<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">))</span></span>
<span id="cb13-23">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++</span>z<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb13-24"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb13-25"></span>
<span id="cb13-26"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> read_y_then_x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb13-27">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">while</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(!</span>y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>load<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>memory_order_acquire<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">));</span></span>
<span id="cb13-28"></span>
<span id="cb13-29">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>load<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>memory_order_acquire<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">))</span></span>
<span id="cb13-30">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++</span>z<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb13-31"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb13-32"></span>
<span id="cb13-33"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> main<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb13-34">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>thread<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> </span>t1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>write_x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb13-35">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>thread<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> </span>t2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>write_y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb13-36">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>thread<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> </span>t3<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>read_x_then_y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb13-37">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>thread<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> </span>t4<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>read_y_then_x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb13-38"></span>
<span id="cb13-39">    t1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>join<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb13-40">    t2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>join<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb13-41">    t3<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>join<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb13-42">    t4<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>join<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb13-43"></span>
<span id="cb13-44">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>cout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> &lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x = "</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb13-45">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>cout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> &lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y = "</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb13-46">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>cout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> &lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"z = "</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> z<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb13-47">    <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">assert</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>z<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>load<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()!=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb13-48"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p>The release operation on <code>x</code> in <code>t1</code> synchronizes with the acquire operation on <code>x</code> in <code>t3</code>. Similarly, the release operation on <code>y</code> in <code>t2</code> synchonizes with <code>acquire</code> operation in thread <code>t4</code>. However, writes to <code>x</code> and <code>y</code> happen in different threads.</p>
<p>So, <code>t3</code> may find <code>x = true</code> and <code>y=false</code>. At the same time <code>t4</code> may find <code>y=true</code> and <code>x=false</code>. Different threads have different views of the memory. So, it may happen that <code>assert(z.load()!=0)</code> may fire at the end of this code. Acquire-release doesn’t imply a total-ordering.</p>
<p>In order to see the benefit of <em>acquire-release</em> ordering, we need to consider two stores from the same thread such as the code snip below. We perform writes to <code>x</code> and <code>y</code> in the same thread. Here, <code>assert(z.load()!=0)</code> will never fire.</p>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp number-lines code-with-copy"><code class="sourceCode cpp"><span id="cb14-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Ref: Asynchronous programming with C++, Javier Reguera Salgado</span></span>
<span id="cb14-2"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;iostream&gt;</span></span>
<span id="cb14-3"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;atomic&gt;</span></span>
<span id="cb14-4"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;thread&gt;</span></span>
<span id="cb14-5"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;vector&gt;</span></span>
<span id="cb14-6"></span>
<span id="cb14-7"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>atomic<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">bool</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">false</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb14-8"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>atomic<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">bool</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">false</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb14-9"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>atomic<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> z<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb14-10"></span>
<span id="cb14-11"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> write_x_then_y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb14-12">    x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>store<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">true</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>memory_order_release<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span>       <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//[1]</span></span>
<span id="cb14-13">    y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>store<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">true</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>memory_order_release<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span>       <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//[2]</span></span>
<span id="cb14-14"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb14-15"></span>
<span id="cb14-16"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> read_y_then_x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb14-17">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// spin-waiting for y to be set to true</span></span>
<span id="cb14-18">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">while</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(!</span>y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>load<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>memory_order_acquire<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">));</span>     <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//[3]</span></span>
<span id="cb14-19"></span>
<span id="cb14-20">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>load<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>memory_order_acquire<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">))</span>          <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//[4]</span></span>
<span id="cb14-21">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++</span>z<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb14-22"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb14-23"></span>
<span id="cb14-24"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> main<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb14-25">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>thread<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> </span>t1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>write_x_then_y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb14-26">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>thread<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> </span>t2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>read_y_then_x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb14-27"></span>
<span id="cb14-28">    t1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>join<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb14-29">    t2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>join<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb14-30"></span>
<span id="cb14-31">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>cout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> &lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x = "</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb14-32">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>cout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> &lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y = "</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb14-33">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>cout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> &lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"z = "</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> z<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb14-34">    <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">assert</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>z<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>load<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()!=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb14-35"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p>Eventually, the <code>load()</code> from <code>y</code>, <code>[3]</code> will see <code>true</code> as written by the store <code>[2]</code>. Because the <code>store</code> uses <code>std::memory_order_release</code> and the <code>load</code> uses <code>std::memory_order_acquire</code>, the <code>store</code> synchronizes with the <code>load</code>. The <code>store</code> to <code>x</code>, <code>[1]</code> happens before the <code>store</code> to <code>y</code>, <code>[2]</code> because they are in the same thread. Because the <code>store</code> to <code>y</code>, synchronizes with the <code>load</code> from <code>y</code>, the <code>store</code> to <code>x</code> also happens before the <code>load</code> from <code>y</code> and by extension happens before the <code>load</code> from <code>x</code>. The <code>load</code> from <code>x</code> must read <code>true</code> and the <code>assert</code> can’t fire.</p>
<p>A <code>release</code> operation on an atomic synchronizes with an <code>acquire</code> operation on the same atomic and additionally establishes an ordering constraint. So, we have a synchronizationation and a partial ordering in the acquire-release semantic.</p>
<p>So, what are typically <code>acquire</code> and <code>release</code> operations?</p>
<ul>
<li><p>Any write operation such as <code>store</code> or <code>clear</code> must specify <code>std::memory_order_release</code>. This flushes the core cache and publishes all updates before the release operation. So, any writes within the same thread prior to the release operation are visible to other susbcriber threads.</p></li>
<li><p>Any read operation such as <code>load</code> or <code>test_and_set</code> must specify <code>std::memory_order_acquire</code>. This captures any all updates upto this point.</p></li>
</ul>
<p>Additionally,</p>
<ul>
<li>Read and write operations cannot be reordered to before an acquire operation.</li>
<li>Read and write operations cannot be reordered to after a release operation.</li>
</ul>
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp number-lines code-with-copy"><code class="sourceCode cpp"><span id="cb15-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;iostream&gt;</span></span>
<span id="cb15-2"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;atomic&gt;</span></span>
<span id="cb15-3"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;thread&gt;</span></span>
<span id="cb15-4"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;vector&gt;</span></span>
<span id="cb15-5"></span>
<span id="cb15-6"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>vector<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> mySharedItems<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb15-7"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>atomic_bool<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> </span>dataProduced<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb15-8"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>atomic_bool<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> </span>dataReadyToBeConsumed<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb15-9"></span>
<span id="cb15-10"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> dataProducer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb15-11">    mySharedItems <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb15-12">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>cout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> &lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dataProduced.store(true)"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb15-13">    dataProduced<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>store<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">true</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>memory_order_release<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb15-14"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb15-15"></span>
<span id="cb15-16"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> deliveryBoy<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb15-17">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">while</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(!</span>dataProduced<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>load<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>memory_order_acquire<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">));</span></span>
<span id="cb15-18">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>cout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> &lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"After dataProduced.load()"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb15-19">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>cout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> &lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Before dataReadyToBeConsumed.store(true)"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb15-20">    dataReadyToBeConsumed<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>store<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">true</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>memory_order_release<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb15-21"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb15-22"></span>
<span id="cb15-23"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> dataConsumer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb15-24">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">while</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(!</span>dataReadyToBeConsumed<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>load<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>memory_order_acquire<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">));</span></span>
<span id="cb15-25">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>cout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> &lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"After dataReadyToBeConsumed.load()"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb15-26">    mySharedItems<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb15-27"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb15-28"></span>
<span id="cb15-29"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> main<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb15-30">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>thread<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> </span>t1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>dataProducer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb15-31">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>thread<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> </span>t2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>deliveryBoy<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb15-32">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>thread<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> </span>t3<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>dataConsumer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb15-33"></span>
<span id="cb15-34">    t1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>join<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb15-35">    t2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>join<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb15-36">    t3<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>join<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb15-37">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb15-38"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p>Output:</p>
<div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode numberSource shell number-lines code-with-copy"><code class="sourceCode"><span id="cb16-1">dataProduced.store(true)</span>
<span id="cb16-2">After dataProduced.load()</span>
<span id="cb16-3">Before dataReadyToBeConsumed.store(true)</span>
<span id="cb16-4">After dataReadyToBeConsumed.load()</span></code></pre></div>
<p>The <code>store</code> on line 13 synchronizes with the <code>load</code> on line 17. That’s the acquire-release semantic. It also establishes a partial ordering. Read or write operations prior to the <code>release</code> on line 13 cannot be moved to after line 13. And <code>release</code> operation on line 20 cannot be moved before <code>acquire</code> operation on line 13.</p>
<p>The same for the <code>deliveryBoy</code> and <code>dataConsumer</code>.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="http://quantdev.blog/posts/atomic-operations/acquire_release_semantics.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">Acquire-release semantics</figcaption>
</figure>
</div>
<p>If you think about mutexes, a mutex <code>lock()</code> is an acquire-operation. A mutex <code>unlock()</code> is a release operation. Things inside the critical region cannot be moved to outside it. An <code>unlock()</code> synchronizes with the next <code>lock()</code>. Similarly, <code>wait</code> and <code>notify</code> are acquire and release operations. The starting of a thread and <code>join</code> call on a thread are acquire and release operations.</p>
</section>
<section id="non-sequential-memory-ordering" class="level2">
<h2 class="anchored" data-anchor-id="non-sequential-memory-ordering">Non-sequential memory ordering</h2>
<p>On the opposite end of the spectrum is relaxed ordering. <em>In the absence of other ordering constraints, the only requirement is that threads agree on the modification order of each variable</em>. Atomic operations on the same atomic variable in a single thread are not reordered. Operations on distinct variables can appear in different orders on different threads.</p>
<div class="sourceCode" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp number-lines code-with-copy"><code class="sourceCode cpp"><span id="cb17-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Ref: Concurrency in Action, Anthony Williams</span></span>
<span id="cb17-2"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include</span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;atomic&gt;</span></span>
<span id="cb17-3"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include</span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;thread&gt;</span></span>
<span id="cb17-4"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include</span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;assert.h&gt;</span></span>
<span id="cb17-5"></span>
<span id="cb17-6"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>atomic<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">bool</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span>y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb17-7"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>atomic<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> z<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb17-8"></span>
<span id="cb17-9"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> write_x_then_y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span></span>
<span id="cb17-10"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb17-11">    x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>store<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">true</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>memory_order_relaxed<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span>   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// [1]</span></span>
<span id="cb17-12">    y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>store<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">true</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>memory_order_relaxed<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span>   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// [2]</span></span>
<span id="cb17-13"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb17-14"></span>
<span id="cb17-15"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> read_y_then_x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span></span>
<span id="cb17-16"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb17-17">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">while</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(!</span>y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>load<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>memory_order_relaxed<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">));</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//[3]</span></span>
<span id="cb17-18">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>load<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>memory_order_relaxed<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">))</span></span>
<span id="cb17-19">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++</span>z<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span>                                    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//[4]</span></span>
<span id="cb17-20"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb17-21"></span>
<span id="cb17-22"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> main<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(){</span></span>
<span id="cb17-23">    x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">false</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb17-24">    y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">false</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb17-25">    z <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb17-26">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>thread<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> </span>a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>write_x_then_y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb17-27">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>thread<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> </span>b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>read_y_then_x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb17-28">    a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>join<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb17-29">    b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>join<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb17-30">    <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">assert</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>z<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>load<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()!=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span>                        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//[5]</span></span>
<span id="cb17-31"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p>This time the <code>assert</code> at <code>[5]</code> can be false, because the <code>x.load()</code> can read <code>false</code>, even though the load of <code>y</code> reads <code>true</code> and the <code>store</code> of <code>x</code> happens before the <code>store</code> of <code>y</code>.</p>
<p><code>x</code> and <code>y</code> are different variables so there are no ordering guarantees relating to the visbility of variables. Relaxed operations on different variables can be freely reordered (provided they obey any happens before relationships in the same thread). They don’t introduce synchronizes-with relationships.</p>
<p>Even though there is a happens-before relationship between the stores and between the loads, the <code>store</code> of <code>y</code> does not synchronize with the <code>load</code> of <code>y</code>. So, the reader thread can see the stores out of order.</p>
<p>There’s another cool example I played around with, from Anthony William’s book, <a href="https://www.amazon.co.uk/Concurrency-Action-2E-Anthony-Williams/dp/1617294691/ref=sr_1_1?crid=XDM8P8PX83TE&amp;dib=eyJ2IjoiMSJ9.IYYYm5K7-DAC9QatR4JhacRupYhVCqhXKTMwjKypkLH2Ra8XhTokeONnDHFXgYAHeaZ__O2JHJG2xcuQO_NACM56oXNi6J2FDDpUqgGwHfA.UwWhBmhH2n059_YhK2AVjuHzezw0wWzzhfmhcgnOLOY&amp;dib_tag=se&amp;keywords=concurrency+in+action&amp;qid=1745649385&amp;sprefix=Concurrency+in+action%2Caps%2C65&amp;sr=8-1">Concurrency in Action</a>.</p>
<div class="sourceCode" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp number-lines code-with-copy"><code class="sourceCode cpp"><span id="cb18-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Relaxed operations on multiple threads</span></span>
<span id="cb18-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Ref: Concurrency in action, Anthony Williams</span></span>
<span id="cb18-3"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include</span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;thread&gt;</span></span>
<span id="cb18-4"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include</span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;atomic&gt;</span></span>
<span id="cb18-5"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include</span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;iostream&gt;</span></span>
<span id="cb18-6"></span>
<span id="cb18-7"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>atomic<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">},</span> y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">},</span> z<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb18-8"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>atomic<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">bool</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> go<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">false</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb18-9"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">uint</span> loop_count<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb18-10"></span>
<span id="cb18-11"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> Snapshot<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb18-12">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb18-13">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb18-14">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> z<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb18-15"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb18-16"></span>
<span id="cb18-17">Snapshot snapshots<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">][</span>loop_count<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb18-18"></span>
<span id="cb18-19"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> increment<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>atomic<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;*</span> var_to_inc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> Snapshot<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> snapshots<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">){</span></span>
<span id="cb18-20">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">while</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(!</span>go<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb18-21">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>this_thread<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">::</span>yield<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span>      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Spin, waiting for the signal</span></span>
<span id="cb18-22"></span>
<span id="cb18-23">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">unsigned</span> i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>loop_count<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;++</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">){</span></span>
<span id="cb18-24">        snapshots<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">].</span>x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>load<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>memory_order_relaxed<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb18-25">        snapshots<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">].</span>y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>load<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>memory_order_relaxed<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb18-26">        snapshots<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">].</span>z <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> z<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>load<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>memory_order_relaxed<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb18-27">        var_to_inc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span>store<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>memory_order_relaxed<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb18-28">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>this_thread<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">::</span>yield<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb18-29">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb18-30"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb18-31"></span>
<span id="cb18-32"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> record_values<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>Snapshot<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> snapshots<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">){</span></span>
<span id="cb18-33">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">while</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(!</span>go<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb18-34">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>this_thread<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">::</span>yield<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb18-35"></span>
<span id="cb18-36">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">unsigned</span> i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>loop_count<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;++</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">){</span></span>
<span id="cb18-37">        snapshots<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">].</span>x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>load<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>memory_order_relaxed<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb18-38">        snapshots<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">].</span>y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>load<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>memory_order_relaxed<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb18-39">        snapshots<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">].</span>z <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> z<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>load<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>memory_order_relaxed<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb18-40">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>this_thread<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">::</span>yield<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb18-41">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb18-42"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb18-43"></span>
<span id="cb18-44"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> print<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>Snapshot<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> v<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">){</span></span>
<span id="cb18-45">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">unsigned</span> i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">={</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>loop_count<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;++</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">){</span></span>
<span id="cb18-46">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb18-47">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>cout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> &lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">","</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb18-48">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>cout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"("</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> v<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">].</span>x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">","</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> v<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">].</span>y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">","</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> v<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">].</span>z <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">")"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb18-49">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb18-50"></span>
<span id="cb18-51">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>cout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb18-52"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb18-53"></span>
<span id="cb18-54"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> main<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(){</span></span>
<span id="cb18-55">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>thread<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> </span>t1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>increment<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span>x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> snapshots<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]);</span></span>
<span id="cb18-56">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>thread<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> </span>t2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>increment<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span>y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> snapshots<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]);</span></span>
<span id="cb18-57">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>thread<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> </span>t3<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>increment<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span>z<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> snapshots<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]);</span></span>
<span id="cb18-58">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>thread<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> </span>t4<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>record_values<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> snapshots<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]);</span></span>
<span id="cb18-59">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>thread<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> </span>t5<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>record_values<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> snapshots<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]);</span></span>
<span id="cb18-60">    go<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">true</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb18-61">    t5<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>join<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb18-62">    t4<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>join<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb18-63">    t3<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>join<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb18-64">    t2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>join<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb18-65">    t1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>join<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb18-66"></span>
<span id="cb18-67">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">unsigned</span> i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;++</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb18-68">        print<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>snapshots<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]);</span></span>
<span id="cb18-69"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p>Output:</p>
<div class="sourceCode" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode numberSource shell number-lines code-with-copy"><code class="sourceCode"><span id="cb19-1">(0,1,0),(1,5,0),(2,6,0),(3,8,0),(4,8,0),(5,10,0),(6,10,0),(7,10,0),(8,10,0),(9,10,0)</span>
<span id="cb19-2">(0,0,0),(1,1,0),(1,2,0),(1,3,0),(1,4,0),(1,5,0),(2,6,0),(3,7,0),(4,8,0),(5,9,0)</span>
<span id="cb19-3">(10,10,0),(10,10,1),(10,10,2),(10,10,3),(10,10,4),(10,10,5),(10,10,6),(10,10,7),(10,10,8),(10,10,9)</span>
<span id="cb19-4">(10,10,10),(10,10,10),(10,10,10),(10,10,10),(10,10,10),(10,10,10),(10,10,10),(10,10,10),(10,10,10),(10,10,10)</span>
<span id="cb19-5">(0,1,0),(1,3,0),(1,4,0),(1,5,0),(2,6,0),(3,7,0),(4,8,0),(5,9,0),(5,10,0),(6,10,0)</span></code></pre></div>
<p>This simple code-snippet shows that each thread sees a distinct sequence of values for the distinct variables <code>x</code>, <code>y</code>, and <code>z</code> when incremented <code>10</code> times each. Only the modification order of each variable is consistent amongst the threads.</p>
</section>


<div id="quarto-appendix" class="default"><section id="references" class="level2 appendix"><h2 class="anchored quarto-appendix-heading">References</h2><div class="quarto-appendix-contents">

<ul>
<li><em><a href="https://www.youtube.com/watch?v=e0DsVqZLMzU&amp;t=2312s">The memory model in C++ - Rainier Grimm</a>, Meeting C++ 2016.</em></li>
</ul>


</div></section></div> ]]></description>
  <category>C++</category>
  <guid>http://quantdev.blog/posts/atomic-operations/index.html</guid>
  <pubDate>Sat, 08 Mar 2025 00:00:00 GMT</pubDate>
  <media:content url="http://quantdev.blog/posts/atomic-operations/cpp.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>numpy and pandas CheatSheet</title>
  <dc:creator>Quasar </dc:creator>
  <link>http://quantdev.blog/posts/numpy-and-pandas-cheatsheet/index.html</link>
  <description><![CDATA[ 




<section id="np.arangestartstopstep" class="level2">
<h2 class="anchored" data-anchor-id="np.arangestartstopstep"><code>np.arange(start,stop,step)</code></h2>
<p><code>np.arange(start, stop, step)</code> returns evenly spaced values in a given interval.</p>
<div id="20744bf9" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-2"></span>
<span id="cb1-3">np.arange(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.1</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="1">
<pre><code>array([0. , 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1. ])</code></pre>
</div>
</div>
</section>
<section id="np.zerosshape" class="level2">
<h2 class="anchored" data-anchor-id="np.zerosshape"><code>np.zeros(shape)</code></h2>
<div id="55b53855" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb3-1">np.zeros(shape<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>))</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="2">
<pre><code>array([[0., 0., 0.],
       [0., 0., 0.],
       [0., 0., 0.]])</code></pre>
</div>
</div>
</section>
<section id="np.zeros_like" class="level2">
<h2 class="anchored" data-anchor-id="np.zeros_like"><code>np.zeros_like</code></h2>
<div id="28e5671f" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb5-1">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([</span>
<span id="cb5-2">    [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>],</span>
<span id="cb5-3">    [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>],</span>
<span id="cb5-4">    [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>]</span>
<span id="cb5-5">])</span>
<span id="cb5-6"></span>
<span id="cb5-7">np.zeros_like(x)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="3">
<pre><code>array([[0, 0, 0, 0],
       [0, 0, 0, 0],
       [0, 0, 0, 0]])</code></pre>
</div>
</div>
</section>
<section id="np.onesshape" class="level2">
<h2 class="anchored" data-anchor-id="np.onesshape"><code>np.ones(shape)</code></h2>
<div id="b7309ef3" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb7-2"></span>
<span id="cb7-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># The matrix of all ones of size 3 x 3</span></span>
<span id="cb7-4">np.ones(shape<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>))</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="4">
<pre><code>array([[1., 1., 1.],
       [1., 1., 1.],
       [1., 1., 1.]])</code></pre>
</div>
</div>
</section>
<section id="np.eyen_rowsm_cols" class="level2">
<h2 class="anchored" data-anchor-id="np.eyen_rowsm_cols"><code>np.eye(N_rows,M_cols)</code></h2>
<div id="c183308c" class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb9-2"></span>
<span id="cb9-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Identity matrix of size 3 x 3</span></span>
<span id="cb9-4">np.eye(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="5">
<pre><code>array([[1., 0., 0.],
       [0., 1., 0.],
       [0., 0., 1.]])</code></pre>
</div>
</div>
</section>
<section id="np.anyarray_like-axis-keepdims" class="level2">
<h2 class="anchored" data-anchor-id="np.anyarray_like-axis-keepdims"><code>np.any(array_like, axis, keepdims)</code></h2>
<p>Tests whether any array element along a given axis evaluates to <code>True</code>.</p>
<div id="4327cb52" class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb11-2"></span>
<span id="cb11-3">np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">any</span>([[<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>], [<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>]])</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="6">
<pre><code>np.True_</code></pre>
</div>
</div>
<div id="23597fe4" class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb13-1">np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">any</span>([[<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>], [<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>]], axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="7">
<pre><code>array([ True,  True])</code></pre>
</div>
</div>
<div id="cc7b6c40" class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb15-1">np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">any</span>([[<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>], [<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>]], axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="8">
<pre><code>array([ True, False])</code></pre>
</div>
</div>
<div id="5c0a6c75" class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb17-1">np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">any</span>([[<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>], [<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>]], axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="9">
<pre><code>array([ True,  True])</code></pre>
</div>
</div>
<div id="20716a90" class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb19-1">np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">any</span>([[<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>], [<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>]], axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, keepdims<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="10">
<pre><code>array([[ True],
       [ True]])</code></pre>
</div>
</div>
</section>
<section id="np.allarray_like-axis-keepdims" class="level2">
<h2 class="anchored" data-anchor-id="np.allarray_like-axis-keepdims"><code>np.all(array_like, axis, keepdims)</code></h2>
<div id="aaf2cce9" class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb21-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb21-2"></span>
<span id="cb21-3">np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">all</span>([[<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>], [<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>]])</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="11">
<pre><code>np.False_</code></pre>
</div>
</div>
<div id="1ad9d96f" class="cell" data-execution_count="12">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb23-1">np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">all</span>([[<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>], [<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>]], axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="12">
<pre><code>array([ True, False])</code></pre>
</div>
</div>
<div id="2cb51e9e" class="cell" data-execution_count="13">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb25-1">np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">all</span>([[<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>], [<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>]], axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="13">
<pre><code>array([False, False])</code></pre>
</div>
</div>
</section>
<section id="np.tilearray-reps" class="level2">
<h2 class="anchored" data-anchor-id="np.tilearray-reps"><code>np.tile(array, reps)</code></h2>
<p>Constructs an array by repeating the array <code>reps</code> number of times.</p>
<div id="c1400775" class="cell" data-execution_count="14">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb27-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb27-2"></span>
<span id="cb27-3">a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>])</span>
<span id="cb27-4">np.tile(a, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="14">
<pre><code>array([0, 1, 2, 0, 1, 2])</code></pre>
</div>
</div>
<div id="e40831d9" class="cell" data-execution_count="15">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb29-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb29-2"></span>
<span id="cb29-3">a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>])</span>
<span id="cb29-4">np.tile(a, (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>))</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="15">
<pre><code>array([[0, 1, 2, 0, 1, 2],
       [0, 1, 2, 0, 1, 2]])</code></pre>
</div>
</div>
</section>
<section id="np.repeatarray-repeats-axis" class="level2">
<h2 class="anchored" data-anchor-id="np.repeatarray-repeats-axis"><code>np.repeat(array, repeats, axis)</code></h2>
<p>Repeats each element of an array after themselves.</p>
<div id="6b9cba89" class="cell" data-execution_count="16">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb31-1">np.repeat(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="16">
<pre><code>array([3, 3, 3, 3])</code></pre>
</div>
</div>
<div id="bca0f600" class="cell" data-execution_count="17">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb33-1">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([</span>
<span id="cb33-2">    [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>],</span>
<span id="cb33-3">    [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>],</span>
<span id="cb33-4">    [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>]</span>
<span id="cb33-5">])</span>
<span id="cb33-6"></span>
<span id="cb33-7">np.repeat(x, repeats<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="17">
<pre><code>array([[1, 2],
       [1, 2],
       [3, 4],
       [3, 4],
       [5, 6],
       [5, 6]])</code></pre>
</div>
</div>
<div id="23aab666" class="cell" data-execution_count="18">
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb35-1">np.repeat(x, repeats <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="18">
<pre><code>array([[1, 1, 2, 2],
       [3, 3, 4, 4],
       [5, 5, 6, 6]])</code></pre>
</div>
</div>
</section>
<section id="broadcasting" class="level2">
<h2 class="anchored" data-anchor-id="broadcasting">Broadcasting</h2>
<p>The term broadcasting describes how NumPy treats arrays with different shapes during arithmetic operations. Subject to certain constraints, the smaller array is broadcast across the larger array, so that they have compatible shapes. Broadcasting provides a means of vectorizing array operations so that looping occurs in C, instead of Python.</p>
<p>For example, let <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7Bx%7D=%5Bx_0,%20x_1,%20%5Cldots,%20x_%7Bn-1%7D%5D"> be a column vector and let <img src="https://latex.codecogs.com/png.latex?k"> be a scalar.</p>
<p>The scalar multiplication <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7By%7D%20=%20k%20%5Cmathbf%7Bx%7D"> multiplies each element <img src="https://latex.codecogs.com/png.latex?x_0,%20x_1,%20x_2,%20%5Cldots,%20x_%7Bn-1%7D"> by <img src="https://latex.codecogs.com/png.latex?k">.</p>
<p>We can think of the scalar <img src="https://latex.codecogs.com/png.latex?k"> as being stretched during the arithmetic operation into a vector with the same length as <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7Bx%7D">. The stretching analogy is only conceptual. NumPy is smart enough to use the original scalar value without actually making copies.</p>
</section>
<section id="np.wherecondition-x-y" class="level2">
<h2 class="anchored" data-anchor-id="np.wherecondition-x-y"><code>np.where(condition, x, y)</code></h2>
<p>For each element <img src="https://latex.codecogs.com/png.latex?x"> in the array, if the array-element satisfies the condition, then <code>x</code> values are returned, else <code>y</code> values are returned.</p>
<div id="179c97e3" class="cell" data-execution_count="19">
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb37-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb37-2"></span>
<span id="cb37-3">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.arange(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb37-4">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># this returns a filter mask - an array of booleans</span></span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="19">
<pre><code>array([False, False, False, False, False, False,  True,  True,  True,
        True])</code></pre>
</div>
</div>
<div id="538739cc" class="cell" data-execution_count="20">
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb39-1">x[x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="20">
<pre><code>array([6, 7, 8, 9])</code></pre>
</div>
</div>
<div id="3406a8d5" class="cell" data-execution_count="21">
<div class="sourceCode cell-code" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb41-1">np.where(x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, x)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="21">
<pre><code>array([ 0,  1,  2,  3,  4,  5, 36, 49, 64, 81])</code></pre>
</div>
</div>
</section>
<section id="pandas.dataframedatacolumns" class="level2">
<h2 class="anchored" data-anchor-id="pandas.dataframedatacolumns"><code>pandas.DataFrame(data,columns)</code></h2>
<p>A <code>pandas.DataFrame</code> represents a two dimensional, size-mutable, potentially heterogenous collection of data.</p>
<p><code>data</code> can be any iterable, <code>dict</code> or another dataframe.</p>
<div id="76173870" class="cell" data-execution_count="22">
<div class="sourceCode cell-code" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb43-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb43-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> datetime <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> date</span>
<span id="cb43-3">data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb43-4">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Date'</span> : [ date(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2025</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">31</span>), date(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2025</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)],</span>
<span id="cb43-5">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Close price'</span> : [ <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">101.25</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">103.00</span> ]</span>
<span id="cb43-6">}</span>
<span id="cb43-7"></span>
<span id="cb43-8">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame(data)</span>
<span id="cb43-9">df</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="22">
<div>


<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">Date</th>
<th data-quarto-table-cell-role="th">Close price</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>2025-01-31</td>
<td>101.25</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>2025-02-01</td>
<td>103.00</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
</section>
<section id="indexing-a-dataframe" class="level2">
<h2 class="anchored" data-anchor-id="indexing-a-dataframe">Indexing a <code>DataFrame</code></h2>
<div id="d9490676" class="cell" data-execution_count="23">
<div class="sourceCode cell-code" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb44-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Access a single value for a row/column label pair</span></span>
<span id="cb44-2">df.at[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Close price'</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="23">
<pre><code>np.float64(103.0)</code></pre>
</div>
</div>
<div id="e3d6fb8e" class="cell" data-execution_count="24">
<div class="sourceCode cell-code" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb46-1">df.at[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Close price'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">102.50</span></span></code></pre></div>
</div>
<div id="8e155602" class="cell" data-execution_count="25">
<div class="sourceCode cell-code" id="cb47" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb47-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Accessing a group of rows and columns by label(s) or boolean array</span></span>
<span id="cb47-2">df.loc[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="25">
<pre><code>Date           2025-01-31
Close price        101.25
Name: 0, dtype: object</code></pre>
</div>
</div>
<div id="b7e649c2" class="cell" data-execution_count="26">
<div class="sourceCode cell-code" id="cb49" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb49-1">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame({</span>
<span id="cb49-2">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'A'</span> : [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>],</span>
<span id="cb49-3">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'B'</span> : [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>],</span>
<span id="cb49-4">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'C'</span> : [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">13</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">17</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">18</span>]</span>
<span id="cb49-5">})</span>
<span id="cb49-6">df</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="26">
<div>


<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">A</th>
<th data-quarto-table-cell-role="th">B</th>
<th data-quarto-table-cell-role="th">C</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>1</td>
<td>7</td>
<td>13</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>2</td>
<td>8</td>
<td>14</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>3</td>
<td>9</td>
<td>15</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>4</td>
<td>10</td>
<td>16</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>5</td>
<td>11</td>
<td>17</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">5</td>
<td>6</td>
<td>12</td>
<td>18</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<div id="19ccaaab" class="cell" data-execution_count="27">
<div class="sourceCode cell-code" id="cb50" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb50-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Accessing a group of rows and columns by label(s) or boolean array</span></span>
<span id="cb50-2">df.loc[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="27">
<pre><code>A     1
B     7
C    13
Name: 0, dtype: int64</code></pre>
</div>
</div>
<div id="4b72dc19" class="cell" data-execution_count="28">
<div class="sourceCode cell-code" id="cb52" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb52-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Integer location based indexing</span></span>
<span id="cb52-2">df.iloc[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="28">
<pre><code>1    8
2    9
Name: B, dtype: int64</code></pre>
</div>
</div>
</section>
<section id="filtering-data" class="level2">
<h2 class="anchored" data-anchor-id="filtering-data">Filtering data</h2>
<div id="380b0b29" class="cell" data-execution_count="29">
<div class="sourceCode cell-code" id="cb54" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb54-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># This produces a filter mask</span></span>
<span id="cb54-2">df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'B'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span></span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="29">
<pre><code>0    False
1    False
2    False
3     True
4     True
5     True
Name: B, dtype: bool</code></pre>
</div>
</div>
<div id="451330f2" class="cell" data-execution_count="30">
<div class="sourceCode cell-code" id="cb56" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb56-1">df[df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'B'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="30">
<div>


<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">A</th>
<th data-quarto-table-cell-role="th">B</th>
<th data-quarto-table-cell-role="th">C</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">3</td>
<td>4</td>
<td>10</td>
<td>16</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">4</td>
<td>5</td>
<td>11</td>
<td>17</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">5</td>
<td>6</td>
<td>12</td>
<td>18</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
</section>
<section id="data-transformation" class="level2">
<h2 class="anchored" data-anchor-id="data-transformation">Data transformation</h2>
<div id="b653e4f8" class="cell" data-execution_count="31">
<div class="sourceCode cell-code" id="cb57" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb57-1">df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'B'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lambda</span> row: row[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'B'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> , axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb57-2">df</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="31">
<div>


<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">A</th>
<th data-quarto-table-cell-role="th">B</th>
<th data-quarto-table-cell-role="th">C</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>1</td>
<td>49</td>
<td>13</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>2</td>
<td>64</td>
<td>14</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>3</td>
<td>81</td>
<td>15</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>4</td>
<td>100</td>
<td>16</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>5</td>
<td>121</td>
<td>17</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">5</td>
<td>6</td>
<td>144</td>
<td>18</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>


</section>

 ]]></description>
  <category>Python</category>
  <guid>http://quantdev.blog/posts/numpy-and-pandas-cheatsheet/index.html</guid>
  <pubDate>Thu, 06 Mar 2025 00:00:00 GMT</pubDate>
  <media:content url="http://quantdev.blog/posts/numpy-and-pandas-cheatsheet/python.jpeg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Python lists, dicts, tuples</title>
  <dc:creator>Quasar </dc:creator>
  <link>http://quantdev.blog/posts/python-built-in-types/index.html</link>
  <description><![CDATA[ 




<section id="dict-in-python" class="level2">
<h2 class="anchored" data-anchor-id="dict-in-python"><code>dict</code> in Python</h2>
<p>Python <code>dict</code>s are a collection of key-value pairs implemented as hash tables. <code>dict</code>s can be updated in place and dictionaries can grow and shrink as needed.</p>
</section>
<section id="flattening-a-dict-of-dicts" class="level2">
<h2 class="anchored" data-anchor-id="flattening-a-dict-of-dicts">Flattening a <code>dict</code> of <code>dict</code>s</h2>
<div id="2d1af229" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb1-1">quote_types <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb1-2">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Bids'</span> : {</span>
<span id="cb1-3">        <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> : [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">45</span>],</span>
<span id="cb1-4">        <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> : [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">47.5</span>],</span>
<span id="cb1-5">        <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> : [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">49.5</span>]</span>
<span id="cb1-6">    },</span>
<span id="cb1-7">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Offers'</span> : {</span>
<span id="cb1-8">        <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> : [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">50.5</span>],</span>
<span id="cb1-9">        <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> : [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">52.5</span>],</span>
<span id="cb1-10">        <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> : [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">55</span>]</span>
<span id="cb1-11">    }</span>
<span id="cb1-12">}</span>
<span id="cb1-13"></span>
<span id="cb1-14">dict_of_height_3 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>{</span>
<span id="cb1-15">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'a'</span> : {</span>
<span id="cb1-16">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'b'</span> :{</span>
<span id="cb1-17">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'c'</span> : <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb1-18">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'d'</span> : <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,</span>
<span id="cb1-19">        },</span>
<span id="cb1-20">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'e'</span> : {</span>
<span id="cb1-21">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'f'</span> : <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,</span>
<span id="cb1-22">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'g'</span> : <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>,</span>
<span id="cb1-23">        }</span>
<span id="cb1-24">    },</span>
<span id="cb1-25">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'h'</span> : {</span>
<span id="cb1-26">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'i'</span> : {</span>
<span id="cb1-27">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'j'</span> : <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>,</span>
<span id="cb1-28">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'k'</span> : <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>,</span>
<span id="cb1-29">        },</span>
<span id="cb1-30">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'l'</span> : {</span>
<span id="cb1-31">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'m'</span> : <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>,</span>
<span id="cb1-32">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'n'</span> : <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>,</span>
<span id="cb1-33">        },</span>
<span id="cb1-34">    }</span>
<span id="cb1-35">}</span>
<span id="cb1-36"></span>
<span id="cb1-37"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> flatten_dict(d : <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>, parent_key <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span>, sep <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'_'</span>):</span>
<span id="cb1-38">    result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {}</span>
<span id="cb1-39">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> k,v <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> d.items():</span>
<span id="cb1-40">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span>(v) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">is</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>):</span>
<span id="cb1-41">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Recursively flatten the child element</span></span>
<span id="cb1-42">            child_flat_dict <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> flatten_dict(v, parent_key<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(k))</span>
<span id="cb1-43"></span>
<span id="cb1-44">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># We now have a dict-of-dicts of height 2</span></span>
<span id="cb1-45">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> child_k, child_v <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> child_flat_dict.items():</span>
<span id="cb1-46">                key <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> parent_key <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> sep <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> child_k <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> parent_key <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> child_k</span>
<span id="cb1-47">                result[key] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> child_v</span>
<span id="cb1-48">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb1-49">            key <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> parent_key <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> sep <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(k)</span>
<span id="cb1-50">            result[key] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> v</span>
<span id="cb1-51">            </span>
<span id="cb1-52">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> result</span>
<span id="cb1-53"></span>
<span id="cb1-54"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"flattening quotes</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb1-55">flatten_dict(quote_types)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>flattening quotes
</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="1">
<pre><code>{'Bids_1': [10, 45],
 'Bids_2': [25, 47.5],
 'Bids_3': [30, 49.5],
 'Offers_1': [30, 50.5],
 'Offers_2': [25, 52.5],
 'Offers_3': [10, 55]}</code></pre>
</div>
</div>
<div id="58d1a07a" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dict_of_height_3</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb4-2">flatten_dict(dict_of_height_3)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>dict_of_height_3
</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="2">
<pre><code>{'a_b_c': 1,
 'a_b_d': 2,
 'a_e_f': 3,
 'a_e_g': 4,
 'h_i_j': 5,
 'h_i_k': 6,
 'h_l_m': 7,
 'h_l_n': 8}</code></pre>
</div>
</div>
</section>
<section id="list-in-python" class="level2">
<h2 class="anchored" data-anchor-id="list-in-python"><code>list()</code> in Python</h2>
<p><code>list</code>s are mutable sequences typically used to store collections of homogenous items.</p>
<p><code>list.append(x:Any)-&gt;None</code> adds a single-item to the end of the list, <em>in-place</em>. <code>list.extend(Iterable)-&gt;None</code> extends the list <em>in-place</em> by appending all items from the iterable, and returns <code>None</code>.</p>
<p><code>list.insert(i,x)-&gt;None</code> inserts an element <code>x</code> at the given index <code>i</code>. <code>list.remove(x)</code> removes the first item from the list who value is equal to <code>x</code>. <code>list.pop([i])</code> removes the item at the given position in the list and returns it. If no index is specified, <code>list.pop()</code> removes and returns the last element in the list.</p>
</section>
<section id="reverse-a-list" class="level2">
<h2 class="anchored" data-anchor-id="reverse-a-list">Reverse a list</h2>
<div id="93a2e241" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> typing <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> List</span>
<span id="cb7-2">l <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>]</span>
<span id="cb7-3"></span>
<span id="cb7-4">l.reverse()  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># reverse in place</span></span>
<span id="cb7-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(l)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[5, 4, 3, 2, 1]</code></pre>
</div>
</div>
<div id="cd471399" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># recursive solution</span></span>
<span id="cb9-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> reverse(l : List, acc : List <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> List:</span>
<span id="cb9-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(l) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>):</span>
<span id="cb9-4">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> acc</span>
<span id="cb9-5">    </span>
<span id="cb9-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(l) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>):</span>
<span id="cb9-7">        l.extend(acc)</span>
<span id="cb9-8">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> l</span>
<span id="cb9-9">    </span>
<span id="cb9-10">    new_acc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [l[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]]</span>
<span id="cb9-11">    new_acc.extend(acc)</span>
<span id="cb9-12">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> reverse(l[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:], new_acc)</span>
<span id="cb9-13"></span>
<span id="cb9-14"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> reverse_iter(l : List) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> List:</span>
<span id="cb9-15">    result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb9-16">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> element <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> l:</span>
<span id="cb9-17">        result.insert(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, element)</span>
<span id="cb9-18"></span>
<span id="cb9-19">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> result</span>
<span id="cb9-20"></span>
<span id="cb9-21">items <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">17</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>]</span>
<span id="cb9-22">reverse(items)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="4">
<pre><code>[3, 15, 42, 17, 2]</code></pre>
</div>
</div>
</section>
<section id="determine-if-the-list-is-a-palindrome" class="level2">
<h2 class="anchored" data-anchor-id="determine-if-the-list-is-a-palindrome">Determine if the list is a palindrome</h2>
<div id="3adcc3bb" class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> typing <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> List</span>
<span id="cb11-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> is_palindrome(l : List) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">bool</span>:</span>
<span id="cb11-3">    n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(l)</span>
<span id="cb11-4">    i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb11-5">    j <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb11-6"></span>
<span id="cb11-7">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">while</span>(i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> j):</span>
<span id="cb11-8">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span>(l[i] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> l[j]):</span>
<span id="cb11-9">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb11-10">        </span>
<span id="cb11-11">        i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb11-12">        j <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb11-13"></span>
<span id="cb11-14">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb11-15"></span>
<span id="cb11-16"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(is_palindrome([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]))</span>
<span id="cb11-17"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(is_palindrome([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>True
True</code></pre>
</div>
</div>
</section>
<section id="flatten-a-nested-list" class="level2">
<h2 class="anchored" data-anchor-id="flatten-a-nested-list">Flatten a nested list</h2>
<div id="a799f3ba" class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb13-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> flatten_list(l : List):</span>
<span id="cb13-2">    result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb13-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> element <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> l:</span>
<span id="cb13-4">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span>(element) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">is</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>):</span>
<span id="cb13-5">            simple_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> flatten_list(element)</span>
<span id="cb13-6">            result.extend(simple_list)</span>
<span id="cb13-7">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb13-8">            result.append(element)</span>
<span id="cb13-9">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> result</span>
<span id="cb13-10"></span>
<span id="cb13-11">flatten_list([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'a'</span>, [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'b'</span>, [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'c'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'d'</span>], <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'e'</span>]])</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="6">
<pre><code>['a', 'b', 'c', 'd', 'e']</code></pre>
</div>
</div>
</section>
<section id="eliminate-consecutive-duplicates-of-list-elements" class="level2">
<h2 class="anchored" data-anchor-id="eliminate-consecutive-duplicates-of-list-elements">Eliminate consecutive duplicates of list elements</h2>
<p>Always use <code>key in my_dict</code> directly instead of <code>key in my_dict.keys()</code>, if you want to check the existence of a key in a <code>dict</code>. That will use the dictionary’s <img src="https://latex.codecogs.com/png.latex?O(1)"> hashing rather than <img src="https://latex.codecogs.com/png.latex?O(n)">. <code>my_dict.keys()</code> returns a list of keys.</p>
<div id="211846c7" class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb15-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> typing <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> List</span>
<span id="cb15-2"></span>
<span id="cb15-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Remove duplicates from a nested-list while preserving the</span></span>
<span id="cb15-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># the structure</span></span>
<span id="cb15-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> array_unique(l : List, unique_elements : <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>{}) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> (List,<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>):</span>
<span id="cb15-6">    result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb15-7">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> element <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> l:</span>
<span id="cb15-8">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span>(element) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">is</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>:</span>
<span id="cb15-9">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># get the list of unique children and append it to result</span></span>
<span id="cb15-10">            child_list, unique_elements <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> array_unique(element, unique_elements<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>unique_elements)</span>
<span id="cb15-11">            result.append(child_list)</span>
<span id="cb15-12">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb15-13">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> element <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> unique_elements:</span>
<span id="cb15-14">                <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">continue</span></span>
<span id="cb15-15">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb15-16">                result.append(element)</span>
<span id="cb15-17">                unique_elements[element] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb15-18"></span>
<span id="cb15-19">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> result, unique_elements</span>
<span id="cb15-20"></span>
<span id="cb15-21">my_array <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>], <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>], [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>], <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>]</span>
<span id="cb15-22">result, _ <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> array_unique(my_array)</span>
<span id="cb15-23">result</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="7">
<pre><code>[1, [2, [3], 4, 5], [6], 7]</code></pre>
</div>
</div>
</section>
<section id="list-comprehensions" class="level2">
<h2 class="anchored" data-anchor-id="list-comprehensions">List comprehensions</h2>
<div id="60f49632" class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb17-1">squares <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)]</span>
<span id="cb17-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(squares)</span>
<span id="cb17-3">combs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [(x,y,z) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> y <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> z <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)]</span>
<span id="cb17-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(combs)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[0, 1, 4, 9, 16]
[(0, 0, 0), (0, 0, 1), (0, 1, 0), (0, 1, 1), (1, 0, 0), (1, 0, 1), (1, 1, 0), (1, 1, 1)]</code></pre>
</div>
</div>
</section>
<section id="nested-list-comprehensions" class="level2">
<h2 class="anchored" data-anchor-id="nested-list-comprehensions">Nested List comprehensions</h2>
<div id="7121c66d" class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb19-1">matrix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb19-2">    [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>],</span>
<span id="cb19-3">    [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>],</span>
<span id="cb19-4">    [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>],</span>
<span id="cb19-5">]</span>
<span id="cb19-6"></span>
<span id="cb19-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Take the transpose of a matrix</span></span>
<span id="cb19-8">[[row[i] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> row <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> matrix]<span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="9">
<pre><code>[[1, 5, 9], [2, 6, 10], [3, 7, 11], [4, 8, 12]]</code></pre>
</div>
</div>
</section>
<section id="tuples-in-python" class="level2">
<h2 class="anchored" data-anchor-id="tuples-in-python"><code>tuple</code>s in Python</h2>
<p><code>list</code>s are mutable wherease <code>tuple</code>s are immutable types. The contents of a tuple cannot be modified at run-time. They usually store a heterogenous collection of items.</p>
</section>
<section id="sets-in-python" class="level2">
<h2 class="anchored" data-anchor-id="sets-in-python"><code>set</code>s in Python</h2>
<p>Python also includes a data-type for sets. A set is an unordered collection with no duplicate elements. Basic uses include membership testing and eliminating duplicate entries. Set objects also support mathematical operations such as union, intersection, difference and symmetric difference.</p>
<p>Curly braces or <code>set()</code> is used to create sets.</p>
<div id="9fff20c2" class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb21-1">a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'abracadabra'</span>)</span>
<span id="cb21-2">b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'alcazam'</span>)</span>
<span id="cb21-3"></span>
<span id="cb21-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(a)</span>
<span id="cb21-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> b)</span>
<span id="cb21-6"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span> b)</span>
<span id="cb21-7"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> b)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>{'a', 'd', 'c', 'b', 'r'}
{'d', 'b', 'r'}
{'m', 'a', 'd', 'c', 'z', 'l', 'b', 'r'}
{'c', 'a'}</code></pre>
</div>
</div>
</section>
<section id="python-3.8-walrus-operator" class="level2">
<h2 class="anchored" data-anchor-id="python-3.8-walrus-operator">Python 3.8 walrus <code>:=</code> operator</h2>
<p><code>:=</code> assigns a value to a variable and simultaneous returns the value. For example:</p>
<div id="a6e9f21c" class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb23-1">my_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>]</span>
<span id="cb23-2"></span>
<span id="cb23-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(my_list)):</span>
<span id="cb23-4">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"The list has non-zero length = </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>n<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>The list has non-zero length = 5</code></pre>
</div>
</div>
<p>Another motivating use-case is when looping over fixed-length blocks in a protocol parser.</p>
<div class="sourceCode" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb25-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Loop over fixed length blocks</span></span>
<span id="cb25-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">while</span> (block <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:=</span> f.read(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span>)) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span>:</span>
<span id="cb25-3">    process(block)</span></code></pre></div>


</section>

 ]]></description>
  <category>Python</category>
  <guid>http://quantdev.blog/posts/python-built-in-types/index.html</guid>
  <pubDate>Wed, 05 Mar 2025 00:00:00 GMT</pubDate>
  <media:content url="http://quantdev.blog/posts/python-built-in-types/python.jpeg" medium="image" type="image/jpeg"/>
</item>
</channel>
</rss>
