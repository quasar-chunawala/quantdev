<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>quantdev.blog</title>
<link>http://quantdev.blog/index.html</link>
<atom:link href="http://quantdev.blog/index.xml" rel="self" type="application/rss+xml"/>
<description>quantdev.blog</description>
<generator>quarto-1.3.450</generator>
<lastBuildDate>Thu, 19 Jun 2025 23:00:00 GMT</lastBuildDate>
<item>
  <title>deducing this</title>
  <dc:creator>Quasar </dc:creator>
  <link>http://quantdev.blog/posts/deducing-this/index.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>Member functions can be overloaded by <code>cv</code>-qualifiers and reference qualifiers <code>&amp;</code> (ref) and <code>&amp;&amp;</code> (ref-ref).</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp number-lines code-with-copy"><code class="sourceCode cpp"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/* </span></span>
<span id="cb1-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">Member functions can be overloaded by cv-qualifiers and </span></span>
<span id="cb1-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">reference qualifiers.</span></span>
<span id="cb1-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*/</span></span>
<span id="cb1-5"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;iostream&gt;</span></span>
<span id="cb1-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Implicit</span></span>
<span id="cb1-7"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> X<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb1-8">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> f<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;{</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>cout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> &lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"X::f() &amp;"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb1-9">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> f<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;{</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>cout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> &lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"X::f() const&amp;"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb1-10">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> f<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>cout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> &lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"X::f() &amp;&amp;"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb1-11">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> f<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>cout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> &lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"X::f() const&amp;&amp;"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb1-12"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb1-13"></span>
<span id="cb1-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//Explicit</span></span>
<span id="cb1-15"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> Y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb1-16">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> f<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">this</span> Y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;){</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>cout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> &lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Y::f() &amp;"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb1-17">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> f<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">this</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> Y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;){</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>cout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> &lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Y::f() const&amp;"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb1-18">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> f<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">this</span> Y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;){</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>cout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> &lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Y::f() &amp;&amp;"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb1-19">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> f<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">this</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> Y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;){</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>cout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> &lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Y::f() const &amp;&amp;"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb1-20"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb1-21"></span>
<span id="cb1-22"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> main<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(){</span></span>
<span id="cb1-23">    X x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> Y y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-24">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> X c_x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> Y c_y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-25"></span>
<span id="cb1-26">    x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>f<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb1-27">    c_x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>f<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb1-28">    X<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">().</span>f<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb1-29">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">const_cast</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> X<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;&gt;(</span>X<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()).</span>f<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb1-30"></span>
<span id="cb1-31">    y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>f<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb1-32">    c_y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>f<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb1-33">    Y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">().</span>f<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb1-34">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">const_cast</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> Y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;&gt;(</span>Y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()).</span>f<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb1-35">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-36"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p><a href="https://godbolt.org/z/ofYxKd95s">Compiler Explorer</a></p>
</section>
<section id="deducing-this-feature" class="level1">
<h1>deducing <code>this</code> feature</h1>
<p>If <code>const</code> and non-<code>const</code> overloads of a method and (ref)<code>&amp;</code> and (ref-ref)<code>&amp;&amp;</code> overloads share the same implementation, then we can de-duplicate these overloads and allow the compiler to automatically deduce the object type, on which the member function was invoked using this feature.</p>
<p>The real value of <code>deducing</code> this comes from using the type <code>Self</code> in some way in the body e.g.&nbsp;using <code>std::forward_like&lt;T,U&gt;</code> to propagate an owning-object’s value category to its member data.</p>
<p>Consider the following example. We are writing a homegrown version of <code>vector&lt;T&gt;</code> container and want to implement the <code>begin()</code> method.</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp number-lines code-with-copy"><code class="sourceCode cpp"><span id="cb2-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;iostream&gt;</span></span>
<span id="cb2-2"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;memory&gt;</span></span>
<span id="cb2-3"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;type_traits&gt;</span></span>
<span id="cb2-4"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;concepts&gt;</span></span>
<span id="cb2-5"></span>
<span id="cb2-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">template</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">typename</span> T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb2-7"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> vector<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb2-8">    T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_data</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-9">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>size_t<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> </span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_size</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-10">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>size_t<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> </span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_capacity</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-11"></span>
<span id="cb2-12">    vector<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span></span>
<span id="cb2-13">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_data</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">new</span> T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]}</span></span>
<span id="cb2-14">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_size</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb2-15">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_capacity</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb2-16">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span></span>
<span id="cb2-17"></span>
<span id="cb2-18">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">template</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">typename</span> U<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb2-19">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> Iterator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb2-20">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">using</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">difference_type</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>ptrdiff_t<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-21">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">using</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">value_type</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> U<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-22"></span>
<span id="cb2-23">        Iterator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">default</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-24"></span>
<span id="cb2-25">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">explicit</span> Iterator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>U<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb2-26">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_ptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb2-27">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span></span>
<span id="cb2-28"></span>
<span id="cb2-29">        U<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_ptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-30">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb2-31"></span>
<span id="cb2-32">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">using</span> iterator <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Iterator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;;</span></span>
<span id="cb2-33">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">using</span> const_iterator <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Iterator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;;</span></span>
<span id="cb2-34"></span>
<span id="cb2-35">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">auto</span> begin<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">this</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">auto</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;</span> self<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">){</span></span>
<span id="cb2-36">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> Iterator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>self<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_data</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb2-37">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//              ^----------</span></span>
<span id="cb2-38">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//               T* const, if self is const</span></span>
<span id="cb2-39">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//               T*, otherwise</span></span>
<span id="cb2-40">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb2-41"></span>
<span id="cb2-42">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">auto</span> end<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">this</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">auto</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;</span> self<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">){</span></span>
<span id="cb2-43">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> Iterator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>self<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_data</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> self<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_size</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb2-44">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb2-45"></span>
<span id="cb2-46">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>vector<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(){</span></span>
<span id="cb2-47">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">delete</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[]</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_data</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-48">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb2-49"></span>
<span id="cb2-50"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb2-51"></span>
<span id="cb2-52"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> main<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(){</span></span>
<span id="cb2-53"></span>
<span id="cb2-54">    vector<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">double</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> v<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-55">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> vector<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">double</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> cv<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-56"></span>
<span id="cb2-57">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">static_assert</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span></span>
<span id="cb2-58">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>is_same_v<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span></span>
<span id="cb2-59">            <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">decltype</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>v<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>begin<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()),</span></span>
<span id="cb2-60">            vector<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">double</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;::</span>Iterator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">double</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb2-61">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb2-62">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb2-63"></span>
<span id="cb2-64">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">static_assert</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span></span>
<span id="cb2-65">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>is_same_v<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span></span>
<span id="cb2-66">            <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">decltype</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>cv<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>begin<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()),</span></span>
<span id="cb2-67">            vector<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">double</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;::</span>Iterator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">double</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb2-68">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb2-69">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb2-70">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-71"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p><a href="https://godbolt.org/z/o16zrj6GT">Compiler Explorer</a></p>
<p>Instead of writing traditional <code>const</code> and non-<code>const</code> variants of <code>begin()</code>, we are using the deducing <code>this</code> feature to de-duplicate overloads.</p>
<p>While at the outset, this code might look fine, be warned that <code>std::is_same_v&lt;decltype(cv.begin()),vector&lt;double&gt;::Iterator&lt;const double&gt;&gt;</code> returns <code>false_type</code>. <code>T* m_data</code> of a <code>const</code> object becomes <code>T* const m_data</code>, that is <code>const</code> ends up on the top-level of that type. <code>const</code> qualifiers on the top-level <code>Iterator</code> class are then discarded when template argument deduction is performed on the implicit function-template powering the constructor call <code>Iterator(self.m_data)</code>. The client may write hostile code and modify the contents of the <code>const vector</code> through the iterator object. What we want is a pointer-to-<code>const T</code> instead of a <code>const</code>-pointer-to-<code>T</code>.</p>
<p>We can branch on the <code>const</code>-ness of <code>self</code> and return the correct iterator type.</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp number-lines code-with-copy"><code class="sourceCode cpp"><span id="cb3-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;iostream&gt;</span></span>
<span id="cb3-2"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;memory&gt;</span></span>
<span id="cb3-3"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;type_traits&gt;</span></span>
<span id="cb3-4"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;concepts&gt;</span></span>
<span id="cb3-5"></span>
<span id="cb3-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">template</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">typename</span> T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb3-7"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> vector<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb3-8">    T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_data</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-9">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>size_t<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> </span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_size</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-10">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>size_t<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> </span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_capacity</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-11"></span>
<span id="cb3-12">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">template</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">typename</span> U<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb3-13">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> Iterator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb3-14">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">using</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">difference_type</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>ptrdiff_t<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-15">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">using</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">value_type</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> U<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-16">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">using</span> reference <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> U<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;;</span></span>
<span id="cb3-17">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">using</span> const_reference <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> U<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;;</span></span>
<span id="cb3-18">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">using</span> pointer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> U<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*;</span></span>
<span id="cb3-19"></span>
<span id="cb3-20">        U<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_ptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-21"></span>
<span id="cb3-22">        Iterator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">default</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-23"></span>
<span id="cb3-24">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">explicit</span> Iterator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>U<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb3-25">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_ptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb3-26">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span></span>
<span id="cb3-27">        </span>
<span id="cb3-28">        Iterator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">operator</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++(){</span></span>
<span id="cb3-29">            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_ptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-30">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">this</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-31">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb3-32"></span>
<span id="cb3-33">        Iterator <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">operator</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">){</span></span>
<span id="cb3-34">            <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">auto</span> temp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{*</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">this</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb3-35">            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_ptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-36">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> temp<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-37">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb3-38"></span>
<span id="cb3-39">        Iterator <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">operator</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">){</span></span>
<span id="cb3-40">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> Iterator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_ptr</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb3-41">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb3-42"></span>
<span id="cb3-43">        U<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">operator</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*(){</span></span>
<span id="cb3-44">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_ptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-45">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb3-46"></span>
<span id="cb3-47">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">auto</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">operator</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=&gt;(</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> Iterator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> other<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb3-48">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_ptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=&gt;</span>other<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_ptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-49">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb3-50"></span>
<span id="cb3-51">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">bool</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">operator</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==(</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> Iterator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> other<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb3-52">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_ptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span>other<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_ptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-53">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb3-54">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb3-55"></span>
<span id="cb3-56">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">using</span> iterator <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Iterator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;;</span></span>
<span id="cb3-57">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">using</span> const_iterator <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Iterator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;;</span></span>
<span id="cb3-58"></span>
<span id="cb3-59">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">auto</span> begin<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">this</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">auto</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;</span> self<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">){</span></span>
<span id="cb3-60">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">constexpr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>is_const_v<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>remove_reference_t<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">decltype</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>self<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)&gt;&gt;)</span></span>
<span id="cb3-61">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> const_iterator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>self<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_data</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb3-62">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span></span>
<span id="cb3-63">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> iterator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>self<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_data</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb3-64">            </span>
<span id="cb3-65">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb3-66"></span>
<span id="cb3-67">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">auto</span> end<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">this</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">auto</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;</span> self<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">){</span></span>
<span id="cb3-68">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">constexpr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>is_const_v<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>remove_reference_t<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">decltype</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>self<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)&gt;&gt;)</span></span>
<span id="cb3-69">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> const_iterator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>self<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_data</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> self<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_size</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb3-70">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span></span>
<span id="cb3-71">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> iterator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>self<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_data</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb3-72">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb3-73"></span>
<span id="cb3-74">    vector<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>size_t<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> </span>n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb3-75">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_data</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">static_cast</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*&gt;(::</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">operator</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">new</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">sizeof</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">))</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb3-76">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_size</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb3-77">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_capacity</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb3-78">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb3-79">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">auto</span> p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>begin<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()};</span></span>
<span id="cb3-80">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">try</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb3-81">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(;</span>p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>begin<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()+</span>n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);++</span>p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb3-82">                <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">new</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">static_cast</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*&gt;(</span>p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_ptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">))</span> T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb3-83">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb3-84">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">catch</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(...){</span></span>
<span id="cb3-85">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">auto</span> q<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>begin<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()};</span> q<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span>p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++</span>q<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb3-86">                q<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_ptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;~</span>T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb3-87">            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">operator</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">delete</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_data</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb3-88">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">throw</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-89">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb3-90"></span>
<span id="cb3-91">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_size</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-92">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb3-93"></span>
<span id="cb3-94">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>vector<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(){</span></span>
<span id="cb3-95">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>destroy<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>begin<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(),</span> end<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">());</span></span>
<span id="cb3-96">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">operator</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">delete</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_data</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb3-97">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb3-98"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb3-99"></span>
<span id="cb3-100"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">template</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">typename</span> IterType<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb3-101"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> foo<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>IterType iter<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">){</span></span>
<span id="cb3-102">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>cout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> &lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"foo(IterType iter)"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">", *iter = "</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>iter<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-103"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb3-104"></span>
<span id="cb3-105"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> main<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(){</span></span>
<span id="cb3-106">    vector v<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb3-107">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> vector cv<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb3-108">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">static_assert</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span></span>
<span id="cb3-109">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>is_same_v<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span></span>
<span id="cb3-110">            <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">decltype</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>v<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>begin<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()),</span></span>
<span id="cb3-111">            vector<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">double</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;::</span>Iterator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">double</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb3-112">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb3-113">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb3-114"></span>
<span id="cb3-115">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">static_assert</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span></span>
<span id="cb3-116">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>is_same_v<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span></span>
<span id="cb3-117">            <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">decltype</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>cv<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>begin<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()),</span></span>
<span id="cb3-118">            vector<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">double</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;::</span>Iterator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">double</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb3-119">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb3-120">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb3-121"></span>
<span id="cb3-122">    foo<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>vector<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">).</span>begin<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">());</span></span>
<span id="cb3-123">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-124"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p><a href="https://godbolt.org/z/nhfhW6z14">Compiler Explorer</a></p>
</section>
<section id="a-small-digression---auto-deduction-rules" class="level1">
<h1>A small digression - <code>auto</code> deduction rules</h1>
<p>In the below code snippet, can you tell why the static assertion passes?</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp number-lines code-with-copy"><code class="sourceCode cpp"><span id="cb4-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;iostream&gt;</span></span>
<span id="cb4-2"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;concepts&gt;</span></span>
<span id="cb4-3"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;type_traits&gt;</span></span>
<span id="cb4-4"></span>
<span id="cb4-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">template</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">typename</span> T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb4-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> Wrapper<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb4-7">    T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_data</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-8"></span>
<span id="cb4-9">    Wrapper<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> val<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb4-10">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_data</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">new</span> T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>val<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)}</span></span>
<span id="cb4-11">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span></span>
<span id="cb4-12"></span>
<span id="cb4-13">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">auto</span> get<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">this</span> Wrapper<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> self<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">){</span></span>
<span id="cb4-14">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> self<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_data</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-15">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb4-16"></span>
<span id="cb4-17">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">auto</span> get<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">this</span> Wrapper <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> self<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">){</span></span>
<span id="cb4-18">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> self<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_data</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-19">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb4-20"></span>
<span id="cb4-21">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">auto</span> get<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">this</span> Wrapper<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;</span> self<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">){</span></span>
<span id="cb4-22">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> self<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_data</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-23">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb4-24"></span>
<span id="cb4-25">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">auto</span> get<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">this</span> Wrapper <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;</span> self<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">){</span></span>
<span id="cb4-26">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> self<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_data</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-27">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb4-28"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb4-29"></span>
<span id="cb4-30"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> main<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(){</span></span>
<span id="cb4-31">    Wrapper<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> wrapper<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb4-32">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> Wrapper<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> const_wrapper<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb4-33"></span>
<span id="cb4-34">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">static_assert</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>is_same_v<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span></span>
<span id="cb4-35">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">decltype</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>const_wrapper<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>get<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()),</span></span>
<span id="cb4-36">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span></span>
<span id="cb4-37">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;);</span></span>
<span id="cb4-38"></span>
<span id="cb4-39">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// const_wrapper.m_data = new int(10);  m_data is immutable</span></span>
<span id="cb4-40">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>const_wrapper<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_data</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-41">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-42"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p><a href="https://compiler-explorer.com/z/bGMPYT6vh">Compiler Explorer</a></p>
<p>The static assertion passes, because <code>get()</code> returns <code>auto</code>. It is, as if, we are returning by value. <code>auto</code> always deduces a non-<code>const</code>, non-reference object.</p>
</section>
<section id="propagating-the-value-category-of-the-owning-object" class="level1">
<h1>Propagating the value category of the owning object</h1>
<p>Consider a highly simplified version of <code>optional&lt;T&gt;</code> which is a wrapper type for representing nullable <code>T</code> objects which may/may not contain a value.</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp number-lines code-with-copy"><code class="sourceCode cpp"><span id="cb5-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">template</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">typename</span> T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb5-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> optional<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb5-3">    T <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_storage</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb5-4">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">bool</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_is_initialized</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb5-5"></span>
<span id="cb5-6">    optional<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>T <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> v<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb5-7">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_storage</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span></span>
<span id="cb5-8">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_is_initialized</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">true</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb5-9">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb5-10">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">operator</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">new</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">static_cast</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*&gt;&amp;</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_storage</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>v<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">));</span></span>
<span id="cb5-11">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb5-12"></span>
<span id="cb5-13">    optional<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span></span>
<span id="cb5-14">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_storage</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span></span>
<span id="cb5-15">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_is_initialized</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">false</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb5-16">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span></span>
<span id="cb5-17"></span>
<span id="cb5-18">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/* ... */</span></span>
<span id="cb5-19"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span></code></pre></div>
<p>From a design perspective, we would like that getters such as <code>optional&lt;T&gt;::get()</code> should propagate the value-category of the owning object to it’s member data.</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp number-lines code-with-copy"><code class="sourceCode cpp"><span id="cb6-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;utility&gt;</span></span>
<span id="cb6-2"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;iostream&gt;</span></span>
<span id="cb6-3"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;type_traits&gt;</span></span>
<span id="cb6-4"></span>
<span id="cb6-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">template</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">typename</span> T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb6-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> optional<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb6-7">    T <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_storage</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb6-8">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">bool</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_is_initialized</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb6-9"></span>
<span id="cb6-10">    optional<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>T <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> v<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb6-11">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_storage</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span></span>
<span id="cb6-12">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_is_initialized</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">true</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb6-13">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb6-14">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">new</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">static_cast</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*&gt;(&amp;</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_storage</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">))</span> T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>v<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// placement new</span></span>
<span id="cb6-15">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb6-16">    </span>
<span id="cb6-17">    optional<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span></span>
<span id="cb6-18">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_storage</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span></span>
<span id="cb6-19">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_is_initialized</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">false</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb6-20">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span></span>
<span id="cb6-21"></span>
<span id="cb6-22">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">template</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">typename</span> Self<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb6-23">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">decltype</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">auto</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> value<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">this</span> Self<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;</span> self<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">){</span></span>
<span id="cb6-24">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">constexpr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>is_const_v<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>remove_reference_t<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>Self<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;){</span></span>
<span id="cb6-25">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// const T&amp;&amp; is rare</span></span>
<span id="cb6-26">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">static_cast</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&gt;(</span>self<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_storage</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb6-27">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb6-28">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>forward<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">decltype</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>self<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)&gt;(</span>self<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">).</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_storage</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb6-29">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb6-30">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb6-31"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb6-32"></span>
<span id="cb6-33"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> main<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(){</span></span>
<span id="cb6-34">    optional<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">double</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> opt_d<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">42.0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb6-35">    opt_d<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>value<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb6-36"></span>
<span id="cb6-37">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> optional<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">double</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> copt_d<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">5.0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb6-38">    copt_d<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>value<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb6-39"></span>
<span id="cb6-40">    optional<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">double</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;(</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">17.0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">).</span>value<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb6-41">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">static_cast</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>optional<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">double</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&amp;&amp;&gt;(</span>optional<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">double</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;(</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">28.0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)).</span>value<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb6-42">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb6-43"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p><a href="https://compiler-explorer.com/z/1z9T6d1W9">Compiler Explorer</a></p>
<p>One function template does it. This is equivalent to writing:</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp number-lines code-with-copy"><code class="sourceCode cpp"><span id="cb7-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;utility&gt;</span></span>
<span id="cb7-2"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;iostream&gt;</span></span>
<span id="cb7-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">template</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">typename</span> T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb7-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> optional<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb7-5">    T <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_storage</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb7-6">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">bool</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_is_initialized</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb7-7"></span>
<span id="cb7-8">    optional<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>T <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> v<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb7-9">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_storage</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>v<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb7-10">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_is_initialized</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">true</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb7-11">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span></span>
<span id="cb7-12"></span>
<span id="cb7-13">    optional<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span></span>
<span id="cb7-14">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_storage</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span></span>
<span id="cb7-15">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_is_initialized</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">false</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb7-16">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span></span>
<span id="cb7-17"></span>
<span id="cb7-18">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/*</span></span>
<span id="cb7-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    template&lt;typename Self&gt;</span></span>
<span id="cb7-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    decltype(auto) value(this Self&amp;&amp; self){</span></span>
<span id="cb7-21"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        if constexpr(std::is_const_v&lt;std::remove_reference_t&lt;Self&gt;&gt;){</span></span>
<span id="cb7-22"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            // const T&amp;&amp; is rare</span></span>
<span id="cb7-23"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            return static_cast&lt;const T&amp;&gt;(self.m_storage);</span></span>
<span id="cb7-24"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        } else {</span></span>
<span id="cb7-25"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            return std::forward&lt;decltype(self)&gt;(self).m_storage;</span></span>
<span id="cb7-26"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        }</span></span>
<span id="cb7-27"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    }</span></span>
<span id="cb7-28"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    */</span></span>
<span id="cb7-29">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">decltype</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">auto</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> value<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">this</span> optional<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> self<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">){</span></span>
<span id="cb7-30">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>cout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> &lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"value(this optional&amp;)"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb7-31">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> self<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_storage</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb7-32">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb7-33"></span>
<span id="cb7-34">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">decltype</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">auto</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> value<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">this</span> optional <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> self<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">){</span></span>
<span id="cb7-35">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>cout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> &lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"value(this optional const&amp;)"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb7-36">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">static_cast</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;(</span>self<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_storage</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb7-37">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb7-38"></span>
<span id="cb7-39">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">decltype</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">auto</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> value<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">this</span> optional<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;</span> self<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">){</span></span>
<span id="cb7-40">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>cout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> &lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"value(this optional &amp;&amp;)"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb7-41">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>move<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>self<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">).</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_storage</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb7-42">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb7-43"></span>
<span id="cb7-44">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">decltype</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">auto</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> value<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">this</span> optional <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;</span> self<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">){</span></span>
<span id="cb7-45">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>cout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> &lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"value(this optional const &amp;&amp;)"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb7-46">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">static_cast</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;((</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>move<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>self<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">).</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_storage</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">));</span></span>
<span id="cb7-47">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb7-48"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb7-49"></span>
<span id="cb7-50"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> main<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(){</span></span>
<span id="cb7-51">    optional<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">double</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> opt_d<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">42.0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb7-52">    opt_d<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>value<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb7-53"></span>
<span id="cb7-54">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> optional<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">double</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> copt_d<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">5.0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb7-55">    copt_d<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>value<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb7-56"></span>
<span id="cb7-57">    optional<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">double</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;(</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">17.0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">).</span>value<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb7-58">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">static_cast</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>optional<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">double</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;&gt;(</span>optional<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">double</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;(</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">28.0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)).</span>value<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb7-59">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb7-60"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p><a href="https://godbolt.org/z/nK4TqnaP6">Compiler Explorer</a></p>
</section>
<section id="getter-return-types" class="level1">
<h1>Getter return types</h1>
<p>We can employ a little recipe for the return type. We needed to propagate both <code>const</code>-ness and the value category of the owning object <code>option&lt;T&gt;</code> to its <code>T m_data</code> data-member.</p>
<p>Instead of branching on <code>const</code>-ness of <code>optional</code>, we could use <code>std::forward_like&lt;T,U&gt;</code> defined in the <code>&lt;utility&gt;</code> header.</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp number-lines code-with-copy"><code class="sourceCode cpp"><span id="cb8-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;utility&gt;</span></span>
<span id="cb8-2"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;iostream&gt;</span></span>
<span id="cb8-3"></span>
<span id="cb8-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">template</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">typename</span> T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb8-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> optional<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb8-6">    T <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_storage</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb8-7">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">bool</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_is_initialized</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb8-8"></span>
<span id="cb8-9">    optional<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>T <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> v<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb8-10">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_storage</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>v<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb8-11">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_is_initialized</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">true</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb8-12">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span></span>
<span id="cb8-13"></span>
<span id="cb8-14">    optional<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span></span>
<span id="cb8-15">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_storage</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span></span>
<span id="cb8-16">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_is_initialized</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">false</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb8-17">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span></span>
<span id="cb8-18"></span>
<span id="cb8-19">    </span>
<span id="cb8-20">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">template</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">typename</span> Self<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb8-21">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">auto</span> value<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">this</span> Self<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;</span> self<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">decltype</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">auto</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">){</span></span>
<span id="cb8-22">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>forward_like<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>Self<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;(</span>self<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_storage</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb8-23">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb8-24"></span>
<span id="cb8-25"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb8-26"></span>
<span id="cb8-27"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> main<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(){</span></span>
<span id="cb8-28">    optional<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">double</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> opt_d<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">42.0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb8-29">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">double</span> result1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> opt_d<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>value<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb8-30"></span>
<span id="cb8-31">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> optional<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">double</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> copt_d<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">5.0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb8-32">    copt_d<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>value<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb8-33"></span>
<span id="cb8-34">    optional<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">double</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;(</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">17.0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">).</span>value<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb8-35">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">static_cast</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>optional<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">double</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;&gt;(</span>optional<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">double</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;(</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">28.0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)).</span>value<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb8-36">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb8-37"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p><a href="https://godbolt.org/z/GKj9W16v1">Compiler Explorer</a></p>


</section>

 ]]></description>
  <category>C++</category>
  <guid>http://quantdev.blog/posts/deducing-this/index.html</guid>
  <pubDate>Thu, 19 Jun 2025 23:00:00 GMT</pubDate>
  <media:content url="http://quantdev.blog/posts/deducing-this/cpp.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>A bounded SPSC lock-free queue implementation</title>
  <dc:creator>Quasar </dc:creator>
  <link>http://quantdev.blog/posts/spsc_lockfree_queue/index.html</link>
  <description><![CDATA[ 




<section id="designing-the-spsc_queue-data-structure" class="level1">
<h1>Designing the <code>spsc_queue</code> data-structure</h1>
<p>There are several important performance considerations, when implementing an SPSC lock-free queue.</p>
<section id="read_index-and-write_index-indices" class="level2">
<h2 class="anchored" data-anchor-id="read_index-and-write_index-indices"><code>read_index</code> and <code>write_index</code> indices</h2>
<p>A queue needs to keep track of the <code>read_index</code> (the head of the queue) and the <code>write_index</code> (the tail of the queue). These indices should be atomically incremented.</p>
</section>
<section id="why-implementing-growing-lock-free-queues-is-much-harder" class="level2">
<h2 class="anchored" data-anchor-id="why-implementing-growing-lock-free-queues-is-much-harder">Why implementing growing lock-free queues is much harder?</h2>
<p>Lock-free queues are generally bounded queues. Imagine a scenario where the underlying data-structure of a lock-free queue is <code>std::vector&lt;T&gt;</code> which can grow dynamically in size.</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp number-lines code-with-copy"><code class="sourceCode cpp"><span id="cb1-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> spsc_queue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb1-2">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>vector<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_buffer</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-3">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>atomic<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>size_t<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_write_index</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb1-4">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>atomic<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>size_t<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_read_index</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb1-5"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span></code></pre></div>
<p>Now, a writer thread <code>W</code> that wants to write an element to the queue, performs <code>push_back()</code> on the vector. Assume that the vector’s <code>size() == capacity()</code>, so it is full. Internally the vector does the following steps:</p>
<ul>
<li><p>A new heap memory allocation is performed with a larger capacity equal to two times the original capacity.</p></li>
<li><p>Move/copy construct elements of type <code>T</code> from the old memory block to the new memory block.</p></li>
<li><p>Free the old memory block.</p></li>
</ul>
<p><code>m_buffer</code> is reassigned to the new memory block. Since there is more room for the new element, it Will be copied/moved to <code>m_buffer[write_index + 1]</code>.</p>
<p>At this point a reader thread <code>R</code> wants to pop an element off the queue.</p>
<p>The writer thread <code>W</code>, however, hasn’t synchronized with the reader thread <code>R</code>.</p>
<p>So, the reader thread <code>R</code> accesses <code>m_buffer[read_index]</code>. However, in this thread <code>m_buffer</code> still refers to the old memory block. This is UB(undefined behavior).</p>
<p>Consequently, lock-free queues are usually bounded. You can implement growing lock-free queues, it’s much harder and potentially has higher overhead compared to a fixed-capacity queue.</p>
</section>
<section id="cache-lines-and-cache-coherency." class="level2">
<h2 class="anchored" data-anchor-id="cache-lines-and-cache-coherency.">Cache lines and cache coherency.</h2>
<p>A cache-line is typically <img src="https://latex.codecogs.com/png.latex?64">-bytes on most machines.</p>
<p>If cache line X is in the cache of multiple cores, and one of these cores mutates its data, then the change must be reflected in all the cores owning X via a cache coherency mechanism</p>
<p>For simplicity, suppose there are <img src="https://latex.codecogs.com/png.latex?2"> cores - A and B. Further assume, that core A reads and writes to a variable <code>a</code>, core B reads and writes to a variable <code>b</code>, and <code>a</code> and <code>b</code> are close to each other in main memory - they are on the same cache line.</p>
<p>Core A first reads the value of <code>a</code> from main memory. It therefore loads the entire cache line and marks it as <strong>exclusive</strong> access as it is the only core operating on this cache line. Core B decides to read the value of <code>b</code>. Since, <code>a</code> and <code>b</code> are close and reside on the same cache line, Core B loads the same cache line and both cores tag their cache lines as <strong>shared</strong> access.</p>
<p>Now, let’s suppose core A decides to change the value of <code>a</code>. The core A stores this change only in its store buffer and marks its cache line as <strong>modified</strong>. It also communicates this change to core B, and this core in turn will mark its cache as <strong>invalidated</strong>.</p>
<p>That’s how different cores ensure their caches are coherent with each other.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="http://quantdev.blog/posts/spsc_lockfree_queue/https:/wiki.cdot.senecapolytechnic.ca/w/imgs/CPUCacheline.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">CPU Cache line</figcaption>
</figure>
</div>
</section>
<section id="false-sharing" class="level2">
<h2 class="anchored" data-anchor-id="false-sharing">False Sharing</h2>
<p>False-sharing occurs when threads on different processors modify different variables residing on the same cache-line.</p>
<p>What happens now, when core B decides to re-read the value of <code>b</code>? Since, the cache line for core B is invalidated, it should now read the value of <code>b</code> from main memory again. This will force the core A to flush its store buffer, and then core B re-fetches the latest cache-line version from main memory. Both cores end up with the latest cache-line version in the <strong>shared</strong> state again.</p>
<p>So, this imposes a cache miss to one core and an early buffer flush to another one, even though the two cores weren’t operating on the same memory location. This is called <strong>false-sharing</strong>.</p>
<p>Keeping objects close in memory is often very desirable for performance reasons. False sharing is a potential risk for multithreaded applications that mutate data.</p>
</section>
<section id="avoiding-false-sharing" class="level2">
<h2 class="anchored" data-anchor-id="avoiding-false-sharing">Avoiding false sharing</h2>
<p>To avoid false-sharing, the <a href="https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0154r1.html"><code>std::hardware_destructive_interference_size</code></a> constant defined in the <code>thread</code> header, is used to determine the cache-line size and is to be used with <code>alignas()</code>.</p>
<p>So, we define our <code>spspc_queue</code> class as follows:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp number-lines code-with-copy"><code class="sourceCode cpp"><span id="cb2-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">template</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>Queueable T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>size_t<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> </span>N<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb2-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> spsc_queue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb2-3">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb2-4">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">using</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">size_type</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>size_t<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-5">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">using</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">value_type</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-6">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">using</span> reference <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;;</span></span>
<span id="cb2-7"></span>
<span id="cb2-8">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">static</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">constexpr</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>size_t<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> </span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_capacity</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> N<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb2-9">        T <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_buffer</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_capacity</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb2-10">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">alignas</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>hardware_destructive_interference_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>atomic<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>size_t<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_read_index</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb2-11">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">alignas</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>hardware_destructive_interference_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>atomic<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>size_t<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_write_index</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb2-12">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span></code></pre></div>
</section>
<section id="implementing-try_push-and-try_pop-methods" class="level2">
<h2 class="anchored" data-anchor-id="implementing-try_push-and-try_pop-methods">Implementing <code>try_push</code> and <code>try_pop</code> methods</h2>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp number-lines code-with-copy"><code class="sourceCode cpp"><span id="cb3-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;iostream&gt;</span></span>
<span id="cb3-2"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;atomic&gt;</span></span>
<span id="cb3-3"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;type_traits&gt;</span></span>
<span id="cb3-4"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;concepts&gt;</span></span>
<span id="cb3-5"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;vector&gt;</span></span>
<span id="cb3-6"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;optional&gt;</span></span>
<span id="cb3-7"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;thread&gt;</span></span>
<span id="cb3-8"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;math.h&gt;</span></span>
<span id="cb3-9"></span>
<span id="cb3-10"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">namespace</span> dev<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb3-11">    </span>
<span id="cb3-12">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">template</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">typename</span> T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb3-13">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">concept</span> Queueable <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>default_initializable<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>move_constructible<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;;</span></span>
<span id="cb3-14"></span>
<span id="cb3-15">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/**</span></span>
<span id="cb3-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">     * </span><span class="an" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@brief</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> The `spsc_queue` class provides a single-reader, single-writer</span></span>
<span id="cb3-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">     * fifo queue. </span></span>
<span id="cb3-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">     */</span></span>
<span id="cb3-19">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">template</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>Queueable T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>size_t<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> </span>N<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb3-20">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> spsc_queue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb3-21">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb3-22">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">using</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">size_type</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>size_t<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-23">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">using</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">value_type</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-24">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">using</span> reference <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;;</span></span>
<span id="cb3-25"></span>
<span id="cb3-26">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">static</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">constexpr</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>size_t<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> </span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_capacity</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> N<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)};</span></span>
<span id="cb3-27">        T <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_buffer</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_capacity</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb3-28">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">alignas</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>hardware_destructive_interference_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>atomic<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>size_t<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_read_index</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb3-29">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">alignas</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>hardware_destructive_interference_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>atomic<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>size_t<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_write_index</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb3-30"></span>
<span id="cb3-31">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb3-32">        spsc_queue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">default</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-33">        spsc_queue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> spsc_queue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">delete</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-34">        spsc_queue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">operator</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=(</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> spsc_queue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">delete</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-35">        spsc_queue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>spsc_queue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">delete</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-36">        spsc_queue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">operator</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=(</span>spsc_queue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">delete</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-37"></span>
<span id="cb3-38">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/**</span></span>
<span id="cb3-39"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">         * </span><span class="an" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@brief</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> pushes an element onto the ringbuffer.</span></span>
<span id="cb3-40"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">         * </span><span class="an" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@param</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> </span><span class="cv" style="color: #5E5E5E;
background-color: null;
font-style: italic;">`element`</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> will be pushed to the queue unless the queue is not full</span></span>
<span id="cb3-41"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">         */</span></span>
<span id="cb3-42">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">template</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">typename</span> U<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb3-43">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">requires</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>is_convertible_v<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span>U<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb3-44">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">bool</span> try_push<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>U<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;</span> element<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">){</span></span>
<span id="cb3-45">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>size_t<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> </span>write_index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_write_index</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>load<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>memory_order_relaxed<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb3-46">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>size_t<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> </span>next_write_index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>write_index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_capacity</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb3-47"></span>
<span id="cb3-48">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>next_write_index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_read_index</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>load<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>memory_order_acquire<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">))</span></span>
<span id="cb3-49">            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb3-50">                <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_buffer</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>write_index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>forward<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>U<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;(</span>element<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb3-51">                <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_write_index</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>store<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>next_write_index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>memory_order_release<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb3-52">                <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">true</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-53">            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span>   </span>
<span id="cb3-54">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">false</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-55">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb3-56">        </span>
<span id="cb3-57">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>optional<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> try_pop<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(){</span></span>
<span id="cb3-58">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>optional<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> result<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>nullopt<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb3-59">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>size_t<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> </span>read_index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_read_index</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>load<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>memory_order_relaxed<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb3-60"></span>
<span id="cb3-61">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>read_index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_write_index</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>load<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>memory_order_acquire<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">))</span></span>
<span id="cb3-62">                <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> result<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-63"></span>
<span id="cb3-64">            result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>move<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_buffer</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>read_index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]);</span></span>
<span id="cb3-65">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_read_index</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>store<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">((</span>read_index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_capacity</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">),</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>memory_order_release<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb3-66">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> result<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-67">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb3-68">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb3-69"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>


</section>
</section>

 ]]></description>
  <category>C++</category>
  <guid>http://quantdev.blog/posts/spsc_lockfree_queue/index.html</guid>
  <pubDate>Sat, 07 Jun 2025 23:00:00 GMT</pubDate>
  <media:content url="http://quantdev.blog/posts/spsc_lockfree_queue/cpp.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Storage Durations in C++</title>
  <dc:creator>Quasar </dc:creator>
  <link>http://quantdev.blog/posts/storage-duration/index.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>Two key properties of an object in C++ are storage and linkage.</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p><strong>Storage Duration.</strong> The storage duration is the property of an object that defines the minimum potential lifetime of the storage containing the object. The storage duration is determined by the construct used to create the object.</p>
</div>
</div>
<p>An object in C++ has one of the following storage durations:</p>
<ul>
<li><p><code>automatic</code> : Automatic means that the storage is allocated at the start of the scope. Most local variables have <code>automatic</code> storage duration (except those declared as <code>static</code>, <code>extern</code> or <code>thread_local</code> ).</p></li>
<li><p><code>static</code> : The storage for an object is allocated when the program begins usually before the <code>main()</code> function starts and is deallocated when the program ends. There’s only one instance of such an object in the whole program.</p></li>
<li><p><code>thread</code> : The storage for an object is tied to a thread: it’s started when a thread begins and is deallocated when the thread ends. Each thread has its own copy of the object.</p></li>
<li><p><code>dynamic</code> : The storage for an object is allocated and deallocated using explicit dynamic memory allocation functions.</p></li>
</ul>
<p>The definition of the second property linkage from the standard is as follows:</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p><strong>Linkage.</strong> A name is said to have a linkage when it can denote the same object, reference , function type, template, namespace as a name introduced in another scope.</p>
</div>
</div>
<p>We can have several linkage types:</p>
<ul>
<li><code>external</code> linkage : External means that the name can be referred to in scopes within the same translation unit or outside. Non-<code>const</code> global variables have <code>extern</code> storage duration.</li>
</ul>


</section>

 ]]></description>
  <category>C++</category>
  <guid>http://quantdev.blog/posts/storage-duration/index.html</guid>
  <pubDate>Wed, 21 May 2025 23:00:00 GMT</pubDate>
  <media:content url="http://quantdev.blog/posts/storage-duration/cpp.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>The virtual keyword</title>
  <dc:creator>Quasar </dc:creator>
  <link>http://quantdev.blog/posts/virtualization/index.html</link>
  <description><![CDATA[ 




<section id="virtual-functions" class="level1">
<h1><code>virtual</code> functions</h1>
<p>The <code>virtual</code> keyword specifies that a non-static member function is <code>virtual</code> and supports dynamic dispatch. It may only appear in the initial declaration of a non-static member function (i.e., when it is declared in the class definition).</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp number-lines code-with-copy"><code class="sourceCode cpp"><span id="cb1-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;iostream&gt;</span></span>
<span id="cb1-2"></span>
<span id="cb1-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> Base</span>
<span id="cb1-4"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb1-5">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb1-6">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> foo<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(){</span></span>
<span id="cb1-7">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>cout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> &lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Base::foo()"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-8">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb1-9"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb1-10"></span>
<span id="cb1-11"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> Derived <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> Base<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb1-12">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb1-13">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> foo<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(){</span></span>
<span id="cb1-14">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>cout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> &lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Derived::foo()"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-15">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb1-16"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb1-17"></span>
<span id="cb1-18"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> main<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(){</span></span>
<span id="cb1-19">    Base base_obj<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-20">    Derived derived_obj<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-21">    Base<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> base_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">nullptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb1-22"></span>
<span id="cb1-23">    base_ptr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span>base_obj<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-24">    base_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span>foo<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb1-25"></span>
<span id="cb1-26">    base_ptr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span>derived_obj<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-27">    base_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span>foo<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb1-28">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-29"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p>Run at <a href="https://godbolt.org/z/jG9bG4Yrs">Compiler Explorer</a></p>
<p>Output:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource shell number-lines code-with-copy"><code class="sourceCode"><span id="cb2-1">Base::foo()</span>
<span id="cb2-2">Base::foo()</span></code></pre></div>
<p>The version of <code>foo</code> invoked is determined at compile time, based on the pointer type.</p>
<p>If we declare the <code>foo()</code> as a virtual method, then the version of <code>foo()</code> invoked is resolved dynamically on-the-fly depending on <strong>the type of object being pointed to</strong> (<em>pointee</em>).</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp number-lines code-with-copy"><code class="sourceCode cpp"><span id="cb3-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;iostream&gt;</span></span>
<span id="cb3-2"></span>
<span id="cb3-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> Base</span>
<span id="cb3-4"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb3-5">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb3-6">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">virtual</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> foo<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(){</span></span>
<span id="cb3-7">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>cout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> &lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Base::foo()"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-8">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb3-9"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb3-10"></span>
<span id="cb3-11"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> Derived <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> Base<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb3-12">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb3-13">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> foo<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">override</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//override is optional</span></span>
<span id="cb3-14">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>cout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> &lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Derived::foo()"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-15">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb3-16"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb3-17"></span>
<span id="cb3-18"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> main<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(){</span></span>
<span id="cb3-19">    Base b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-20">    Derived d<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-21">    </span>
<span id="cb3-22">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Virtual function call through reference</span></span>
<span id="cb3-23">    Base<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> br <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span>   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// the type of br is Base&amp;</span></span>
<span id="cb3-24">    Base<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> dr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> d<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span>   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// the type of dr is Base&amp;</span></span>
<span id="cb3-25">    br<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>foo<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span>       <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Calls Base::foo()</span></span>
<span id="cb3-26">    dr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>foo<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span>       <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Calls Derived::foo()</span></span>
<span id="cb3-27"></span>
<span id="cb3-28">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Virtual function call through pointers</span></span>
<span id="cb3-29">    Base<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> bp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span>b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// type of bp is Base*</span></span>
<span id="cb3-30">    Base<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> dp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span>d<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// type of dp is Base* as well</span></span>
<span id="cb3-31">    bp<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span>foo<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span>      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Calls Base::foo()</span></span>
<span id="cb3-32">    dp<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span>foo<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span>      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Calls Derived::foo()</span></span>
<span id="cb3-33"></span>
<span id="cb3-34">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Non-virtual function calls</span></span>
<span id="cb3-35">    br<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>Base<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>foo<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb3-36">    dr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>Base<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>foo<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb3-37">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-38"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p>Run at <a href="https://godbolt.org/z/aYhbofMPb">Compiler Explorer</a></p>
<p>Output:</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode numberSource shell number-lines code-with-copy"><code class="sourceCode"><span id="cb4-1">Base::foo()</span>
<span id="cb4-2">Derived::foo()</span>
<span id="cb4-3">Base::foo()</span>
<span id="cb4-4">Derived::foo()</span>
<span id="cb4-5">Base::foo()</span>
<span id="cb4-6">Base::foo()</span></code></pre></div>
<p>A derived class <code>virtual</code> function is considered an override if and only if it has the same</p>
<ul>
<li>name</li>
<li>parameter type list (but not the return type)</li>
<li>cv-qualifiers</li>
<li>ref-qualifiers</li>
</ul>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp number-lines code-with-copy"><code class="sourceCode cpp"><span id="cb5-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;iostream&gt;</span></span>
<span id="cb5-2"></span>
<span id="cb5-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> Base</span>
<span id="cb5-4"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb5-5">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb5-6">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">virtual</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> vf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(){</span></span>
<span id="cb5-7">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>cout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> &lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Base::vf()"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb5-8">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb5-9"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb5-10"></span>
<span id="cb5-11"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> Derived <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> Base<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb5-12">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb5-13">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> vf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb5-14">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>cout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> &lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Derived::vf() const"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb5-15">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb5-16"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb5-17"></span>
<span id="cb5-18"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> main<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(){</span></span>
<span id="cb5-19">    Base b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb5-20">    Derived d<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb5-21">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> Derived const_d<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb5-22"></span>
<span id="cb5-23">    Base<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> bp<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">nullptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb5-24"></span>
<span id="cb5-25">    bp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span>b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb5-26">    bp<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span>vf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb5-27"></span>
<span id="cb5-28">    bp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span>d<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb5-29">    bp<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span>vf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb5-30">    d<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>vf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb5-31">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb5-32"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p>Output:</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode numberSource shell number-lines code-with-copy"><code class="sourceCode"><span id="cb6-1">Base::vf()</span>
<span id="cb6-2">Base::vf()</span>
<span id="cb6-3">Derived::vf() const</span></code></pre></div>
<p>In the above code snippet, the compiler does not treat <code>void Derived::vf() const</code> as an override for the base class virtual member function <code>void Base::vf()</code>.</p>
<section id="dynamic-dispatch" class="level2">
<h2 class="anchored" data-anchor-id="dynamic-dispatch">Dynamic dispatch</h2>
<p>A member function defined as <code>virtual</code> in the base class will be <code>virtual</code> in all child classes.</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp number-lines code-with-copy"><code class="sourceCode cpp"><span id="cb7-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include</span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;iostream&gt;</span></span>
<span id="cb7-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> A<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb7-3">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">virtual</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> vf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(){</span></span>
<span id="cb7-4">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>cout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> &lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"A::vf()"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb7-5">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb7-6"></span>
<span id="cb7-7">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> g<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(){</span></span>
<span id="cb7-8">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>cout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> &lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"A::g()"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb7-9">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb7-10"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb7-11"> </span>
<span id="cb7-12"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> B <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> A<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb7-13">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> vf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">override</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb7-14">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>cout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> &lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"B::vf()"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb7-15">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb7-16"></span>
<span id="cb7-17">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> g<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(){</span></span>
<span id="cb7-18">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>cout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> &lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"B::g()"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb7-19">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb7-20"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb7-21"></span>
<span id="cb7-22"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> C <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> B<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb7-23">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> vf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">override</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb7-24">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>cout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> &lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"C::vf()"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb7-25">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb7-26"></span>
<span id="cb7-27">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> g<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(){</span></span>
<span id="cb7-28">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>cout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> &lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"C::g()"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb7-29">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb7-30"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb7-31"></span>
<span id="cb7-32"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> D <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> C<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb7-33">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> g<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(){</span></span>
<span id="cb7-34">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>cout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> &lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"D::g()"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb7-35">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb7-36"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb7-37"></span>
<span id="cb7-38"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> main<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span></span>
<span id="cb7-39"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb7-40">    A a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> B b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> C c<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> D d<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb7-41">    A<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> a_as_aptr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span>a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb7-42">    A<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> b_as_aptr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span>b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb7-43">    A<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> c_as_aptr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span>c<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb7-44">    A<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> d_as_aptr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span>d<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb7-45"></span>
<span id="cb7-46">    a_as_aptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span>vf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb7-47">    b_as_aptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span>vf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb7-48">    c_as_aptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span>vf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb7-49">    d_as_aptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span>vf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb7-50"></span>
<span id="cb7-51">    a_as_aptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span>g<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb7-52">    b_as_aptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span>g<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb7-53">    c_as_aptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span>g<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb7-54">    d_as_aptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span>g<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb7-55"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p>Run at <a href="https://godbolt.org/z/zxeo53ah6">Compiler Explorer</a></p>
<p>Output:</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode numberSource shell number-lines code-with-copy"><code class="sourceCode"><span id="cb8-1">A::vf()</span>
<span id="cb8-2">B::vf()</span>
<span id="cb8-3">C::vf()</span>
<span id="cb8-4">C::vf()</span>
<span id="cb8-5">A::g()</span>
<span id="cb8-6">A::g()</span>
<span id="cb8-7">A::g()</span>
<span id="cb8-8">A::g()</span></code></pre></div>
<p>Because <code>vf()</code> is a virtual function, the dynamic type (type of the pointee object) is used at run-time to resolve calls to <code>b_as_aptr-&gt;vf()</code> or <code>c_as_aptr-&gt;vf()</code>. With non-virtual functions such as <code>g()</code>, the compiler uses the static type to determine what function to call, and it can do so at compile-time.</p>
</section>
<section id="override-a-useful-feature-to-prevent-bugs" class="level2">
<h2 class="anchored" data-anchor-id="override-a-useful-feature-to-prevent-bugs"><code>override</code>: a useful feature to prevent bugs</h2>
<p>Every time you define a method in the derived class that override <code>virtual</code> member function in the base class, as a good practice, tag it <code>override</code>. This way, you show that your intention for the derived class is to override the behavior of <code>vf</code> in the base class.</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp number-lines code-with-copy"><code class="sourceCode cpp"><span id="cb9-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include</span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;iostream&gt;</span></span>
<span id="cb9-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> Base<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb9-3">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">virtual</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> vf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(){</span></span>
<span id="cb9-4">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>cout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> &lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"void Base::vf()"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb9-5">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb9-6"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb9-7"></span>
<span id="cb9-8"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> Derived <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> Base<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb9-9">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> vf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">override</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb9-10">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>cout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> &lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"void Derived::vf()"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb9-11">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb9-12"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span></code></pre></div>
<p>If a function is declared with specifier <code>override</code> but does not override a base class <code>virtual</code> member function, the program is ill-formed and will not compile.</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp number-lines code-with-copy"><code class="sourceCode cpp"><span id="cb10-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include</span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;iostream&gt;</span></span>
<span id="cb10-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> Base<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb10-3">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">virtual</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> vf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(){</span></span>
<span id="cb10-4">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>cout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> &lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"void Base::vf()"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb10-5">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb10-6"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb10-7"></span>
<span id="cb10-8"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> Derived <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> Base<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb10-9">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> vf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">long</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">override</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb10-10">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>cout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> &lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"void Derived::vf()"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb10-11">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb10-12"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span></code></pre></div>
<p>Run at <a href="https://godbolt.org/z/jGcW14Gfs">Compiler Explorer</a></p>
<p><code>Base::vf()</code> does not need to be accessible or visible to be overriden. <code>Base::vf()</code> can be declared as <code>private</code>, or <code>Base</code> can be inherited using <code>private</code> inheritance.</p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp number-lines code-with-copy"><code class="sourceCode cpp"><span id="cb11-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include</span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;iostream&gt;</span></span>
<span id="cb11-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> B</span>
<span id="cb11-3"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb11-4">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">virtual</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> do_f<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(){</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// private member</span></span>
<span id="cb11-5">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>cout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> &lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"B::do_f()"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb11-6">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb11-7">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb11-8">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> f<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span> do_f<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// public interface</span></span>
<span id="cb11-9"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb11-10"> </span>
<span id="cb11-11"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> D <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> B</span>
<span id="cb11-12"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb11-13">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> do_f<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">override</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// overrides B::do_f</span></span>
<span id="cb11-14">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>cout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> &lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"D::do_f()"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb11-15">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb11-16"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb11-17"> </span>
<span id="cb11-18"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> main<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span></span>
<span id="cb11-19"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb11-20">    D d<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb11-21">    B<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> bp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span>d<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb11-22">    bp<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span>f<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// internally calls D::do_f();</span></span>
<span id="cb11-23"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p>Run at <a href="https://godbolt.org/z/Ge9vob6hG">Compiler Explorer</a></p>
</section>
</section>
<section id="virtual-destructors" class="level1">
<h1><code>virtual</code> destructors</h1>
<p>Consider the following code snippet, where we intend to use a class hierarchy polymorphically:</p>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp number-lines code-with-copy"><code class="sourceCode cpp"><span id="cb12-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include</span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;iostream&gt;</span></span>
<span id="cb12-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> A<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb12-3">    A<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(){</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>cout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> &lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"A()"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb12-4">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>A<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(){</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>cout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> &lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"~A()"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb12-5"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb12-6"></span>
<span id="cb12-7"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> B <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> A<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb12-8">    B<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(){</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>cout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> &lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"B()"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb12-9">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>B<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(){</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>cout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> &lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"~B()"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb12-10"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb12-11"></span>
<span id="cb12-12"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> C <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> B<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb12-13">    C<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(){</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>cout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> &lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"C()"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb12-14">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>C<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(){</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>cout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> &lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"~C()"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb12-15"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb12-16"></span>
<span id="cb12-17"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> main<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(){</span></span>
<span id="cb12-18">    A<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> c_as_aptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">new</span> C<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()};</span></span>
<span id="cb12-19">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">delete</span> c_as_aptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb12-20">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb12-21"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p>Run at <a href="https://godbolt.org/z/GoTGsrKq8">Compiler Explorer</a></p>
<p>Output:</p>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode numberSource shell number-lines code-with-copy"><code class="sourceCode"><span id="cb13-1">A()</span>
<span id="cb13-2">B()</span>
<span id="cb13-3">C()</span>
<span id="cb13-4">~A()</span></code></pre></div>
<p><code>new C()</code> dynamically allocates memory on the heap and default-initializes a <code>C()</code> object in this memory block. The address of the newly constructed object is stored in <code>c_as_aptr</code> pointer variable.</p>
<p>If we comment out line 19, we shall leak memory. All calls to <code>new</code> or <code>new[]</code> must be matched by corresponding calls to <code>delete</code> or <code>delete[]</code>.</p>
<p><code>delete T</code> for a type <code>T</code> calls the destructor <code>~T()</code> and deallocates the memory space occupied by <code>T</code>.</p>
<p>Since the base-class destructor <code>~A()</code> is a non-virtual function, <code>delete c_as_aptr</code> has undefined behavior. In most implementations, the call to the destructor will be resolved like any non-virtual code, meaning that the destructor of the base class will be called but not the one of the derived class, resulting in a resources leak.</p>
<p>Always make base classes’ destructors virtual when they’re meant to be manipulated polymorphically.</p>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp number-lines code-with-copy"><code class="sourceCode cpp"><span id="cb14-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include</span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;iostream&gt;</span></span>
<span id="cb14-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> A<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb14-3">    A<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(){</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>cout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> &lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"A()"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb14-4">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">virtual</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>A<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(){</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>cout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> &lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"~A()"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb14-5"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb14-6"></span>
<span id="cb14-7"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> B <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> A<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb14-8">    B<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(){</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>cout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> &lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"B()"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb14-9">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>B<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(){</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>cout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> &lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"~B()"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb14-10"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb14-11"></span>
<span id="cb14-12"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> C <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> B<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb14-13">    C<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(){</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>cout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> &lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"C()"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb14-14">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>C<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(){</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>cout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> &lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"~C()"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb14-15"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb14-16"></span>
<span id="cb14-17"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> main<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(){</span></span>
<span id="cb14-18">    A<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> c_as_aptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">new</span> C<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()};</span></span>
<span id="cb14-19">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">delete</span> c_as_aptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb14-20">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb14-21"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p>Run at <a href="https://godbolt.org/z/zh5rT9T5d">Compiler Explorer</a></p>
<p>Output:</p>
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode numberSource shell number-lines code-with-copy"><code class="sourceCode"><span id="cb15-1">A()</span>
<span id="cb15-2">B()</span>
<span id="cb15-3">C()</span>
<span id="cb15-4">~C()</span>
<span id="cb15-5">~B()</span>
<span id="cb15-6">~A()</span></code></pre></div>
</section>
<section id="virtual-inheritance-and-the-diamond-problem" class="level1">
<h1><code>virtual</code> inheritance and the diamond problem</h1>
<p>Unlike non-virtual inheritance described above, <code>virtual</code> inheritance uses the keyword <code>virtual</code> as the access specifier, when inheriting from a base class.</p>
<p>The difference between conventional inheritance and <code>virtual</code> inheritance is that <code>virtual</code> inheritance allows a diamond class hierarchy and child classes inherit only one copy of the <code>virtual</code> base class.</p>
<p>Consider the following code snippet:</p>
<div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp number-lines code-with-copy"><code class="sourceCode cpp"><span id="cb16-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> A<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{};</span></span>
<span id="cb16-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> B <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> A <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{};</span></span>
<span id="cb16-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> C <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> A <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{};</span></span>
<span id="cb16-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> D <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> B<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> C <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{};</span></span></code></pre></div>
<p>Here, <code>D</code> inherits indirectly from <code>A</code>, it inherits a copy of class <code>A</code> from via <code>B</code> and a second copy of class <code>A</code> via <code>C</code>. So, <code>D</code> inherits two copies of class <code>A</code>.</p>
<div class="sourceCode" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode numberSource shell number-lines code-with-copy"><code class="sourceCode"><span id="cb17-1">A   A</span>
<span id="cb17-2">|   |</span>
<span id="cb17-3">B   C</span>
<span id="cb17-4"> \ /</span>
<span id="cb17-5">  D</span></code></pre></div>
<div class="sourceCode" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp number-lines code-with-copy"><code class="sourceCode cpp"><span id="cb18-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include</span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;iostream&gt;</span></span>
<span id="cb18-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> A<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb18-3">    A<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(){</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>cout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> &lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"A()"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;}</span></span>
<span id="cb18-4">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">virtual</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>A<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(){</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>cout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> &lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"~A()"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb18-5"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb18-6"></span>
<span id="cb18-7"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> B <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> A<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb18-8">    B<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(){</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>cout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> &lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"B()"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;}</span></span>
<span id="cb18-9">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">virtual</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>B<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(){</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>cout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> &lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"~B()"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb18-10"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb18-11"></span>
<span id="cb18-12"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> C <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> A<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb18-13">    C<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(){</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>cout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> &lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"C()"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;}</span></span>
<span id="cb18-14">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">virtual</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>C<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(){</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>cout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> &lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"~C()"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb18-15"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb18-16"></span>
<span id="cb18-17"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> D <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> B<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> C<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb18-18">    D<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(){</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>cout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> &lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"D()"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;}</span></span>
<span id="cb18-19">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">virtual</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>D<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(){</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>cout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> &lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"~D()"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb18-20"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb18-21"></span>
<span id="cb18-22"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> main<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(){</span></span>
<span id="cb18-23">    D d<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb18-24">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb18-25"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p>Run at <a href="https://godbolt.org/z/Mf4bjo3xK">Compiler Explorer</a></p>
<p>Output:</p>
<div class="sourceCode" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode numberSource shell number-lines code-with-copy"><code class="sourceCode"><span id="cb19-1">A()</span>
<span id="cb19-2">B()</span>
<span id="cb19-3">A()</span>
<span id="cb19-4">C()</span>
<span id="cb19-5">D()</span>
<span id="cb19-6">~D()</span>
<span id="cb19-7">~C()</span>
<span id="cb19-8">~A()</span>
<span id="cb19-9">~B()</span>
<span id="cb19-10">~A()</span></code></pre></div>
<p>To solve this problem, we must make <code>A</code> as a <code>virtual</code> base class for both <code>B</code> and <code>C</code>. <code>D</code> inherits from both <code>B</code> and <code>C</code>. This time, because <code>A</code> is inherited virtually by <code>B</code> and <code>C</code> only one instance of the <code>A</code> subobject will be created for `D.</p>
<div class="sourceCode" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp number-lines code-with-copy"><code class="sourceCode cpp"><span id="cb20-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include</span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;iostream&gt;</span></span>
<span id="cb20-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> A<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb20-3">    A<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(){</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>cout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> &lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"A()"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;}</span></span>
<span id="cb20-4">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">virtual</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>A<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(){</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>cout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> &lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"~A()"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb20-5"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb20-6"></span>
<span id="cb20-7"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> B <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">virtual</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> A<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb20-8">    B<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(){</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>cout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> &lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"B()"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;}</span></span>
<span id="cb20-9">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">virtual</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>B<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(){</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>cout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> &lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"~B()"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb20-10"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb20-11"></span>
<span id="cb20-12"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> C <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">virtual</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> A<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb20-13">    C<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(){</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>cout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> &lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"C()"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;}</span></span>
<span id="cb20-14">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">virtual</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>C<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(){</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>cout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> &lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"~C()"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb20-15"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb20-16"></span>
<span id="cb20-17"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> D <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> B<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> C<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb20-18">    D<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(){</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>cout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> &lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"D()"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;}</span></span>
<span id="cb20-19">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">virtual</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>D<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(){</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>cout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> &lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"~D()"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb20-20"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb20-21"></span>
<span id="cb20-22"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> main<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(){</span></span>
<span id="cb20-23">    D d<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb20-24">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb20-25"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p>Run at <a href="https://godbolt.org/z/9ME45Gbod">Compiler Explorer</a></p>
<p>Output:</p>
<div class="sourceCode" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode numberSource shell number-lines code-with-copy"><code class="sourceCode"><span id="cb21-1">A()</span>
<span id="cb21-2">B()</span>
<span id="cb21-3">C()</span>
<span id="cb21-4">D()</span>
<span id="cb21-5">~D()</span>
<span id="cb21-6">~C()</span>
<span id="cb21-7">~B()</span>
<span id="cb21-8">~A()</span></code></pre></div>
</section>
<section id="class-hierarchy-virtual-tables-virtual-table-table" class="level1">
<h1>Class Hierarchy, Virtual Tables, Virtual Table Table</h1>
<p>Consider the following class hierarchy:</p>
<div class="sourceCode" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp number-lines code-with-copy"><code class="sourceCode cpp"><span id="cb22-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> A<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb22-2">    A<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">default</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb22-3">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">virtual</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> foo<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb22-4">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">virtual</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> baz<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{};</span></span>
<span id="cb22-5">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">virtual</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>A<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">default</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb22-6"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb22-7"></span>
<span id="cb22-8"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> B<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb22-9">    B<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">default</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb22-10">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">virtual</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> foo<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(){};</span></span>
<span id="cb22-11">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">virtual</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> baz<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(){};</span></span>
<span id="cb22-12">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">virtual</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>B<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">default</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb22-13"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb22-14"></span>
<span id="cb22-15"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> C <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> B<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb22-16">    C<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">default</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb22-17">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> foo<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">override</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span></span>
<span id="cb22-18">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> c_bar<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span></span>
<span id="cb22-19">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">virtual</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> bar<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span></span>
<span id="cb22-20">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">virtual</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>C<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">default</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb22-21"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb22-22"></span>
<span id="cb22-23"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> D <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> C<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> A<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb22-24">    D<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">default</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb22-25">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Overriding A virtual functions</span></span>
<span id="cb22-26">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">virtual</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> foo<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">override</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span></span>
<span id="cb22-27">    </span>
<span id="cb22-28">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Overriding C virtual functions</span></span>
<span id="cb22-29">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">virtual</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> bar<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">override</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span></span>
<span id="cb22-30"></span>
<span id="cb22-31">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// non-virtual functions</span></span>
<span id="cb22-32">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> d_bar<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span></span>
<span id="cb22-33">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">virtual</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>D<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">default</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb22-34"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb22-35"></span>
<span id="cb22-36"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> main<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(){</span></span>
<span id="cb22-37">    D d<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb22-38">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb22-39"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p>We could dump the class hierarchy information including the virtual table information, using the <code>gcc</code> compiler flag <code>-fdump-lang-class</code>.</p>
<div class="sourceCode" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode numberSource shell number-lines code-with-copy"><code class="sourceCode"><span id="cb23-1">[quantdev@quasar-arch virtual_tables]$ g++ -g -fdump-lang-class main.cpp -o main</span>
<span id="cb23-2">[quantdev@quasar-arch virtual_tables]$ cat main.cpp.001l.class</span>
<span id="cb23-3">Vtable for A</span>
<span id="cb23-4">A::_ZTV1A: 6 entries</span>
<span id="cb23-5">0     (int (*)(...))0</span>
<span id="cb23-6">8     (int (*)(...))(&amp; _ZTI1A)</span>
<span id="cb23-7">16    (int (*)(...))__cxa_pure_virtual</span>
<span id="cb23-8">24    (int (*)(...))A::baz</span>
<span id="cb23-9">32    0</span>
<span id="cb23-10">40    0</span>
<span id="cb23-11"></span>
<span id="cb23-12">Class A</span>
<span id="cb23-13">   size=8 align=8</span>
<span id="cb23-14">   base size=8 base align=8</span>
<span id="cb23-15">A (0x0x7cb4a0bd8000) 0 nearly-empty</span>
<span id="cb23-16">    vptr=((&amp; A::_ZTV1A) + 16)</span>
<span id="cb23-17"></span>
<span id="cb23-18">Vtable for B</span>
<span id="cb23-19">B::_ZTV1B: 6 entries</span>
<span id="cb23-20">0     (int (*)(...))0</span>
<span id="cb23-21">8     (int (*)(...))(&amp; _ZTI1B)</span>
<span id="cb23-22">16    (int (*)(...))B::foo</span>
<span id="cb23-23">24    (int (*)(...))B::baz</span>
<span id="cb23-24">32    (int (*)(...))B::~B</span>
<span id="cb23-25">40    (int (*)(...))B::~B</span>
<span id="cb23-26"></span>
<span id="cb23-27">Class B</span>
<span id="cb23-28">   size=8 align=8</span>
<span id="cb23-29">   base size=8 base align=8</span>
<span id="cb23-30">B (0x0x7cb4a0bd8120) 0 nearly-empty</span>
<span id="cb23-31">    vptr=((&amp; B::_ZTV1B) + 16)</span>
<span id="cb23-32"></span>
<span id="cb23-33">Vtable for C</span>
<span id="cb23-34">C::_ZTV1C: 7 entries</span>
<span id="cb23-35">0     (int (*)(...))0</span>
<span id="cb23-36">8     (int (*)(...))(&amp; _ZTI1C)</span>
<span id="cb23-37">16    (int (*)(...))C::foo</span>
<span id="cb23-38">24    (int (*)(...))B::baz</span>
<span id="cb23-39">32    (int (*)(...))C::~C</span>
<span id="cb23-40">40    (int (*)(...))C::~C</span>
<span id="cb23-41">48    (int (*)(...))C::bar</span>
<span id="cb23-42"></span>
<span id="cb23-43">Class C</span>
<span id="cb23-44">   size=8 align=8</span>
<span id="cb23-45">   base size=8 base align=8</span>
<span id="cb23-46">C (0x0x7cb4a0a0e618) 0 nearly-empty</span>
<span id="cb23-47">    vptr=((&amp; C::_ZTV1C) + 16)</span>
<span id="cb23-48">B (0x0x7cb4a0bd8180) 0 nearly-empty</span>
<span id="cb23-49">      primary-for C (0x0x7cb4a0a0e618)</span>
<span id="cb23-50"></span>
<span id="cb23-51">Vtable for D</span>
<span id="cb23-52">D::_ZTV1D: 13 entries</span>
<span id="cb23-53">0     (int (*)(...))0</span>
<span id="cb23-54">8     (int (*)(...))(&amp; _ZTI1D)</span>
<span id="cb23-55">16    (int (*)(...))D::foo</span>
<span id="cb23-56">24    (int (*)(...))B::baz</span>
<span id="cb23-57">32    (int (*)(...))D::~D</span>
<span id="cb23-58">40    (int (*)(...))D::~D</span>
<span id="cb23-59">48    (int (*)(...))D::bar</span>
<span id="cb23-60">56    (int (*)(...))-8</span>
<span id="cb23-61">64    (int (*)(...))(&amp; _ZTI1D)</span>
<span id="cb23-62">72    (int (*)(...))D::_ZThn8_N1D3fooEv</span>
<span id="cb23-63">80    (int (*)(...))A::baz</span>
<span id="cb23-64">88    (int (*)(...))D::_ZThn8_N1DD1Ev</span>
<span id="cb23-65">96    (int (*)(...))D::_ZThn8_N1DD0Ev</span>
<span id="cb23-66"></span>
<span id="cb23-67">Class D</span>
<span id="cb23-68">   size=16 align=8</span>
<span id="cb23-69">   base size=16 base align=8</span>
<span id="cb23-70">D (0x0x7cb4a0be7000) 0</span>
<span id="cb23-71">    vptr=((&amp; D::_ZTV1D) + 16)</span>
<span id="cb23-72">C (0x0x7cb4a0a0e8f0) 0 nearly-empty</span>
<span id="cb23-73">      primary-for D (0x0x7cb4a0be7000)</span>
<span id="cb23-74">B (0x0x7cb4a0bd8240) 0 nearly-empty</span>
<span id="cb23-75">        primary-for C (0x0x7cb4a0a0e8f0)</span>
<span id="cb23-76">A (0x0x7cb4a0bd82a0) 8 nearly-empty</span>
<span id="cb23-77">      vptr=((&amp; D::_ZTV1D) + 72)</span></code></pre></div>
<section id="vtable-for-class-a" class="level2">
<h2 class="anchored" data-anchor-id="vtable-for-class-a"><code>vtable</code> for <code>class A</code></h2>
<p><code>A::_ZTV1A: 6 entries</code> says the name of the <code>vtable</code>, which is a static array, is <code>A::_ZTV1A</code> and there are <img src="https://latex.codecogs.com/png.latex?6"> function pointer entries in this static array. The offset of each entry is <img src="https://latex.codecogs.com/png.latex?8"> bytes.</p>
<div class="sourceCode" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode numberSource shell number-lines code-with-copy"><code class="sourceCode"><span id="cb24-1">Vtable for A</span>
<span id="cb24-2">A::_ZTV1A: 6 entries</span>
<span id="cb24-3">0     (int (*)(...))0</span>
<span id="cb24-4">8     (int (*)(...))(&amp; _ZTI1A)</span>
<span id="cb24-5">16    (int (*)(...))__cxa_pure_virtual</span>
<span id="cb24-6">24    (int (*)(...))A::baz</span>
<span id="cb24-7">32    0</span>
<span id="cb24-8">40    0</span>
<span id="cb24-9"></span>
<span id="cb24-10">Class A</span>
<span id="cb24-11">   size=8 align=8</span>
<span id="cb24-12">   base size=8 base align=8</span>
<span id="cb24-13">A (0x0x7cb4a0bd8000) 0 nearly-empty</span>
<span id="cb24-14">    vptr=((&amp; A::_ZTV1A) + 16)</span></code></pre></div>
<p><code>16 (int (*)(...))__cxa_pure_virtual</code> and <code>24 (int (*)(...))A::baz</code> are pointers to the pure virtual function <code>A::foo()=0</code> and the virtual function <code>A::baz()</code> respectively.</p>
</section>
<section id="vtable-for-class-b" class="level2">
<h2 class="anchored" data-anchor-id="vtable-for-class-b"><code>vtable</code> for <code>class B</code></h2>
<div class="sourceCode" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode numberSource shell number-lines code-with-copy"><code class="sourceCode"><span id="cb25-1">Vtable for B</span>
<span id="cb25-2">B::_ZTV1B: 6 entries</span>
<span id="cb25-3">0     (int (*)(...))0</span>
<span id="cb25-4">8     (int (*)(...))(&amp; _ZTI1B)</span>
<span id="cb25-5">16    (int (*)(...))B::foo</span>
<span id="cb25-6">24    (int (*)(...))B::baz</span>
<span id="cb25-7">32    (int (*)(...))B::~B</span>
<span id="cb25-8">40    (int (*)(...))B::~B</span>
<span id="cb25-9"></span>
<span id="cb25-10">Class B</span>
<span id="cb25-11">   size=8 align=8</span>
<span id="cb25-12">   base size=8 base align=8</span>
<span id="cb25-13">B (0x0x7cb4a0bd8120) 0 nearly-empty</span>
<span id="cb25-14">    vptr=((&amp; B::_ZTV1B) + 16)</span></code></pre></div>
<p>Again, <code>16 (int (*)(...))B::foo</code> and <code>24 (int (*)(...))B::baz</code> are pointers to the <code>virtual</code> functions <code>B::foo()</code> and <code>B::baz()</code>.</p>
<p>The entries for virtual destructors are actually pairs of entries.</p>
<p>The first destructor, <code>32 (int (*)(...))B::~B</code> called <em>the complete object destructor</em>, only performs destruction of variables that live on the stack having automatic storage duration. This memory does not need to be deallocated.</p>
<p>The second destructor, <code>40 (int (*)(...))B::~B</code> called <em>the deleting destructor of</em> <code>T</code> is function, that in addition, to calling the complete object destructor, also calls the appropriate deallocation function for <code>T</code> (<code>operator delete</code> on <code>T</code>).</p>
<p>Since the class <code>A</code> has atleast one pure <code>virtual</code> method, it cannot be instantiated directly, hence its <code>vtable</code> does not contain entries for destructors.</p>
</section>
<section id="vtable-for-class-c" class="level2">
<h2 class="anchored" data-anchor-id="vtable-for-class-c"><code>vtable</code> for <code>class C</code></h2>
<div class="sourceCode" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode numberSource shell number-lines code-with-copy"><code class="sourceCode"><span id="cb26-1">Vtable for C</span>
<span id="cb26-2">C::_ZTV1C: 7 entries</span>
<span id="cb26-3">0     (int (*)(...))0</span>
<span id="cb26-4">8     (int (*)(...))(&amp; _ZTI1C)</span>
<span id="cb26-5">16    (int (*)(...))C::foo</span>
<span id="cb26-6">24    (int (*)(...))B::baz</span>
<span id="cb26-7">32    (int (*)(...))C::~C</span>
<span id="cb26-8">40    (int (*)(...))C::~C</span>
<span id="cb26-9">48    (int (*)(...))C::bar</span>
<span id="cb26-10"></span>
<span id="cb26-11">Class C</span>
<span id="cb26-12">   size=8 align=8</span>
<span id="cb26-13">   base size=8 base align=8</span>
<span id="cb26-14">C (0x0x7cb4a0a0e618) 0 nearly-empty</span>
<span id="cb26-15">    vptr=((&amp; C::_ZTV1C) + 16)</span>
<span id="cb26-16">B (0x0x7cb4a0bd8180) 0 nearly-empty</span>
<span id="cb26-17">      primary-for C (0x0x7cb4a0a0e618)</span></code></pre></div>
<p><code>C</code> is a child class of <code>B</code>. <code>16 (int (*)(...))C::foo</code> is a pointer to the overriding function of <code>B::foo()</code> - <code>C::foo()</code> and <code>24 (int (*)(...))B::baz</code> is a pointer to the inherited function <code>B::baz()</code>.</p>
<p><code>32 (int (*)(...))C::~C</code> and <code>40 (int (*)(...))C::~C</code> are the pairs of destrutors.</p>
<p><code>48 (int (*)(...))C::bar</code> is the pointer to the subclass method <code>C::bar()</code>.</p>
</section>
<section id="vtable-for-class-d" class="level2">
<h2 class="anchored" data-anchor-id="vtable-for-class-d"><code>vtable</code> for <code>class D</code></h2>
<p><code>D</code> inherits from both <code>A</code> and <code>C</code> (indirectly from <code>B</code>).</p>
<div class="sourceCode" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode numberSource shell number-lines code-with-copy"><code class="sourceCode"><span id="cb27-1">Vtable for D</span>
<span id="cb27-2">D::_ZTV1D: 13 entries</span>
<span id="cb27-3">0     (int (*)(...))0</span>
<span id="cb27-4">8     (int (*)(...))(&amp; _ZTI1D)</span>
<span id="cb27-5">16    (int (*)(...))D::foo</span>
<span id="cb27-6">24    (int (*)(...))B::baz</span>
<span id="cb27-7">32    (int (*)(...))D::~D</span>
<span id="cb27-8">40    (int (*)(...))D::~D</span>
<span id="cb27-9">48    (int (*)(...))D::bar</span>
<span id="cb27-10">56    (int (*)(...))-8</span>
<span id="cb27-11">64    (int (*)(...))(&amp; _ZTI1D)</span>
<span id="cb27-12">72    (int (*)(...))D::_ZThn8_N1D3fooEv</span>
<span id="cb27-13">80    (int (*)(...))A::baz</span>
<span id="cb27-14">88    (int (*)(...))D::_ZThn8_N1DD1Ev</span>
<span id="cb27-15">96    (int (*)(...))D::_ZThn8_N1DD0Ev</span>
<span id="cb27-16"></span>
<span id="cb27-17">Class D</span>
<span id="cb27-18">   size=16 align=8</span>
<span id="cb27-19">   base size=16 base align=8</span>
<span id="cb27-20">D (0x0x7cb4a0be7000) 0</span>
<span id="cb27-21">    vptr=((&amp; D::_ZTV1D) + 16)</span>
<span id="cb27-22">C (0x0x7cb4a0a0e8f0) 0 nearly-empty</span>
<span id="cb27-23">      primary-for D (0x0x7cb4a0be7000)</span>
<span id="cb27-24">B (0x0x7cb4a0bd8240) 0 nearly-empty</span>
<span id="cb27-25">        primary-for C (0x0x7cb4a0a0e8f0)</span>
<span id="cb27-26">A (0x0x7cb4a0bd82a0) 8 nearly-empty</span>
<span id="cb27-27">      vptr=((&amp; D::_ZTV1D) + 72)</span></code></pre></div>
<p><code>16 (int (*)(...))D::foo</code> is a pointer to the overriding function of <code>A:foo()</code> and <code>C::foo()</code> - <code>D::foo()</code>.</p>
<p><code>24 (int (*)(...))B::baz</code> and <code>80 (int (*)(...))A::baz</code> are pointers to the copies of <code>baz()</code> inherited through the parents <code>A</code> and <code>B</code>.</p>
<p><code>32 (int (*)(...))D::~D</code> and <code>40 (int (*)(...))D::~D</code> are pairs of destructors.</p>
<p><code>48 (int (*)(...))D::bar</code> is a pointer to the overriding function of <code>C::bar()</code> - <code>D::bar()</code>.</p>
<p>When a class inherits from multiple base classes ( as in the case of <code>class D</code> inheriting from both <code>A</code> and <code>C</code>), the memory layout of the derived class <code>D</code> includes subobjects for each of the base class. The <code>this</code> pointer must be adjusted to point to the correct subobject when calling a virtual function from one of the base classes.</p>
<p>The <em>vcall-offset</em> is an adjustment value that ensures that the <code>this</code> pointer points to the correct base class subobject, when a <code>virtual</code> function is invoked.</p>
<p>The <em>vcall-offset</em> is stored in the <code>vtable</code> as an entry (in this case, <code>-8</code>). When a virtual function is called, the <em>vcall-offset</em> is added to the current <code>this</code> pointer to adjust it to the correct base class subobject.</p>
<p>If the <code>this</code> pointer points to the <code>D</code> subobject, adding the <em>vcall-offset</em> <code>-8</code> adjusts it to point to the <code>A</code> subobject inherited directly by <code>D</code>.</p>
</section>
</section>
<section id="class-memory-layout" class="level1">
<h1>Class memory layout</h1>
<p>The <code>pahole</code> utility is used to inspect the object memory layout in linux. Install <code>pahole</code> using your package manager:</p>
<div class="sourceCode" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode numberSource shell number-lines code-with-copy"><code class="sourceCode"><span id="cb28-1">[quantdev@quasar-arch virtual_tables]$ sudo pacman -S pahole</span></code></pre></div>
<p>The output of running <code>pahole</code> on our binary is as follows:</p>
<div class="sourceCode" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode numberSource shell number-lines code-with-copy"><code class="sourceCode"><span id="cb29-1">[quantdev@quasar-arch virtual_tables]$ pahole main</span>
<span id="cb29-2">struct D : C, A {</span>
<span id="cb29-3">        /* struct C                   &lt;ancestor&gt;; */     /*     0     8 */</span>
<span id="cb29-4">        /* struct A                   &lt;ancestor&gt;; */     /*     8     8 */</span>
<span id="cb29-5">        void D(struct D *, const struct D  &amp;);</span>
<span id="cb29-6"></span>
<span id="cb29-7">        void D(struct D *);</span>
<span id="cb29-8"></span>
<span id="cb29-9">        virtual void foo(struct D *);</span>
<span id="cb29-10"></span>
<span id="cb29-11">        virtual void bar(struct D *);</span>
<span id="cb29-12"></span>
<span id="cb29-13">        void d_bar(struct D *);</span>
<span id="cb29-14"></span>
<span id="cb29-15">        virtual void ~D(struct D *);</span>
<span id="cb29-16"></span>
<span id="cb29-17">        /* vtable has 2 entries: {</span>
<span id="cb29-18">           [0] = foo((null)), </span>
<span id="cb29-19">           [4] = bar((null)), </span>
<span id="cb29-20">        } */</span>
<span id="cb29-21">        /* size: 16, cachelines: 1, members: 2 */</span>
<span id="cb29-22">        /* last cacheline: 16 bytes */</span>
<span id="cb29-23">};</span>
<span id="cb29-24">struct C : B {</span>
<span id="cb29-25">        /* struct B                   &lt;ancestor&gt;; */     /*     0     8 */</span>
<span id="cb29-26">        void C(struct C *, const struct C  &amp;);</span>
<span id="cb29-27"></span>
<span id="cb29-28">        void C(struct C *);</span>
<span id="cb29-29"></span>
<span id="cb29-30">        virtual void foo(struct C *);</span>
<span id="cb29-31"></span>
<span id="cb29-32">        void c_bar(const struct C  *);</span>
<span id="cb29-33"></span>
<span id="cb29-34">        virtual void bar(struct C *);</span>
<span id="cb29-35"></span>
<span id="cb29-36">        virtual void ~C(struct C *);</span>
<span id="cb29-37"></span>
<span id="cb29-38">        /* vtable has 2 entries: {</span>
<span id="cb29-39">           [0] = foo((null)), </span>
<span id="cb29-40">           [4] = bar((null)), </span>
<span id="cb29-41">        } */</span>
<span id="cb29-42">        /* size: 8, cachelines: 1, members: 1 */</span>
<span id="cb29-43">        /* last cacheline: 8 bytes */</span>
<span id="cb29-44">};</span>
<span id="cb29-45">struct A {</span>
<span id="cb29-46">        void A(struct A *, const struct A  &amp;);</span>
<span id="cb29-47"></span>
<span id="cb29-48">        int ()(void) * *           _vptr.A;              /*     0     8 */</span>
<span id="cb29-49">        void A(struct A *);</span>
<span id="cb29-50"></span>
<span id="cb29-51">        virtual void foo(struct A *);</span>
<span id="cb29-52"></span>
<span id="cb29-53">        virtual void baz(struct A *);</span>
<span id="cb29-54"></span>
<span id="cb29-55">        virtual void ~A(struct A *);</span>
<span id="cb29-56"></span>
<span id="cb29-57">        /* vtable has 2 entries: {</span>
<span id="cb29-58">           [0] = foo((null)), </span>
<span id="cb29-59">           [1] = baz((null)), </span>
<span id="cb29-60">        } */</span>
<span id="cb29-61">        /* size: 8, cachelines: 1, members: 1 */</span>
<span id="cb29-62">        /* last cacheline: 8 bytes */</span>
<span id="cb29-63">};</span>
<span id="cb29-64">struct B {</span>
<span id="cb29-65">        void B(struct B *, const struct B  &amp;);</span>
<span id="cb29-66"></span>
<span id="cb29-67">        int ()(void) * *           _vptr.B;              /*     0     8 */</span>
<span id="cb29-68">        void B(struct B *);</span>
<span id="cb29-69"></span>
<span id="cb29-70">        virtual void foo(struct B *);</span>
<span id="cb29-71"></span>
<span id="cb29-72">        virtual void baz(struct B *);</span>
<span id="cb29-73"></span>
<span id="cb29-74">        virtual void ~B(struct B *);</span>
<span id="cb29-75"></span>
<span id="cb29-76">        /* vtable has 2 entries: {</span>
<span id="cb29-77">           [0] = foo((null)), </span>
<span id="cb29-78">           [1] = baz((null)), </span>
<span id="cb29-79">        } */</span>
<span id="cb29-80">        /* size: 8, cachelines: 1, members: 1 */</span>
<span id="cb29-81">        /* last cacheline: 8 bytes */</span>
<span id="cb29-82">};</span></code></pre></div>
<p>As an example, <code>struct D</code> has <code>size: 16</code> and consists of two subobjects <code>C</code> and <code>A</code>.</p>
<div class="sourceCode" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode numberSource shell number-lines code-with-copy"><code class="sourceCode"><span id="cb30-1">struct D {</span>
<span id="cb30-2">    struct C c; /* 0x0 */</span>
<span id="cb30-3">    struct A a; /* 0x8 */</span>
<span id="cb30-4">    /* size: 0x10, cachelines: 1, members: 2 */</span>
<span id="cb30-5">};</span></code></pre></div>

</section>

<div id="quarto-appendix" class="default"><section id="references" class="level2 appendix"><h2 class="anchored quarto-appendix-heading">References</h2><div class="quarto-appendix-contents">

<ul>
<li><a href="https://leimao.github.io/blog/CPP-Virtual-Table/">Virtual Tables</a>.</li>
</ul>


</div></section></div> ]]></description>
  <category>C++</category>
  <guid>http://quantdev.blog/posts/virtualization/index.html</guid>
  <pubDate>Wed, 21 May 2025 23:00:00 GMT</pubDate>
  <media:content url="http://quantdev.blog/posts/virtualization/cpp.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Quanto Options</title>
  <dc:creator>Quasar </dc:creator>
  <link>http://quantdev.blog/posts/quanto-options/index.html</link>
  <description><![CDATA[ 




<section id="a-quick-refresher" class="level1">
<h1>A quick refresher</h1>
<p>A quanto option is a derivative where the underlying is denominated in one currency, but the option-payoff is settled in a different one (the quanto-currency) at a pre-defined fixed exchange rate <img src="https://latex.codecogs.com/png.latex?Q">.</p>
<p>I take the example of gold quoted as <img src="https://latex.codecogs.com/png.latex?XAU/USD"> that is quantoed in <img src="https://latex.codecogs.com/png.latex?INR">.</p>
<p>Define :</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign*%7D%0AS_T%20&amp;:=%20%5Ctext%7BPrice%20of%20gold%20in%20the%20underlying%20currency%7D%20%5C%5C%0AX_T%20&amp;:=%20%5Ctext%7BPrice%20of%20the%20underlying%20currency%20in%20quanto%20currency%20terms%7D%5C%5C%0AK%20&amp;:=%20%5Ctext%7BStrike%20expressed%20in%20underlying%20currency%20terms%7D%5C%5C%0AQ%20&amp;:=%20%5Ctext%7BPre-specified%20exchange%20rate%7D%0A%5Cend%7Balign*%7D%0A"></p>
<p>Since the payoff is in <img src="https://latex.codecogs.com/png.latex?INR">, we take <img src="https://latex.codecogs.com/png.latex?INR"> as the base currency or numeraire in the Black-Scholes model.</p>
<p>Then, the payoff of the quanto-call option is:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0AV_T%20=%20Q%5Cleft(%5Cfrac%7BS_T%7D%7BX_T%7D%20-%20K%5Cright)%5E%7B+%7D%0A"></p>
<p><img src="https://latex.codecogs.com/png.latex?S_T/X_T"> has units <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7BXAU%7D%7BUSD%7D">, and <img src="https://latex.codecogs.com/png.latex?Q"> - the pre-specified conversion factor has units <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7BUSD%7D%7BINR%7D">.</p>
</section>
<section id="the-setup" class="level1">
<h1>The Setup</h1>
<p>The domestic risk-neutral measure <img src="https://latex.codecogs.com/png.latex?Q%5E%7BINR%7D"> is the probability measure linked to the domestic money-market account <img src="https://latex.codecogs.com/png.latex?M_T%5E%7BINR%7D">.</p>
<p>The risk-neutral measure <img src="https://latex.codecogs.com/png.latex?Q%5E%7BUSD%7D"> is the probability measure linked to the underlying money-market account expressed in quanto currency terms, <img src="https://latex.codecogs.com/png.latex?(M_T%5E%7BUSD%7D%20%5Ccdot%20X_T)">. <img src="https://latex.codecogs.com/png.latex?M_T%5E%7BUSD%7D"> has units <img src="https://latex.codecogs.com/png.latex?USD%5E%7B-1%7D"> and <img src="https://latex.codecogs.com/png.latex?X_T"> has units <img src="https://latex.codecogs.com/png.latex?USD%20%5Ccdot%20INR%5E%7B-1%7D">.</p>
<p>Consider the Black-Scholes model:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign*%7D%0A%7BXAU/INR%20:%20%7D%20%5Cquad%20dS_t%20&amp;=%20r_%7BINR%7D%20S_t%20dt%20+%20%5Csigma_S%20S_t%20dW_%7BS%7D%5E%7BQ%5E%7BINR%7D%7D(t)%20%5C%5C%0A%7BUSD/INR%20:%20%7D%20%5Cquad%20dX_t%20&amp;=%20(r_%7BINR%7D%20-%20r_%7BUSD%7D)X_t%20dt%20+%20%5Csigma_X%20X(t)%20dW_X%5E%7BQ%5E%7BINR%7D%7D(t)%5C%5C%0AdW_%7BS%7D%5E%7BQ%5E%7BINR%7D%7D(t)%20%5Ccdot%20dW_X%5E%7BQ%5E%7BINR%7D%7D(t)%20&amp;=%20%5Crho_%7B(f,q),(d,q)%7D%20dt%0A%5Cend%7Balign*%7D%0A"></p>
<p>where <img src="https://latex.codecogs.com/png.latex?(W%5E%7BQ%5E%7BINR%7D%7D(t),t%5Cgeq%200)"> is a <img src="https://latex.codecogs.com/png.latex?Q%5E%7BINR%7D">-standard brownian motion.</p>
</section>
<section id="the-evolution-of-the-underlying-xau-usd" class="level1">
<h1>The evolution of the underlying XAU-USD</h1>
<p>The actual underlying is :</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Ctext%7BXAU/USD%20%7D%20:=%20%5Cfrac%7BS(t)%7D%7BX(t)%7D%0A"></p>
<p>Using Ito’s formula, we obtain:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign*%7D%0Ad%5Cleft(%5Cfrac%7B1%7D%7BX_t%7D%5Cright)%20&amp;=%20-%5Cfrac%7B1%7D%7BX_t%5E2%7DdX_t%20+%20%5Cfrac%7B1%7D%7B2%7D%5Ccdot%5Cfrac%7B2%7D%7BX_t%5E3%7D%20(dX_t)%5E2%20%5C%5C%0A&amp;=%20-%5Cfrac%7B1%7D%7BX_t%7D%5B(r_%7BINR%7D%20-%20r_%7BUSD%7D)%20dt%20+%20%5Csigma_X%20dW_X%5E%7BQ%5E%7BINR%7D%7D(t)%5D%20+%20%5Cfrac%7B1%7D%7BX_t%7D%5Csigma_X%5E2%20dt%5C%5C%0A&amp;=%20%5Cfrac%7B1%7D%7BX_t%7D%20%5B(%5Csigma_X%5E2%20+%20r_%7BUSD%7D%20-%20r_%7BINR%7D)%20dt%20-%20%5Csigma_X%20dW_X%5E%7BQ%5E%7BINR%7D%7D(t)%5D%0A%5Cend%7Balign*%7D%0A"></p>
<p>and hence:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign*%7D%0Ad%5Cleft(%5Cfrac%7BS_t%7D%7BX_t%7D%5Cright)%20&amp;=%20S_t%20%5Ccdot%20d%5Cleft(%5Cfrac%7B1%7D%7BX_t%7D%5Cright)%20+%20%5Cfrac%7B1%7D%7BX_t%7D%20dS_t%20+%20dS_t%20%5Ccdot%20d%5Cleft(%5Cfrac%7B1%7D%7BX_t%7D%5Cright)%5C%5C%0A&amp;=%20%5Cfrac%7BS_t%7D%7BX_t%7D%5B(%5Csigma_X%5E2%20+%20r_%7BUSD%7D%20-%20r_%7BINR%7D)%20dt%20-%20%5Csigma_X%20dW_X%5E%7BQ%5E%7BINR%7D%7D(t)%5D%20+%20%5Cfrac%7BS_t%7D%7BX_t%7D%5Br_%7BINR%7D%20dt%20+%20%5Csigma_S%20dW_%7BS%7D%5E%7BQ%5E%7BINR%7D%7D(t)%5D%20%5C%5C%0A&amp;-%5Cfrac%7BS_t%7D%7BX_t%7D%20%5B((%5Csigma_X%5E2%20+%20r_%7BUSD%7D%20-%20r_%7BINR%7D)%20dt%20-%20%5Csigma_X%20dW_X%5E%7BQ%5E%7BINR%7D%7D(t))(r_%7BINR%7D%20dt%20+%20%5Csigma_S%20dW_%7BS%7D%5E%7BQ%5E%7BINR%7D%7D(t))%5D%20%5C%5C%0A&amp;=%5Cfrac%7BS_t%7D%7BX_t%7D%5B(%5Csigma_X%5E2%20+r_%7BUSD%7D%20+%20%5Crho%20%5Csigma_X%20%5Csigma_S%20)%20dt%20+%20%5Csigma_S%20dW_S%5E%7BQ%5E%7BINR%7D(t)%7D%20-%20%5Csigma_X%20dW_X%5E%7BQ%5E%7BINR%7D%7D(t)%5D%0A%5Cend%7Balign*%7D%0A"></p>
<p>We can find an orthogonal decomposition of the random vector process <img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Bbmatrix%7D%20W_S%5E%7BQ%5E%7BINR%7D%7D(t)%20%5C%5C%20W_X%5E%7BQ%5E%7BINR%7D%7D(t)%5Cend%7Bbmatrix%7D">.</p>
<p>Define : <img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Bbmatrix%7D%0AW_S%5E%7BQ%5E%7BINR%7D%7D(t)%20%5C%5C%0AW_X%5E%7BQ%5E%7BINR%7D%7D(t)%0A%5Cend%7Bbmatrix%7D%20=%0A%5Cbegin%7Bbmatrix%7D%0AZ_S%5E%7BQ%5E%7BINR%7D%7D(t)%20%5C%5C%0A%5Crho%20Z_S%5E%7BQ%5E%7BINR%7D%7D(t)%20+%20%5Csqrt%7B1-%5Crho%5E2%7D%20Z_X%5E%7BQ%5E%7BINR%7D%7D(t)%0A%5Cend%7Bbmatrix%7D%0A"></p>
<p>where <img src="https://latex.codecogs.com/png.latex?Z_S%5E%7BQ%5E%7BINR%7D%7D(t)"> and <img src="https://latex.codecogs.com/png.latex?Z_X%5E%7BQ%5E%7BINR%7D%7D(t)"> are independent standard brownian motions.</p>
<p>So, the SDE can be written as:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign*%7D%0Ad%5Cleft(%5Cfrac%7BS_t%7D%7BX_t%7D%5Cright)%20&amp;=%20%5Cfrac%7BS_t%7D%7BX_t%7D%5B(%5Csigma_X%5E2%20+r_%7BUSD%7D%20+%20%5Crho%20%5Csigma_X%20%5Csigma_S%20)%20dt%20+%20%5Csigma_S%20dZ_S%5E%7BQ%5E%7BINR%7D%7D(t)%20-%20%5Csigma_X%20(%5Crho%20%5Ccdot%20dZ_S%5E%7BQ%5E%7BINR%7D%7D(t)%20+%20%20%5Csqrt%7B1-%5Crho%5E2%7D%20%5Ccdot%20dZ_X%5E%7BQ%5E%7BINR%7D%7D(t))%5D%20%5C%5C%0A&amp;=%5Cfrac%7BS_t%7D%7BX_t%7D%5B(%5Csigma_X%5E2%20+r_%7BUSD%7D%20+%20%5Crho%20%5Csigma_X%20%5Csigma_S%20)%20dt%20+%20(%5Csigma_S%20-%20%5Crho%20%5Csigma_X%20)%20dZ_S%5E%7BQ%5E%7BINR%7D%7D(t)%20-%20(%5Csigma_X%20%5Csqrt%7B1-%5Crho%5E2%7D)%20dZ_X%5E%7BQ%5E%7BINR%7D%7D(t)%5D%0A%5Cend%7Balign*%7D%0A"></p>
<p>Define:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0AB%5E%7BQ%5E%7BINR%7D%7D(t)%20=%20%5Cfrac%7B(%5Csigma_S%20-%20%5Crho%20%5Csigma_X%20)%20Z_S%5E%7BQ%5E%7BINR%7D%7D(t)%20-%20(%5Csigma_X%20%5Csqrt%7B1-%5Crho%5E2%7D)%20Z_X%5E%7BQ%5E%7BINR%7D%7D(t)%7D%7B(%5Csigma_S%20-%20%5Crho%20%5Csigma_X%20)%5E2%20+%20(%5Csigma_X%20%5Csqrt%7B1-%5Crho%5E2%7D)%5E2%7D%0A"></p>
<p>It’s easy to see that <img src="https://latex.codecogs.com/png.latex?B%5E%7BQ%5E%7BINR%7D%7D(t)"> is Gaussian and has mean and variance given by <img src="https://latex.codecogs.com/png.latex?%5Cmathcal%7BN%7D(0,t)">.</p>
<p>Consequently, we can re-write the SDE as:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0Ad%5Cleft(%5Cfrac%7BS_t%7D%7BX_t%7D%5Cright)%20=%20%5Cfrac%7BS_t%7D%7BX_t%7D%5B(%5Csigma_X%5E2%20+r_%7BUSD%7D%20+%20%5Crho%20%5Csigma_X%20%5Csigma_S%20)%20dt%20+%20(%5Csigma_S%5E2%20-%202%5Crho%20%5Csigma_S%20%5Csigma_X%20+%20%5Csigma_X%5E2)dB%5E%7BQ%5E%7BINR%7D%7D(t)%5D%0A"></p>
<p>Thus, <img src="https://latex.codecogs.com/png.latex?(%5Cfrac%7BS_t%7D%7BX_t%7D)_%7Bt%5Cgeq%200%7D"> follows a geometric brownian motion:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cfrac%7BS_t%7D%7BX_t%7D%20=%20%5Cfrac%7BS_0%7D%7BX_0%7D%5Cexp%5Cleft%5B%5Cleft(%5Calpha%20-%20%5Cfrac%7B%5Cbeta%5E2%7D%7B2%7D%5Cright)T+%5Cbeta%20B%5E%7BQ%5E%7BINR%7D%7D(T)%5Cright%5D%0A"></p>
<p>where <img src="https://latex.codecogs.com/png.latex?%5Calpha%20=%20%5Csigma_X%5E2%20+r_%7BUSD%7D%20+%20%5Crho%20%5Csigma_X%20%5Csigma_S">, <img src="https://latex.codecogs.com/png.latex?%5Cbeta%20=%20%5Csigma_S%5E2%20-%202%5Crho%20%5Csigma_S%20%5Csigma_X%20+%20%5Csigma_X%5E2"></p>
<p>This can easily be plugged into the Black formula to derive analytic expressions for quanto vanilla calls and puts.</p>


</section>

 ]]></description>
  <category>Stochastic Calculus</category>
  <guid>http://quantdev.blog/posts/quanto-options/index.html</guid>
  <pubDate>Thu, 15 May 2025 23:00:00 GMT</pubDate>
  <media:content url="http://quantdev.blog/posts/quanto-options/image.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Custom iterators and Iterator concepts</title>
  <dc:creator>Quasar </dc:creator>
  <link>http://quantdev.blog/posts/custom-iterators/index.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>An iterator is a generalization of a pointer. C++ STL containers usually expose iterators as part of their interface. They abstract away lower-level implementation details of traversing through container types, thus freeing the container-user to focus on algorithm design/business logic.</p>
</section>
<section id="traditional-c-iterators" class="level1">
<h1>Traditional C++ iterators</h1>
<p>Iterators have been around since before C++11, but they really hit mainstream since C++11 started shipping. The STL containers all implement their own iterators, however, it’s possible for developers to write their own iterators for custom collections.</p>
<p>In the past, you’d implement iterators using <a href="https://en.cppreference.com/w/cpp/iterator/iterator_tags">tagging</a>. A tag is simply an empty struct, with no data or behavior. It is often used to perform static dispatching (compile-time polymorphism). Here is a minimalistic example:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp number-lines code-with-copy"><code class="sourceCode cpp"><span id="cb1-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include</span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;iostream&gt;</span></span>
<span id="cb1-2"></span>
<span id="cb1-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">namespace</span> dev<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb1-4">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> random_access_iterator_tag<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{};</span></span>
<span id="cb1-5">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> forward_iterator_tag<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{};</span></span>
<span id="cb1-6"></span>
<span id="cb1-7">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">template</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">typename</span> T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb1-8">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> vector<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb1-9">        T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_data</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-10">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>size_t<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> </span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_size</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-11">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>size_t<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> </span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_capacity</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-12">        </span>
<span id="cb1-13">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> iterator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb1-14">            <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">using</span> iterator_category <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> random_access_iterator_tag<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-15">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/* .... */</span></span>
<span id="cb1-16">            T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_ptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-17">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb1-18"></span>
<span id="cb1-19">        iterator begin<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(){</span></span>
<span id="cb1-20">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>iterator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_data</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">));</span></span>
<span id="cb1-21">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb1-22">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb1-23"></span>
<span id="cb1-24">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">template</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">typename</span> T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb1-25">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> list<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb1-26">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> node<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb1-27">            T data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-28">            node<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> next<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-29">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb1-30"></span>
<span id="cb1-31">        node<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> head<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-32">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>size_t<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> </span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_size</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-33">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> iterator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb1-34">            <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">using</span> iterator_category <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> forward_iterator_tag<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-35">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/* .... */</span></span>
<span id="cb1-36">            node<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_ptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-37">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb1-38"></span>
<span id="cb1-39">        iterator begin<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(){</span></span>
<span id="cb1-40">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>iterator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>head<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">));</span></span>
<span id="cb1-41">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb1-42">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb1-43"></span>
<span id="cb1-44">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">template</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">typename</span> It<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb1-45">    It advance<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>It iterator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>size_t<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> </span>n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> forward_iterator_tag<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">){</span></span>
<span id="cb1-46">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>cout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> &lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Advance a foward iterator"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-47">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> iterator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-48">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb1-49"></span>
<span id="cb1-50">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">template</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">typename</span> It<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb1-51">    It advance<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>It iterator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>size_t<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> </span>n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> random_access_iterator_tag<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">){</span></span>
<span id="cb1-52">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>cout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> &lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Advance a random access iterator"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-53">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> iterator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-54">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb1-55"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb1-56"></span>
<span id="cb1-57"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> main<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(){</span></span>
<span id="cb1-58">    dev<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>vector<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> vec<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-59">    dev<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>list<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> lst<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-60"></span>
<span id="cb1-61">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">auto</span> it <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> vec<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>begin<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb1-62">    dev<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>advance<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>it<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> dev<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>vector<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;::</span>iterator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>iterator_category<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">());</span></span>
<span id="cb1-63"></span>
<span id="cb1-64">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">auto</span> it2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> lst<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>begin<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb1-65">    dev<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>advance<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>it2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> dev<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>list<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;::</span>iterator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>iterator_category<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">());</span></span>
<span id="cb1-66"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p><a href="https://godbolt.org/z/q7YGG8oj5">Compiler Explorer</a></p>
<p>An iterator over a custom array-like sequence of elements would look like the following:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp number-lines code-with-copy"><code class="sourceCode cpp"><span id="cb2-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;iterator&gt;</span></span>
<span id="cb2-2"></span>
<span id="cb2-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">template</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb2-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> Iterator <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb2-5">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">using</span> iterator_category <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>forward_iterator_tag<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-6">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">using</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">value_type</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-7">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">using</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">difference_type</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>ptrdiff_t<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-8">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">using</span> pointer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*;</span></span>
<span id="cb2-9">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">using</span> reference <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;;</span></span>
<span id="cb2-10"></span>
<span id="cb2-11">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// ...rest of iterator implementation here</span></span>
<span id="cb2-12"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span></code></pre></div>
<p>This requires you to write a lot of boiler-plate code. While tagging works, it puts an extra-burden on the developer.</p>
</section>
<section id="modern-c-iterators" class="level1">
<h1>Modern C++ iterators</h1>
<p>C++20 has a language feature called <a href="https://quantdev.blog/posts/c++20-concepts/index.html">concepts</a> - a set of named constaints that a type should satisfy. So, we can now implement iterators based on their behavior, rather than their <em>identity</em>. This is often referred to as <strong>duck typing</strong>: the idea that <em>if an entity looks like a duck and quacks like a duck, it must be a duck.</em></p>
<p>A new system of iterators based on concepts has been introduced.</p>
<ul>
<li><a href="https://en.cppreference.com/w/cpp/iterator/input_iterator"><code>std::input_iterator</code></a></li>
<li><a href="https://en.cppreference.com/w/cpp/iterator/output_iterator"><code>std::output_iterator</code></a></li>
<li><a href="https://en.cppreference.com/w/cpp/iterator/forward_iterator"><code>std::forward_iterator</code></a></li>
<li><a href="https://en.cppreference.com/w/cpp/iterator/bidirectional_iterator"><code>std::birdirectional_iterator</code></a></li>
<li><a href="https://en.cppreference.com/w/cpp/iterator/random_access_iterator"><code>std::random_access_iterator</code></a></li>
<li><a href="https://en.cppreference.com/w/cpp/iterator/contiguous_iterator"><code>std::contiguous_iterator</code></a></li>
</ul>
<p>Before we deep-dive into these iterator concepts, let’s understand <a href="https://en.cppreference.com/w/cpp/iterator/sentinel_for"><code>std::sentinel_for</code></a> concept.</p>
<p>A sentinel signals the end of a sequence of values. Prior to C++20, when traversing a collection, the way you’d check if you’ve hit the end of the collection was to compare your current iterator with an <code>end()</code> iterator.</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp number-lines code-with-copy"><code class="sourceCode cpp"><span id="cb3-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include</span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;vector&gt;</span></span>
<span id="cb3-2"></span>
<span id="cb3-3"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> main<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(){</span></span>
<span id="cb3-4">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>vector<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">double</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> v<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">4.0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">5.0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb3-5"></span>
<span id="cb3-6">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Traverse a std::vector</span></span>
<span id="cb3-7">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">auto</span> it <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>v<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>begin<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()};</span> it<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span>v<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>end<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++</span>it<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">){</span></span>
<span id="cb3-8">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>cout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> &lt;&lt;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>it <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-9">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb3-10"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p>Usually, this end iterator was just a case of your normal iterator that had some internal state identifying it as one past the last element of the container.</p>
<p>Beginning C++20, you can actually use any type as a sentinel for an iterator so long as the type satisfies the <code>std::sentinel_for</code> concept. <code>std::sentinel_for</code> concept requires</p>
<section id="stdinput_or_output_iterator" class="level2">
<h2 class="anchored" data-anchor-id="stdinput_or_output_iterator"><code>std::input_or_output_iterator</code></h2>
<p>The <code>input_or_output_iterator</code> is the basis of the iterator concept taxonomy. It only requires that an iterator type <code>It</code> supports the operations for dereferencing and incrementing the iterator.</p>
</section>
<section id="stdoutput_iterator" class="level2">
<h2 class="anchored" data-anchor-id="stdoutput_iterator"><code>std::output_iterator</code></h2>
<p><code>std::output_iterator</code> concept models the idea of a write-only iterator. E.g. such an iterator can be used to write to the standard output stream. Hence, they can only be dereferenced on the left-hand side of an assignment operator.</p>
<p>Since, they are single pass, we don’t even need to implement an equality comparison operator, because they don’t have an end iterator or sentinel value to compare against.</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp number-lines code-with-copy"><code class="sourceCode cpp"><span id="cb4-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;cstddef&gt;</span></span>
<span id="cb4-2"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;iterator&gt;</span></span>
<span id="cb4-3"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;concepts&gt;</span></span>
<span id="cb4-4"></span>
<span id="cb4-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">template</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">typename</span> T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb4-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> SimpleOutputIterator <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb4-7">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">using</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">difference_type</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>ptrdiff_t<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-8">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">using</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">value_type</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-9">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">using</span> pointer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*;</span></span>
<span id="cb4-10"></span>
<span id="cb4-11">    pointer <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_buffer_ptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-12"></span>
<span id="cb4-13">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Default constructor</span></span>
<span id="cb4-14">    SimpleOutputIterator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">default</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-15"></span>
<span id="cb4-16">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Constructor</span></span>
<span id="cb4-17">    SimpleOutputIterator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>pointer start<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb4-18">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_buffer_ptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>start<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span></span>
<span id="cb4-19"></span>
<span id="cb4-20">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Dereference operator</span></span>
<span id="cb4-21">    T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">operator</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb4-22">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_buffer_ptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-23">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb4-24"></span>
<span id="cb4-25">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Pre-increment</span></span>
<span id="cb4-26">    SimpleOutputIterator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">operator</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb4-27">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_buffer_ptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-28">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(*</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">this</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb4-29">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb4-30"></span>
<span id="cb4-31">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Post-increment</span></span>
<span id="cb4-32">    SimpleOutputIterator <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">operator</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb4-33">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">auto</span> tmp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">this</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-34">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++(*</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">this</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb4-35">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> tmp<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-36">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb4-37"></span>
<span id="cb4-38"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb4-39"></span>
<span id="cb4-40"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">static_assert</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>output_iterator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>SimpleOutputIterator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;);</span></span>
<span id="cb4-41"></span>
<span id="cb4-42"></span>
<span id="cb4-43"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> main<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(){</span></span>
<span id="cb4-44">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-45"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p><a href="https://godbolt.org/z/nEEh35q45">Compiler Explorer</a></p>
</section>
<section id="stdinput_iterator" class="level2">
<h2 class="anchored" data-anchor-id="stdinput_iterator"><code>std::input_iterator</code></h2>
<p><code>std::input_iterator</code> concept models the idea of a read-only iterator. Such an iterator, for example, can be used read packets data from a network socket.</p>
<p>Input iterators are also single-pass, because once you’ve read a byte of data from a network socket, you can’t read it again. They must also be comparable to some sentinel value such as <code>EOF</code>, <code>\0</code>, to signal the end of data etc.</p>
<p>However, the equality comparison operator <code>bool operator==(It, Sen)</code> is only used by the algorithm operating on the container, and therefore it’s the responsibility of the algorithm writer to supply an implementation of <code>bool operator==(It, Sen)</code>. This definition is not required in the container implementation.</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp number-lines code-with-copy"><code class="sourceCode cpp"><span id="cb5-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;cstddef&gt;</span></span>
<span id="cb5-2"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;iterator&gt;</span></span>
<span id="cb5-3"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;concepts&gt;</span></span>
<span id="cb5-4"></span>
<span id="cb5-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">template</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">typename</span> T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb5-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> SimpleInputIterator <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb5-7">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">using</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">difference_type</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>ptrdiff_t<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb5-8">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">using</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">value_type</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb5-9">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">using</span> pointer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*;</span></span>
<span id="cb5-10">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">using</span> reference <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;;</span></span>
<span id="cb5-11"></span>
<span id="cb5-12">    pointer <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_socket_fd</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb5-13"></span>
<span id="cb5-14">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Default constructor</span></span>
<span id="cb5-15">    SimpleInputIterator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">default</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb5-16"></span>
<span id="cb5-17">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Constructor</span></span>
<span id="cb5-18">    SimpleInputIterator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>pointer start<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb5-19">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_socket_fd</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>start<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span></span>
<span id="cb5-20"></span>
<span id="cb5-21">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Dereference operator</span></span>
<span id="cb5-22">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">operator</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*()</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb5-23">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_socket_fd</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb5-24">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb5-25"></span>
<span id="cb5-26">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Pre-increment</span></span>
<span id="cb5-27">    SimpleInputIterator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">operator</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb5-28">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_socket_fd</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb5-29">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(*</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">this</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb5-30">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb5-31"></span>
<span id="cb5-32">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Post-increment</span></span>
<span id="cb5-33">    SimpleInputIterator <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">operator</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb5-34">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">auto</span> tmp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">this</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb5-35">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++(*</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">this</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb5-36">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> tmp<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb5-37">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb5-38"></span>
<span id="cb5-39"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb5-40"></span>
<span id="cb5-41"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">static_assert</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>input_iterator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>SimpleInputIterator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;);</span></span>
<span id="cb5-42"></span>
<span id="cb5-43"></span>
<span id="cb5-44"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> main<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(){</span></span>
<span id="cb5-45">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb5-46"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p><a href="https://godbolt.org/z/4ocGnaaPM">Compiler Explorer</a></p>
</section>
<section id="stdforward_iterator" class="level2">
<h2 class="anchored" data-anchor-id="stdforward_iterator"><code>std::forward_iterator</code></h2>
<p><code>std::forward_iterator</code> requires that the iterator type be an input (read-only) iterator and also be <a href="https://en.cppreference.com/w/cpp/iterator/incrementable">std::incrementable</a>.</p>
<p><code>std::input_iterator</code> only requires the iterator be <code>std::weakly_incrementable</code>. So while it supports the increment <code>operator++()</code>, if <code>i</code> and <code>j</code> are two instances of the iterator type <code>It</code>, <code>i == j</code> does not imply <code>++i == ++j</code>. That is, algorithms on weakly-incrementable types must be single-pass algorithms.</p>
<p><code>std::incrementable</code> concept informally means that <code>i == j</code> <img src="https://latex.codecogs.com/png.latex?%5Cimplies"> <code>++i == ++j</code>. Algorithms on incrementable types are multi-pass algorithms.</p>
<p>You might use an iterator satisfying <code>std::forward_iterator</code> concept to traverse through a <code>std::forward_list</code> (a singly linked-list).</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp number-lines code-with-copy"><code class="sourceCode cpp"><span id="cb6-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;cstddef&gt;</span></span>
<span id="cb6-2"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;iterator&gt;</span></span>
<span id="cb6-3"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;concepts&gt;</span></span>
<span id="cb6-4"></span>
<span id="cb6-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">template</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">typename</span> T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb6-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> list_node <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb6-7">    T <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_data</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb6-8">    list_node<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_next</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb6-9"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb6-10"></span>
<span id="cb6-11"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">template</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">typename</span> T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb6-12"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> SimpleForwardIterator <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb6-13">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">using</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">difference_type</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>ptrdiff_t<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb6-14">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">using</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">value_type</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// The value type is T, not list_node&lt;T&gt;</span></span>
<span id="cb6-15">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">using</span> pointer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*;</span></span>
<span id="cb6-16">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">using</span> reference <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;;</span></span>
<span id="cb6-17"></span>
<span id="cb6-18">    list_node<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;*</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_node_ptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb6-19"></span>
<span id="cb6-20">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Default constructor</span></span>
<span id="cb6-21">    SimpleForwardIterator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">default</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb6-22"></span>
<span id="cb6-23">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Constructor</span></span>
<span id="cb6-24">    SimpleForwardIterator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>list_node<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;*</span> start<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb6-25">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_node_ptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>start<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span></span>
<span id="cb6-26"></span>
<span id="cb6-27">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Dereference operator</span></span>
<span id="cb6-28">    reference <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">operator</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*()</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb6-29">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_node_ptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_data</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Return the data stored in the node</span></span>
<span id="cb6-30">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb6-31"></span>
<span id="cb6-32">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Pre-increment</span></span>
<span id="cb6-33">    SimpleForwardIterator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">operator</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb6-34">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_node_ptr</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_node_ptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_next</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb6-35">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">this</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb6-36">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb6-37"></span>
<span id="cb6-38">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Post-increment</span></span>
<span id="cb6-39">    SimpleForwardIterator <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">operator</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb6-40">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">auto</span> tmp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">this</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb6-41">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++(*</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">this</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb6-42">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> tmp<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb6-43">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb6-44"></span>
<span id="cb6-45">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Equality comparison</span></span>
<span id="cb6-46">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">bool</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">operator</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==(</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> SimpleForwardIterator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> other<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb6-47">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_node_ptr</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> other<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_node_ptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb6-48">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb6-49"></span>
<span id="cb6-50">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Inequality comparison</span></span>
<span id="cb6-51">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">bool</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">operator</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=(</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> SimpleForwardIterator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> other<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb6-52">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!(*</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">this</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> other<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb6-53">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb6-54"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb6-55"></span>
<span id="cb6-56"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">static_assert</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>forward_iterator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>SimpleForwardIterator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;);</span></span>
<span id="cb6-57"></span>
<span id="cb6-58"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> main<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb6-59">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb6-60"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p><a href="https://godbolt.org/z/edEr4oedn">Compiler Explorer</a></p>
</section>
<section id="stdbidirectional_iterator" class="level2">
<h2 class="anchored" data-anchor-id="stdbidirectional_iterator"><code>std::bidirectional_iterator</code></h2>
<p>A <code>std::list</code> is a doubly linked that supports both traversals in the forward as well as reverse direction. When we want to be able to move forward and backwards across our collection, we must implement an iterator satisfying <code>std::bidirectional_iterator</code> concept.</p>
<p>You need to implement pre-increment, post-increment, pre-decrement and post-decrement operations.</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp number-lines code-with-copy"><code class="sourceCode cpp"><span id="cb7-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;cstddef&gt;</span></span>
<span id="cb7-2"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;iterator&gt;</span></span>
<span id="cb7-3"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;concepts&gt;</span></span>
<span id="cb7-4"></span>
<span id="cb7-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">template</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">typename</span> T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb7-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> list_node <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb7-7">    T <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_data</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb7-8">    list_node<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_next</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb7-9">    list_node<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_prev</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb7-10"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb7-11"></span>
<span id="cb7-12"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">template</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">typename</span> T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb7-13"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> SimpleBidirectionalIterator <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb7-14">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">using</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">difference_type</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>ptrdiff_t<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb7-15">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">using</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">value_type</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// The value type is T, not list_node&lt;T&gt;</span></span>
<span id="cb7-16">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">using</span> pointer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*;</span></span>
<span id="cb7-17">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">using</span> reference <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;;</span></span>
<span id="cb7-18"></span>
<span id="cb7-19">    list_node<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;*</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_node_ptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb7-20"></span>
<span id="cb7-21">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Default constructor</span></span>
<span id="cb7-22">    SimpleBidirectionalIterator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">default</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb7-23"></span>
<span id="cb7-24">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Constructor</span></span>
<span id="cb7-25">    SimpleBidirectionalIterator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>list_node<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;*</span> start<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb7-26">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_node_ptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>start<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span></span>
<span id="cb7-27"></span>
<span id="cb7-28">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Dereference operator</span></span>
<span id="cb7-29">    reference <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">operator</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*()</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb7-30">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_node_ptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_data</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Return the data stored in the node</span></span>
<span id="cb7-31">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb7-32"></span>
<span id="cb7-33">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Pre-increment</span></span>
<span id="cb7-34">    SimpleBidirectionalIterator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">operator</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb7-35">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_node_ptr</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_node_ptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_next</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb7-36">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">this</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb7-37">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb7-38"></span>
<span id="cb7-39">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Post-increment</span></span>
<span id="cb7-40">    SimpleBidirectionalIterator <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">operator</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb7-41">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">auto</span> tmp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">this</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb7-42">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++(*</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">this</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb7-43">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> tmp<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb7-44">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb7-45"></span>
<span id="cb7-46">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Pre-decrement</span></span>
<span id="cb7-47">    SimpleBidirectionalIterator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">operator</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">--(){</span></span>
<span id="cb7-48">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_node_ptr</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_node_ptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_prev</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb7-49">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">this</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb7-50">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb7-51"></span>
<span id="cb7-52">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Post-decrement</span></span>
<span id="cb7-53">    SimpleBidirectionalIterator <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">operator</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">--(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">){</span></span>
<span id="cb7-54">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">auto</span> tmp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">this</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb7-55">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">--(*</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">this</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb7-56">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> tmp<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb7-57">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb7-58"></span>
<span id="cb7-59">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Equality comparison</span></span>
<span id="cb7-60">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">bool</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">operator</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==(</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> SimpleBidirectionalIterator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> other<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb7-61">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_node_ptr</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> other<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_node_ptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb7-62">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb7-63"></span>
<span id="cb7-64">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Inequality comparison</span></span>
<span id="cb7-65">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">bool</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">operator</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=(</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> SimpleBidirectionalIterator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> other<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb7-66">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!(*</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">this</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> other<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb7-67">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb7-68"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb7-69"></span>
<span id="cb7-70"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">static_assert</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>bidirectional_iterator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>SimpleBidirectionalIterator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;);</span></span>
<span id="cb7-71"></span>
<span id="cb7-72"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> main<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb7-73">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb7-74"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p><a href="https://godbolt.org/z/o4cY68zse">Compiler Explorer</a></p>
</section>
<section id="stdrandom_access_iterator" class="level2">
<h2 class="anchored" data-anchor-id="stdrandom_access_iterator"><code>std::random_access_iterator</code></h2>
<p>Containers such as <code>std::vector&lt;T&gt;</code> and <code>std::array&lt;T,N&gt;</code> are a collection of elements that are stored contiguously in memory. Hence, the element at index <code>i</code> can be accessed in <img src="https://latex.codecogs.com/png.latex?O(1)"> constant-time.</p>
<p>What if I want to code up an iterator for jumping around the collection? Such an iterator must satisfy the <code>std::random_access_iterator</code> concept. The <code>std::random_access_iterator</code> concept requires that advancement with <code>+=</code>, <code>-=</code>, <code>+</code> and <code>-</code>, computation of distance between two elements and element access using the indexing operator <code>[]</code> be constant-time operations.</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp number-lines code-with-copy"><code class="sourceCode cpp"><span id="cb8-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;cstddef&gt;</span></span>
<span id="cb8-2"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;iterator&gt;</span></span>
<span id="cb8-3"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;concepts&gt;</span></span>
<span id="cb8-4"></span>
<span id="cb8-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">template</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">typename</span> T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb8-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> SimpleRandomAccessIterator <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb8-7">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">using</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">difference_type</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>ptrdiff_t<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb8-8">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">using</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">value_type</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb8-9">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">using</span> pointer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*;</span></span>
<span id="cb8-10">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">using</span> reference <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;;</span></span>
<span id="cb8-11"></span>
<span id="cb8-12">    T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_raw_data_ptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb8-13"></span>
<span id="cb8-14">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Default constructor</span></span>
<span id="cb8-15">    SimpleRandomAccessIterator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">default</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb8-16"></span>
<span id="cb8-17">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Constructor</span></span>
<span id="cb8-18">    SimpleRandomAccessIterator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> start<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb8-19">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_raw_data_ptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>start<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span></span>
<span id="cb8-20"></span>
<span id="cb8-21">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Dereference operator</span></span>
<span id="cb8-22">    reference <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">operator</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*()</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb8-23">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_raw_data_ptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb8-24">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb8-25"></span>
<span id="cb8-26">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Pre-increment</span></span>
<span id="cb8-27">    SimpleRandomAccessIterator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">operator</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb8-28">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_raw_data_ptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb8-29">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">this</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb8-30">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb8-31"></span>
<span id="cb8-32">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Post-increment</span></span>
<span id="cb8-33">    SimpleRandomAccessIterator <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">operator</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb8-34">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">auto</span> tmp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">this</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb8-35">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++(*</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">this</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb8-36">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> tmp<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb8-37">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb8-38"></span>
<span id="cb8-39">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Pre-decrement</span></span>
<span id="cb8-40">    SimpleRandomAccessIterator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">operator</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">--()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb8-41">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">--</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_raw_data_ptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb8-42">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">this</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb8-43">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb8-44"></span>
<span id="cb8-45">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Post-decrement</span></span>
<span id="cb8-46">    SimpleRandomAccessIterator <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">operator</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">--(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb8-47">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">auto</span> tmp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">this</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb8-48">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">--(*</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">this</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb8-49">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> tmp<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb8-50">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb8-51"></span>
<span id="cb8-52">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Array subscript operator</span></span>
<span id="cb8-53">    reference <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">operator</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[](</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">difference_type</span> n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb8-54">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_raw_data_ptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb8-55">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb8-56"></span>
<span id="cb8-57">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Compound addition</span></span>
<span id="cb8-58">    SimpleRandomAccessIterator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">operator</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">difference_type</span> n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb8-59">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_raw_data_ptr</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb8-60">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">this</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb8-61">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb8-62"></span>
<span id="cb8-63">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Compound subtraction</span></span>
<span id="cb8-64">    SimpleRandomAccessIterator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">operator</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-=(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">difference_type</span> n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb8-65">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_raw_data_ptr</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-=</span> n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb8-66">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">this</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb8-67">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb8-68"></span>
<span id="cb8-69">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Addition</span></span>
<span id="cb8-70">    SimpleRandomAccessIterator <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">operator</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">difference_type</span> n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb8-71">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> SimpleRandomAccessIterator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_raw_data_ptr</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb8-72">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb8-73"></span>
<span id="cb8-74">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Subtraction</span></span>
<span id="cb8-75">    SimpleRandomAccessIterator <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">operator</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">difference_type</span> n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb8-76">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> SimpleRandomAccessIterator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_raw_data_ptr</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb8-77">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb8-78"></span>
<span id="cb8-79">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Distance between iterators</span></span>
<span id="cb8-80">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">difference_type</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">operator</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-(</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> SimpleRandomAccessIterator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> other<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb8-81">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_raw_data_ptr</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> other<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_raw_data_ptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb8-82">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb8-83"></span>
<span id="cb8-84">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Equality comparison</span></span>
<span id="cb8-85">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">bool</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">operator</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==(</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> SimpleRandomAccessIterator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> other<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb8-86">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_raw_data_ptr</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> other<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_raw_data_ptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb8-87">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb8-88"></span>
<span id="cb8-89">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Inequality comparison</span></span>
<span id="cb8-90">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">bool</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">operator</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=(</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> SimpleRandomAccessIterator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> other<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb8-91">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!(*</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">this</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> other<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb8-92">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb8-93"></span>
<span id="cb8-94">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Relational operators</span></span>
<span id="cb8-95">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">bool</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">operator</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;(</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> SimpleRandomAccessIterator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> other<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb8-96">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_raw_data_ptr</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> other<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_raw_data_ptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb8-97">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb8-98"></span>
<span id="cb8-99">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">bool</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">operator</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=(</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> SimpleRandomAccessIterator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> other<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb8-100">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_raw_data_ptr</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> other<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_raw_data_ptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb8-101">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb8-102"></span>
<span id="cb8-103">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">bool</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">operator</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;(</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> SimpleRandomAccessIterator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> other<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb8-104">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_raw_data_ptr</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> other<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_raw_data_ptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb8-105">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb8-106"></span>
<span id="cb8-107">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">bool</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">operator</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=(</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> SimpleRandomAccessIterator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> other<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb8-108">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_raw_data_ptr</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> other<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_raw_data_ptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb8-109">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb8-110"></span>
<span id="cb8-111">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Friend operator+ for n + iterator</span></span>
<span id="cb8-112">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">template</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">typename</span> U<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb8-113">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">friend</span> SimpleRandomAccessIterator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>U<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">operator</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+(</span></span>
<span id="cb8-114">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">typename</span> SimpleRandomAccessIterator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>U<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;::</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">difference_type</span> n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb8-115">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> SimpleRandomAccessIterator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>U<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&amp;</span> it</span>
<span id="cb8-116">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb8-117">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> SimpleRandomAccessIterator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>U<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;(</span>it<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_raw_data_ptr</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb8-118">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb8-119"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb8-120"></span>
<span id="cb8-121"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">static_assert</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>random_access_iterator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>SimpleRandomAccessIterator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;);</span></span>
<span id="cb8-122"></span>
<span id="cb8-123"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> main<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb8-124">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb8-125"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p><a href="https://godbolt.org/z/8xYY4G75W">Compiler Explorer</a></p>
</section>
</section>


<div id="quarto-appendix" class="default"><section id="references" class="level1 appendix"><h2 class="anchored quarto-appendix-heading">References</h2><div class="quarto-appendix-contents">

<ul>
<li><a href="https://hitchcock.codes/blog/cpp-iterators-in-depth">cpp iterators in depth</a> by Braden Hitchcock.</li>
</ul>


</div></section></div> ]]></description>
  <category>C++</category>
  <guid>http://quantdev.blog/posts/custom-iterators/index.html</guid>
  <pubDate>Sun, 04 May 2025 23:00:00 GMT</pubDate>
  <media:content url="http://quantdev.blog/posts/custom-iterators/cpp.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>A note on make_shared&lt;T&gt;(Args&amp;&amp;...) and make_unique&lt;T&gt;(Args&amp;&amp;...)</title>
  <dc:creator>Quasar </dc:creator>
  <link>http://quantdev.blog/posts/make-shared-and-make-unique/index.html</link>
  <description><![CDATA[ 




<section id="a-note-on-make_uniquetargs..." class="level1">
<h1>A note on <code>make_unique&lt;T&gt;(Args&amp;&amp;...)</code></h1>
<p>Since C++14, <code>unique_ptr&lt;T&gt;</code> has been accpompanied by the factory function <code>make_unique&lt;T&gt;(Args&amp;&amp;...)</code> that perfectly forwards its arguments to the constructor of <code>T</code>. Why standard library implementors provide a separate factory function <code>make_unique&lt;T&gt;(Args&amp;&amp;...)</code>, when the constructor <code>unique_ptr&lt;T&gt;(T*)</code> does the same job?</p>
<p><code>std::unique_ptr&lt;T&gt;</code> models ownership of the resource semantics. Calling <code>unique_ptr&lt;T&gt;(T*)</code> makes the client code responsible for supplying a pre-existing <code>T</code> object whose address is passed as an argument.</p>
<p>Consider the following code snippet:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp number-lines code-with-copy"><code class="sourceCode cpp"><span id="cb1-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include</span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;iostream&gt;</span></span>
<span id="cb1-2"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include</span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;memory&gt;</span></span>
<span id="cb1-3"></span>
<span id="cb1-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">template</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">typename</span> T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb1-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> pair_allocator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb1-6">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb1-7">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>unique_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> p1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-8">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>unique_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> p2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-9"></span>
<span id="cb1-10">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb1-11">    pair_allocator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">default</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-12">    pair_allocator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>T x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> T y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb1-13">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> p1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">new</span> T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">))</span></span>
<span id="cb1-14">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> p2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">new</span> T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">))</span></span>
<span id="cb1-15">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span></span>
<span id="cb1-16"></span>
<span id="cb1-17">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>pair_allocator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">default</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-18"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span></code></pre></div>
<p>We know that, the member subobjects of a C++ object are constructed in the order of their declaration. So, <code>p1</code> is constructed before <code>p2</code>. Also, the allocation and construction operation <code>new T(x)</code> precedes the construction of <code>p1</code>. <code>new T(y)</code> precedes the construction of <code>p2</code>.</p>
<p>Denoting <img src="https://latex.codecogs.com/png.latex?A:="> <code>new T(x)</code>, <img src="https://latex.codecogs.com/png.latex?B:="> Construction of <code>p1</code>, <img src="https://latex.codecogs.com/png.latex?C:="> <code>new T(y)</code>, <img src="https://latex.codecogs.com/png.latex?D:="> Construction of <code>p2</code>.</p>
<p>If we see the rules laid out above, we could have the operations in the following order: <img src="https://latex.codecogs.com/png.latex?A%20%5Crightarrow%20B%20%5Crightarrow%20C%20%5Crightarrow%20D">, but we could also have <img src="https://latex.codecogs.com/png.latex?A%20%5Crightarrow%20C%20%5Crightarrow%20B%20%5Crightarrow%20D"> or <img src="https://latex.codecogs.com/png.latex?C%20%5Crightarrow%20A%20%5Crightarrow%20B%20%5Crightarrow%20D">, in which case the two calls to <code>new T(...)</code> occur prior to the construction of <code>p1</code> and <code>p2</code>. If this happens, then an exception thrown by the second call to <code>new T(...)</code> would lead to a memory leak, because we fail to release the memory allocated by the first call to <code>new T()</code>.</p>
<p>The factory function <code>make_unique&lt;T&gt;(Args&amp;&amp;...)</code> is a wrapper over the operations <code>new T()</code> and <code>unique__ptr&lt;T&gt;()</code>, and so if the second call to <code>new T()</code> fails, the object <code>p1</code> goes out of scope, its destructor <code>~unique_ptr&lt;T&gt;()</code> in turn calls operator <code>delete T</code>, destroying the <code>T</code> object and releasing the memory held by <code>T</code>.</p>
<p>If we modify the above snippet as:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp number-lines code-with-copy"><code class="sourceCode cpp"><span id="cb2-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include</span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;iostream&gt;</span></span>
<span id="cb2-2"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include</span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;memory&gt;</span></span>
<span id="cb2-3"></span>
<span id="cb2-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">template</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">typename</span> T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb2-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> pair_allocator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb2-6">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb2-7">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>unique_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> p1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-8">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>unique_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> p2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-9"></span>
<span id="cb2-10">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb2-11">    pair_allocator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">default</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-12">    pair_allocator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>T x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> T y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb2-13">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> p1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>make_unique<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;(</span>x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">))</span></span>
<span id="cb2-14">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> p2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>make_unique<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;(</span>y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">))</span></span>
<span id="cb2-15">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span></span>
<span id="cb2-16"></span>
<span id="cb2-17">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>pair_allocator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">default</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-18"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span></code></pre></div>
<p>In this instance, the client code will never find itself with <em>floating results from calls to <code>new</code></em>. <code>make_unique&lt;T&gt;</code> is therefore a security feature that prevents client code being exposed to ownerless resources.</p>
</section>
<section id="a-note-on-make_sharedtargs..." class="level1">
<h1>A note on <code>make_shared&lt;T&gt;(Args&amp;&amp;...)</code></h1>
<p>In modern C++, it is recommended practice to replace this:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp number-lines code-with-copy"><code class="sourceCode cpp"><span id="cb3-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>shared_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span></span>
<span id="cb3-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">new</span> T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/* ... constructor args ... */</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb3-3"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span></code></pre></div>
<p>with</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp number-lines code-with-copy"><code class="sourceCode cpp"><span id="cb4-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>shared_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>make_shared<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;(</span> </span>
<span id="cb4-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/* ... constructor args ... */</span></span>
<span id="cb4-3"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span></code></pre></div>
<p>One might wonder, why this is recommended practice? To understand why the factory function <code>make_shared&lt;T&gt;(/* ... ctor args ...*/)</code> is preferred to the constructor <code>shared_ptr&lt;T&gt;( new T( /*... ctor args ...*/) )</code>, we need to realize that with the <code>shared_ptr&lt;T&gt;(T*)</code> constructor, the client code is reponsible for the construction of the <code>T</code> object (pointee), and is then given to <code>shared_ptr&lt;T&gt;</code> under construction, which takes ownership of the pointer and allocates a shared counter <strong>separately</strong>. So, there are two separate allocations (the <code>T</code> object and the counter), probably on different cache lines.</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>The cache memory usually keeps 64-byte lines of memory. A cache line is also the smallest fundamental unit of data transfer between the CPU cache and the main memory. On most architectures, a cache line is 64 bytes or 128 bytes.</p>
</div>
</div>
<p>Now, if we go through <code>make_shared&lt;T&gt;()</code>, this factory function is responsible for allocating both the <code>T</code> object and the counter, perfectly forwarding the constructor arguments received by the function to the constructor of <code>T</code>. Since, the same function performs both allocations, it can fuse them into a single allocation of a memory block that contains both the <code>T</code> object and the shared counter, <em>putting them both on the same cache line</em>. This can lead to enhanced performance characteristics, if a single thread tries to read from both the pointers (<code>T*</code> and the counter) in a short span of time.</p>
<p>In most libraries, the factory function <code>make_shared&lt;T&gt;</code> is implemented as:</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp number-lines code-with-copy"><code class="sourceCode cpp"><span id="cb5-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">template</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">typename</span> T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">typename</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...</span> Args<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb5-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>shared_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> make_shared<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>Args<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;...</span> args<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">){</span></span>
<span id="cb5-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>shared_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span></span>
<span id="cb5-4">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">new</span> T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>forward<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;(</span>args<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)...)</span></span>
<span id="cb5-5">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb5-6"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>


</section>

 ]]></description>
  <category>C++</category>
  <guid>http://quantdev.blog/posts/make-shared-and-make-unique/index.html</guid>
  <pubDate>Sat, 03 May 2025 23:00:00 GMT</pubDate>
  <media:content url="http://quantdev.blog/posts/make-shared-and-make-unique/cpp.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>unique_ptr - A custom implementation</title>
  <dc:creator>Quasar </dc:creator>
  <link>http://quantdev.blog/posts/unique_ptr/index.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>In this post, I try to write a simple homegrown version of <code>std::unique_ptr&lt;T&gt;</code>. This post is partly inspired by the fantastic book <a href="https://www.amazon.com/Memory-Management-leaner-memory-management-techniques/dp/1805129805">C++ Memory Management</a> by <em>Patrice Roy</em>. Tghe toy examples in this book are very instructive and I highly reckon you order a copy. Our goal is just to build intuition for the kind of code required to write such a type, and not to try and replace the standard library facilities.</p>
<p>The <code>std::unique_ptr&lt;T&gt;</code> smart pointer type models unqiue(sole) ownership of the resource semantics.</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp number-lines code-with-copy"><code class="sourceCode cpp"><span id="cb1-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> X<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{};</span></span>
<span id="cb1-2"></span>
<span id="cb1-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>unique_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>X<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> p1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>make_unique<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>X<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;();</span>  </span>
<span id="cb1-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//std::unique_ptr&lt;X&gt; p2(p1);      // Error when calling copy constructor, </span></span>
<span id="cb1-5">                                  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// p1 is the exclusive owner</span></span></code></pre></div>
<p><code>std::unique_ptr</code> enforces exclusive ownership using the fact, that it is not <em>copy-constructible</em> or <em>copy-assignable</em>. Note however, that it doesn’t prevent you from writing deliberately hostile code. The below code is compiles perfectly well and is valid C++.</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp number-lines code-with-copy"><code class="sourceCode cpp"><span id="cb2-1"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">new</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb2-2"></span>
<span id="cb2-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>unique_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> p1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span>  </span>
<span id="cb2-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>unique_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> p2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span>      </span></code></pre></div>
<p>The copy constructor and the copy assignment operator of <code>std::unique_ptr&lt;T&gt;</code> are marked <code>delete</code>. It is however, <em>move constructible</em> and <em>move-assignable</em>.</p>
</section>
<section id="basic-functionalities-to-expect-out-of-stdunique_ptrt" class="level1">
<h1>Basic functionalities to expect out of <code>std::unique_ptr&lt;T&gt;</code></h1>
<p>I skimmed through the documentation for <code>std::unique_ptr</code> on cppreference.com. A basic implementation of <code>unique_ptr</code> in less than 200 lines of code should pass the following unit tests:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp number-lines code-with-copy"><code class="sourceCode cpp"><span id="cb3-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;gtest/gtest.h&gt;</span></span>
<span id="cb3-2"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">"unique_ptr.h"</span></span>
<span id="cb3-3"></span>
<span id="cb3-4">TEST<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>UniquePtrTest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> CreateAndAccessTest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb3-5"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb3-6">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> raw_ptr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">new</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb3-7">    dev<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>unique_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> p1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>raw_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb3-8">    </span>
<span id="cb3-9">    EXPECT_EQ<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(*</span>p1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">true</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb3-10">    EXPECT_EQ<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>p1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>get<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(),</span> raw_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb3-11"></span>
<span id="cb3-12">    dev<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>unique_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> p2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">new</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">17</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb3-13">    EXPECT_EQ<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(*</span>p2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">17</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">true</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb3-14">    EXPECT_EQ<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>p2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>get<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">nullptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">true</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb3-15"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb3-16"></span>
<span id="cb3-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/* Move constructor - Transfer of ownership */</span></span>
<span id="cb3-18">TEST<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>UniquePtrTest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> MoveConstructorTest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb3-19"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb3-20">    dev<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>unique_ptr p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>dev<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>unique_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">new</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">17</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">))};</span></span>
<span id="cb3-21"></span>
<span id="cb3-22">    EXPECT_EQ<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(*</span>p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">17</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb3-23">    EXPECT_EQ<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">nullptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">true</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb3-24"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb3-25"></span>
<span id="cb3-26"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/* Move assignment */</span></span>
<span id="cb3-27">TEST<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>UniquePtrTest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> MoveAssignmentTest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb3-28"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb3-29">    dev<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>unique_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> p1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">new</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">));</span></span>
<span id="cb3-30">    p1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dev<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>unique_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">new</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">17</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">));</span></span>
<span id="cb3-31"></span>
<span id="cb3-32">    EXPECT_EQ<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>p1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">nullptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">true</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb3-33">    EXPECT_EQ<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(*</span>p1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">17</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">true</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb3-34"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb3-35"></span>
<span id="cb3-36"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Modifiers</span></span>
<span id="cb3-37"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/* release() : Returns the pointer to resource and releases ownership*/</span></span>
<span id="cb3-38">TEST<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>UniquePtrTest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> ReleaseTest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">){</span></span>
<span id="cb3-39">    dev<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>unique_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">double</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">new</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">double</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.14</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">));</span></span>
<span id="cb3-40">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">double</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> rawPtr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>release<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb3-41"></span>
<span id="cb3-42">    EXPECT_EQ<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>ptr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">nullptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">true</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb3-43">    EXPECT_EQ<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>rawPtr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">nullptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">true</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb3-44">    EXPECT_EQ<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(*</span>rawPtr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.14</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">true</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb3-45"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb3-46"></span>
<span id="cb3-47"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/* reset() :  replaces the managed object */</span></span>
<span id="cb3-48">TEST<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>UniquePtrTest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> ResetUniquePtr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb3-49">    dev<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>unique_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">new</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">));</span></span>
<span id="cb3-50">    ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>reset<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">new</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">));</span></span>
<span id="cb3-51">    EXPECT_EQ<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>ptr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">nullptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">true</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb3-52">    EXPECT_EQ<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(*</span>ptr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">true</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb3-53"></span>
<span id="cb3-54">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Self-reset test</span></span>
<span id="cb3-55">    ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>reset<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>get<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">());</span></span>
<span id="cb3-56"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb3-57"></span>
<span id="cb3-58"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/* swap() : swap the managed objects */</span></span>
<span id="cb3-59">TEST<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>UniquePtrTest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> SwapTest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">){</span></span>
<span id="cb3-60">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> first <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">new</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb3-61">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> second <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">new</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">17</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb3-62"></span>
<span id="cb3-63">    dev<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>unique_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> p1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>first<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb3-64">    dev<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>unique_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> p2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>second<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb3-65"></span>
<span id="cb3-66">    swap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>p1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> p2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb3-67"></span>
<span id="cb3-68">    EXPECT_EQ<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>p2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>get<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> first <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;</span> p1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>get<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> second<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">true</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb3-69">    EXPECT_EQ<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(((*</span>p1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">17</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">((*</span>p2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">),</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">true</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb3-70"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb3-71"></span>
<span id="cb3-72"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Observers</span></span>
<span id="cb3-73"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/* get() : Returns a pointer to the managed object or nullptr*/</span></span>
<span id="cb3-74">TEST<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>UniquePtrTest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> GetTest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">){</span></span>
<span id="cb3-75">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">double</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> resource <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">new</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">double</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.50</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb3-76">    dev<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>unique_ptr p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>resource<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb3-77"></span>
<span id="cb3-78">    EXPECT_EQ<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>get<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> resource<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">true</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb3-79">    EXPECT_EQ<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(*(</span>p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>get<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">())</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.50</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">true</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb3-80"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb3-81"></span>
<span id="cb3-82"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/* operator bool() : Checks whether *this owns an object*/</span></span>
<span id="cb3-83"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/*</span><span class="al" style="color: #AD0000;
background-color: null;
font-style: inherit;">TEST</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(UniquePtrTest, OperatorBoolTest){</span></span>
<span id="cb3-84"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    int* resource = new int(28);</span></span>
<span id="cb3-85"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    dev::unique_ptr&lt;int&gt; p1;</span></span>
<span id="cb3-86"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    dev::unique_ptr&lt;int&gt; p2(resource);</span></span>
<span id="cb3-87"></span>
<span id="cb3-88"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    EXPECT_EQ(p1, false);</span></span>
<span id="cb3-89"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    EXPECT_EQ(p2, true);</span></span>
<span id="cb3-90"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}*/</span></span>
<span id="cb3-91"></span>
<span id="cb3-92"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Pointer-like functions</span></span>
<span id="cb3-93">TEST<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>UniquePtrTest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> IndirectionOperatorTest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb3-94">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/* indirection operator* to dereference pointer to managed object,</span></span>
<span id="cb3-95"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">       member access operator -&gt; to call member function*/</span></span>
<span id="cb3-96">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb3-97">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> _n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-98"></span>
<span id="cb3-99">        X<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">default</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-100">        X<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> _n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span></span>
<span id="cb3-101">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>X<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">default</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-102">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> foo<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> _n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb3-103">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb3-104"></span>
<span id="cb3-105">    dev<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>unique_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>X<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">new</span> X<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">));</span></span>
<span id="cb3-106">    EXPECT_EQ<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">((*</span>ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">).</span>_n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">true</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb3-107">    EXPECT_EQ<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span>foo<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">true</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb3-108"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb3-109"></span>
<span id="cb3-110">TEST<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>UniquePtrTest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> PointerToArrayOfTConstructionAndAccess<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">){</span></span>
<span id="cb3-111">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/* Constructing unique_ptr&lt;T[]&gt; and access */</span></span>
<span id="cb3-112">    dev<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>unique_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[]&gt;</span> p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-113">    EXPECT_EQ<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">nullptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">true</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb3-114">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb3-115">        p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">new</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]{</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb3-116">        EXPECT_EQ<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">nullptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">true</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb3-117">        EXPECT_EQ<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(*</span>p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">true</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb3-118">        EXPECT_EQ<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">true</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb3-119">        p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>release<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb3-120">        EXPECT_EQ<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">nullptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">true</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb3-121">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb3-122"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="a-custom-implementation" class="level1">
<h1>A custom implementation</h1>
<p>Most of the code is self-evident. The special case, where the resource(pointee) is an array of elements of type <code>T</code>, we write a partial specialization of <code>unique_ptr&lt;T[],D&gt;</code>.</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp number-lines code-with-copy"><code class="sourceCode cpp"><span id="cb4-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include</span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;format&gt;</span></span>
<span id="cb4-2"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include</span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;concepts&gt;</span></span>
<span id="cb4-3"></span>
<span id="cb4-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">namespace</span> dev<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb4-5"></span>
<span id="cb4-6">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/* Default deleter - single object version */</span></span>
<span id="cb4-7">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">template</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">typename</span> T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb4-8">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> default_deleter<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb4-9">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">operator</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()(</span>T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> raw_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">){</span></span>
<span id="cb4-10">            <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">delete</span> raw_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-11">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb4-12">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb4-13"></span>
<span id="cb4-14">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/* Default deleter - pointee is an array of objects version */</span></span>
<span id="cb4-15">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">template</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">typename</span> T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb4-16">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> default_deleter<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[]&gt;{</span></span>
<span id="cb4-17">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">operator</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()(</span>T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> raw_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">){</span></span>
<span id="cb4-18">            <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">delete</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[]</span> raw_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-19">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb4-20">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb4-21"></span>
<span id="cb4-22">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/* Single object version */</span></span>
<span id="cb4-23">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">template</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">typename</span> T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">typename</span> D <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> default_deleter<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;</span></span>
<span id="cb4-24">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> unique_ptr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> D<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb4-25">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb4-26">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">using</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">deleter_type</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> D<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-27"></span>
<span id="cb4-28">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/* Default c'tor */</span></span>
<span id="cb4-29">        unique_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">default</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-30"></span>
<span id="cb4-31">        unique_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> unique_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">delete</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-32">        unique_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">operator</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=(</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> unique_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">delete</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-33"></span>
<span id="cb4-34">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/* Parameteric constructor */</span></span>
<span id="cb4-35">        unique_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_underlying_ptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb4-36">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span></span>
<span id="cb4-37"></span>
<span id="cb4-38">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/* Swap function */</span></span>
<span id="cb4-39">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> swap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>unique_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> other<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">noexcept</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb4-40">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>swap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_underlying_ptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> other<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_underlying_ptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb4-41">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb4-42"></span>
<span id="cb4-43">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/* Move constructor */</span></span>
<span id="cb4-44">        unique_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>unique_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;</span> other<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb4-45">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_underlying_ptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>move<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>other<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_underlying_ptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)}</span></span>
<span id="cb4-46">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span></span>
<span id="cb4-47"></span>
<span id="cb4-48">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/* Move assignment */</span></span>
<span id="cb4-49">        unique_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">operator</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=(</span>unique_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;</span> other<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">){</span></span>
<span id="cb4-50">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>swap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_underlying_ptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> other<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_underlying_ptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb4-51">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">this</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-52">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb4-53"></span>
<span id="cb4-54">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/* Destructor */</span></span>
<span id="cb4-55">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>unique_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(){</span></span>
<span id="cb4-56">            <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">deleter_type</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> deleter <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">static_cast</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">deleter_type</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*&gt;(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">this</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb4-57">            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(*</span>deleter<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_underlying_ptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb4-58">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb4-59"></span>
<span id="cb4-60">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Pointer-like functions</span></span>
<span id="cb4-61">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/* Dereferencing operator */</span></span>
<span id="cb4-62">        T <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">operator</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*(){</span></span>
<span id="cb4-63">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_underlying_ptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-64">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb4-65"></span>
<span id="cb4-66">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/* Indirection operator*/</span></span>
<span id="cb4-67">        T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">operator</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;(){</span></span>
<span id="cb4-68">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_underlying_ptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-69">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb4-70"></span>
<span id="cb4-71">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/* get() - get the raw underlying pointer*/</span></span>
<span id="cb4-72">        T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> get<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb4-73">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_underlying_ptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-74">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb4-75"></span>
<span id="cb4-76">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Modifiers</span></span>
<span id="cb4-77">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/* Release - returns a pointer to the managed object</span></span>
<span id="cb4-78"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           and releases the ownership*/</span></span>
<span id="cb4-79">        T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> release<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(){</span></span>
<span id="cb4-80">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>exchange<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_underlying_ptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">nullptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb4-81">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb4-82"></span>
<span id="cb4-83">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/* Reset - Replaces the managed object */</span></span>
<span id="cb4-84">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> reset<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> other<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">){</span></span>
<span id="cb4-85">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_underlying_ptr</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> other<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb4-86">            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb4-87">                <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">deleter_type</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> deleter <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">static_cast</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">deleter_type</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*&gt;(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">this</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb4-88">                <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(*</span>deleter<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_underlying_ptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb4-89">    </span>
<span id="cb4-90">                <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_underlying_ptr</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> other<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-91">            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb4-92">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb4-93"></span>
<span id="cb4-94">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> reset<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>nullptr_t<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">){</span></span>
<span id="cb4-95">            <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">deleter_type</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> deleter <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">static_cast</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">deleter_type</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*&gt;(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">this</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb4-96">            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(*</span>deleter<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_underlying_ptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb4-97">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_underlying_ptr</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">nullptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-98">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb4-99"></span>
<span id="cb4-100">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">explicit</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">operator</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">bool</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb4-101">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_underlying_ptr</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">nullptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb4-102">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb4-103"></span>
<span id="cb4-104">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">friend</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">bool</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">operator</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==(</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> unique_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> lhs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> unique_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> rhs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">){</span></span>
<span id="cb4-105">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>lhs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>get<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> rhs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>get<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">());</span></span>
<span id="cb4-106">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb4-107"></span>
<span id="cb4-108">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">friend</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">bool</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">operator</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==(</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> unique_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> lhs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>nullptr_t<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> </span>rhs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">){</span></span>
<span id="cb4-109">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>lhs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_underlying_ptr</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">nullptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb4-110">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb4-111"></span>
<span id="cb4-112">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">friend</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">bool</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">operator</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=(</span>unique_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> lhs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> unique_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> rhs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">){</span></span>
<span id="cb4-113">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!(</span>lhs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> rhs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb4-114">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb4-115"></span>
<span id="cb4-116">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">friend</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">bool</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">operator</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=(</span>unique_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> lhs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>nullptr_t<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">){</span></span>
<span id="cb4-117">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!(</span>lhs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">nullptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb4-118">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb4-119"></span>
<span id="cb4-120">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">friend</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> swap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>unique_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> lhs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> unique_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> rhs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">){</span></span>
<span id="cb4-121">            lhs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>swap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>rhs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb4-122">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb4-123"></span>
<span id="cb4-124">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb4-125">        T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_underlying_ptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">nullptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb4-126">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb4-127"></span>
<span id="cb4-128">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/* Array version*/</span></span>
<span id="cb4-129">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">template</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">typename</span> T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">typename</span> D<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb4-130">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> unique_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[],</span> D<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span> D<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb4-131">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb4-132">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">using</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">deleter_type</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> D<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-133"></span>
<span id="cb4-134">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/* Default c'tor */</span></span>
<span id="cb4-135">        unique_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">default</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-136"></span>
<span id="cb4-137">        unique_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> unique_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">delete</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-138">        unique_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">operator</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=(</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> unique_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">delete</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-139"></span>
<span id="cb4-140">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/* Parameteric constructor */</span></span>
<span id="cb4-141">        unique_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_underlying_ptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb4-142">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span></span>
<span id="cb4-143"></span>
<span id="cb4-144">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/* Swap function */</span></span>
<span id="cb4-145">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> swap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>unique_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> other<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">noexcept</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb4-146">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>swap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_underlying_ptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> other<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_underlying_ptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb4-147">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb4-148"></span>
<span id="cb4-149">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/* Move constructor */</span></span>
<span id="cb4-150">        unique_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>unique_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;</span> other<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb4-151">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_underlying_ptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>exchange<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>other<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_underlying_ptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">nullptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)}</span></span>
<span id="cb4-152">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span></span>
<span id="cb4-153"></span>
<span id="cb4-154">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/* Move assignment */</span></span>
<span id="cb4-155">        unique_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">operator</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=(</span>unique_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;</span> other<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">){</span></span>
<span id="cb4-156">            unique_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>move<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>other<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)).</span>swap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(*</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">this</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb4-157">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">this</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-158">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb4-159"></span>
<span id="cb4-160">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/* Destructor */</span></span>
<span id="cb4-161">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>unique_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(){</span></span>
<span id="cb4-162">            <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">deleter_type</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> deleter <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">static_cast</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">deleter_type</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*&gt;(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">this</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb4-163">            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(*</span>deleter<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_underlying_ptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb4-164">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb4-165"></span>
<span id="cb4-166">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Pointer-like functions</span></span>
<span id="cb4-167">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/* Dereferencing operator */</span></span>
<span id="cb4-168">        T <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">operator</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*(){</span></span>
<span id="cb4-169">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_underlying_ptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-170">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb4-171"></span>
<span id="cb4-172">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/* Indirection operator*/</span></span>
<span id="cb4-173">        T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">operator</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;(){</span></span>
<span id="cb4-174">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_underlying_ptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-175">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb4-176"></span>
<span id="cb4-177">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/* IndexOf operator - provides indexed access </span></span>
<span id="cb4-178"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           to the managed array.*/</span></span>
<span id="cb4-179">        T <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">operator</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[](</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>size_t<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> </span>index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">){</span></span>
<span id="cb4-180">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_underlying_ptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb4-181">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb4-182"></span>
<span id="cb4-183">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/* get() - get the raw underlying pointer*/</span></span>
<span id="cb4-184">        T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> get<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb4-185">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_underlying_ptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-186">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb4-187"></span>
<span id="cb4-188">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Modifiers</span></span>
<span id="cb4-189">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/* Release - returns a pointer to the managed object</span></span>
<span id="cb4-190"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           and releases the ownership*/</span></span>
<span id="cb4-191">        T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> release<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(){</span></span>
<span id="cb4-192">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>exchange<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_underlying_ptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">nullptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb4-193">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb4-194"></span>
<span id="cb4-195">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/* Reset - Replaces the managed object */</span></span>
<span id="cb4-196">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> reset<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> other<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">){</span></span>
<span id="cb4-197">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_underlying_ptr</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> other<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb4-198">            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb4-199">                <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">deleter_type</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> deleter <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">static_cast</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">deleter_type</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*&gt;(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">this</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb4-200">                <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(*</span>deleter<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_underlying_ptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb4-201">    </span>
<span id="cb4-202">                <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_underlying_ptr</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> other<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-203">            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb4-204">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb4-205"></span>
<span id="cb4-206">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> reset<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>nullptr_t<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">){</span></span>
<span id="cb4-207">            <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">deleter_type</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> deleter <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">static_cast</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">deleter_type</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*&gt;(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">this</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb4-208">            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(*</span>deleter<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_underlying_ptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb4-209">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_underlying_ptr</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">nullptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-210">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb4-211"></span>
<span id="cb4-212">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">explicit</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">operator</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">bool</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb4-213">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_underlying_ptr</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">nullptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb4-214">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb4-215"></span>
<span id="cb4-216">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">friend</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">bool</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">operator</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==(</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> unique_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> lhs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> unique_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> rhs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">){</span></span>
<span id="cb4-217">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>lhs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>get<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> rhs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>get<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">());</span></span>
<span id="cb4-218">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb4-219"></span>
<span id="cb4-220">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">friend</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">bool</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">operator</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==(</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> unique_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> lhs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>nullptr_t<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> </span>rhs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">){</span></span>
<span id="cb4-221">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>lhs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_underlying_ptr</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">nullptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb4-222">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb4-223"></span>
<span id="cb4-224">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">friend</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">bool</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">operator</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=(</span>unique_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> lhs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> unique_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> rhs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">){</span></span>
<span id="cb4-225">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!(</span>lhs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> rhs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb4-226">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb4-227"></span>
<span id="cb4-228">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">friend</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">bool</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">operator</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=(</span>unique_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> lhs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>nullptr_t<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">){</span></span>
<span id="cb4-229">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!(</span>lhs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">nullptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb4-230">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb4-231"></span>
<span id="cb4-232">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">friend</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> swap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>unique_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> lhs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> unique_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> rhs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">){</span></span>
<span id="cb4-233">            lhs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>swap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>rhs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb4-234">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb4-235"></span>
<span id="cb4-236">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb4-237">        T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_underlying_ptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">nullptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb4-238">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb4-239"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p>You can play around the code files, build the project and run unit tests for this (naive) toy-implementation of <code>unique_ptr</code> by cloning my GitHub repo <a href="https://github.com/quasar-chunawala/interview_data_structures">github.com/quasar-chunawala/interview_data_structures</a>.</p>

</section>

<div id="quarto-appendix" class="default"><section id="references" class="level2 appendix"><h2 class="anchored quarto-appendix-heading">References</h2><div class="quarto-appendix-contents">

<ul>
<li><a href="https://www.amazon.com/Memory-Management-leaner-memory-management-techniques/dp/1805129805">C++ Memory Management</a> by <em>Patrice Roy</em>.</li>
</ul>


</div></section></div> ]]></description>
  <category>C++</category>
  <guid>http://quantdev.blog/posts/unique_ptr/index.html</guid>
  <pubDate>Sun, 20 Apr 2025 23:00:00 GMT</pubDate>
  <media:content url="http://quantdev.blog/posts/unique_ptr/cpp.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>The inner workings of the shared_ptr</title>
  <dc:creator>Quasar </dc:creator>
  <link>http://quantdev.blog/posts/shared_ptr/index.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p><code>shared_ptr&lt;T&gt;</code> is tricky to implement, since it is a wrapper over raw underlying pointer of type <code>T*</code> and a reference counter. This post is partly inspired by the fantastic book <a href="https://www.amazon.com/Memory-Management-leaner-memory-management-techniques/dp/1805129805">C++ Memory Management</a> by <em>Patrice Roy</em>. The toy examples in this book are very instructive and I highly reckon you order a copy.</p>
<p>If you follow the instructions in my <a href="https://github.com/quasar-chunawala/interview_data_structures">GitHub repo</a>, you should be able to build the source and run unit tests against my homegrown version of <code>shared_ptr&lt;T&gt;</code>.</p>
</section>
<section id="basic-functionalities-expected-out-of-a-shared_ptrt-implementation." class="level1">
<h1>Basic functionalities expected out of a <code>shared_ptr&lt;T&gt;</code> implementation.</h1>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp number-lines code-with-copy"><code class="sourceCode cpp"><span id="cb1-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;gtest/gtest.h&gt;</span></span>
<span id="cb1-2"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;thread&gt;</span></span>
<span id="cb1-3"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;atomic&gt;</span></span>
<span id="cb1-4"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">"shared_ptr.h"</span></span>
<span id="cb1-5"></span>
<span id="cb1-6">TEST<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>SharedPtrTest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> ParametrizedCTorTest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb1-7"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb1-8">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/* Contructor that takes T* */</span></span>
<span id="cb1-9">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> raw_ptr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">new</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb1-10">    dev<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>shared_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> p1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>raw_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb1-11">    </span>
<span id="cb1-12">    EXPECT_EQ<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(*</span>p1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">true</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb1-13">    EXPECT_EQ<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>p1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>get<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(),</span> raw_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb1-14"></span>
<span id="cb1-15">    dev<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>shared_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> p2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">new</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">17</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb1-16">    EXPECT_EQ<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(*</span>p2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">17</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">true</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb1-17">    EXPECT_EQ<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>p2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>get<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">nullptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">true</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb1-18"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb1-19"></span>
<span id="cb1-20">TEST<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>SharedPtrTest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> RefCountingTest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">){</span></span>
<span id="cb1-21">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> raw_ptr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">new</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb1-22">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb1-23">        dev<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>shared_ptr ptr1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> raw_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-24">        EXPECT_EQ<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>ptr1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>use_count<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">true</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb1-25">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb1-26">            dev<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>shared_ptr ptr2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ptr1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-27">            EXPECT_EQ<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>ptr1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>use_count<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">true</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb1-28">            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb1-29">                dev<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>shared_ptr ptr3 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ptr2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-30">                EXPECT_EQ<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>ptr1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>use_count<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">true</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb1-31">            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb1-32">            EXPECT_EQ<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>ptr1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>use_count<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">true</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb1-33">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb1-34">        EXPECT_EQ<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>ptr1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>use_count<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">true</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb1-35">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb1-36"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb1-37"></span>
<span id="cb1-38">TEST<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>SharedPtrTest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> MultithreadedConstructionAndDestructionTest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">){</span></span>
<span id="cb1-39">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">using</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">namespace</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>chrono_literals<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-40">    dev<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>shared_ptr ptr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">new</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb1-41">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>atomic<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">bool</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> go<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">false</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb1-42">    EXPECT_EQ<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>use_count<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">true</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb1-43"></span>
<span id="cb1-44">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>thread<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> </span>t1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">([&amp;]{</span></span>
<span id="cb1-45">        dev<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>shared_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> ptr1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-46">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">while</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(!</span>go<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>load<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">());</span></span>
<span id="cb1-47">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>cout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> &lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Ref Count = "</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>use_count<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb1-48">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>this_thread<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">::</span>sleep_for<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">s</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb1-49">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">});</span></span>
<span id="cb1-50"></span>
<span id="cb1-51">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>thread<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> </span>t2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">([&amp;]{</span></span>
<span id="cb1-52">        dev<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>shared_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> ptr2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-53">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">while</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(!</span>go<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>load<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">());</span></span>
<span id="cb1-54">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>cout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> &lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Ref Count = "</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>use_count<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb1-55">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>this_thread<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">::</span>sleep_for<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">s</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb1-56">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">});</span></span>
<span id="cb1-57"></span>
<span id="cb1-58">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>this_thread<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">::</span>sleep_for<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">s</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb1-59">    go<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>store<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">true</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb1-60">    t1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>join<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb1-61">    t2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>join<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb1-62">    EXPECT_EQ<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>use_count<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">true</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb1-63"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb1-64"></span>
<span id="cb1-65">TEST<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>SharedPtrTest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> CopyConstructorTest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">){</span></span>
<span id="cb1-66">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/* Copy constructor */</span></span>
<span id="cb1-67">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> raw_ptr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">new</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb1-68">    dev<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>shared_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> p1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>raw_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb1-69"></span>
<span id="cb1-70">    dev<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>shared_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> p2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> p1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-71">    EXPECT_EQ<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(*</span>p2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">true</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb1-72">    EXPECT_EQ<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>p2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>get<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(),</span> raw_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb1-73"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb1-74"></span>
<span id="cb1-75">TEST<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>SharedPtrTest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> MoveConstructorTest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">){</span></span>
<span id="cb1-76">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/* Move constructor*/</span></span>
<span id="cb1-77">    dev<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>shared_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> p1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">new</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">));</span></span>
<span id="cb1-78">    dev<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>shared_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> p2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>move<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>p1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb1-79">    dev<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>shared_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> p3 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>move<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>p2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb1-80">    EXPECT_EQ<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(*</span>p3 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">true</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb1-81"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb1-82"></span>
<span id="cb1-83">TEST<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>SharedPtrTest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> CopyAssignmentTest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">){</span></span>
<span id="cb1-84">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/* Copy Assignment */</span></span>
<span id="cb1-85">    dev<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>shared_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">double</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> p1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">new</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">double</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.71828</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">));</span></span>
<span id="cb1-86">    dev<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>shared_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">double</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> p2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">new</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">double</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.14159</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">));</span></span>
<span id="cb1-87"></span>
<span id="cb1-88">    EXPECT_EQ<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(*</span>p2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.14159</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">true</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb1-89">    p2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> p1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-90">    EXPECT_EQ<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>p2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>get<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> p1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>get<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(),</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">true</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb1-91">    EXPECT_EQ<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(*</span>p2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>p1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">true</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb1-92"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb1-93"></span>
<span id="cb1-94">TEST<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>SharedPtrTest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> MoveAssignmentTest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">){</span></span>
<span id="cb1-95">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/* Move Assignment */</span></span>
<span id="cb1-96">    dev<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>shared_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> p1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">new</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">));</span></span>
<span id="cb1-97">    dev<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>shared_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> p2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">new</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">));</span></span>
<span id="cb1-98">    p2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>move<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>p1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb1-99">    EXPECT_EQ<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>p2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>get<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">nullptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">true</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb1-100">    EXPECT_EQ<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(*</span>p2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">true</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb1-101"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb1-102"></span>
<span id="cb1-103"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/* reset() :  replaces the managed object */</span></span>
<span id="cb1-104">TEST<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>SharedPtrTest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> ResetSharedPtr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb1-105">    dev<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>shared_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">new</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">));</span></span>
<span id="cb1-106">    ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>reset<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">new</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">));</span></span>
<span id="cb1-107">    EXPECT_EQ<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>ptr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">nullptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">true</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb1-108">    EXPECT_EQ<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(*</span>ptr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">true</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb1-109"></span>
<span id="cb1-110">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Self-reset test</span></span>
<span id="cb1-111">    ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>reset<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>get<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">());</span></span>
<span id="cb1-112"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb1-113"></span>
<span id="cb1-114"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/* swap() : swap the managed objects */</span></span>
<span id="cb1-115">TEST<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>SharedPtrTest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> SwapTest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">){</span></span>
<span id="cb1-116">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> first <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">new</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb1-117">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> second <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">new</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">17</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb1-118"></span>
<span id="cb1-119">    dev<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>shared_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> p1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>first<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb1-120">    dev<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>shared_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> p2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>second<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb1-121"></span>
<span id="cb1-122">    swap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>p1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> p2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb1-123"></span>
<span id="cb1-124">    EXPECT_EQ<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>p2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>get<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> first <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;</span> p1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>get<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> second<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">true</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb1-125">    EXPECT_EQ<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(((*</span>p1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">17</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">((*</span>p2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">),</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">true</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb1-126"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb1-127"></span>
<span id="cb1-128"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Observers</span></span>
<span id="cb1-129"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/* get() : Returns a pointer to the </span></span>
<span id="cb1-130"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    managed object or nullptr*/</span></span>
<span id="cb1-131">TEST<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>SharedPtrTest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> GetTest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">){</span></span>
<span id="cb1-132">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">double</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> resource <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">new</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">double</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.50</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb1-133">    dev<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>shared_ptr p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>resource<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb1-134"></span>
<span id="cb1-135">    EXPECT_EQ<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>get<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> resource<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">true</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb1-136">    EXPECT_EQ<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(*(</span>p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>get<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">())</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.50</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">true</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb1-137"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb1-138"></span>
<span id="cb1-139"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Pointer-like functions</span></span>
<span id="cb1-140">TEST<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>SharedPtrTest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> IndirectionOperatorTest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb1-141">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/* indirection operator* to dereference pointer to </span></span>
<span id="cb1-142"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    managed object, member access operator -&gt; </span></span>
<span id="cb1-143"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    to call member function*/</span></span>
<span id="cb1-144">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb1-145">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> _n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-146"></span>
<span id="cb1-147">        X<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">default</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-148">        X<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> _n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span></span>
<span id="cb1-149">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>X<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">default</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-150">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> foo<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> _n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb1-151">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb1-152"></span>
<span id="cb1-153">    dev<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>shared_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>X<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">new</span> X<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">));</span></span>
<span id="cb1-154">    EXPECT_EQ<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">((*</span>ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">).</span>_n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">true</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb1-155">    EXPECT_EQ<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span>foo<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">true</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb1-156"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="a-minimalistic-implementation." class="level1">
<h1>A minimalistic implementation.</h1>
<p>Writing a homegrown version of <code>shared_ptr&lt;T&gt;</code> implementation is fun! You could have multiple handles (pointers) to the same shared resource(object). So, a <code>shared_ptr</code> object needs to track the reference count. The tracking is done through a <em>control block</em>. The control block holds meta-information. Since multiple <code>shared_ptr</code> share the same control block, the <code>shared_ptr</code> implementation only stores a pointer to the <em>control block</em>.</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp number-lines code-with-copy"><code class="sourceCode cpp"><span id="cb2-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">template</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">typename</span> T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb2-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> shared_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb2-3">    T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_raw_underlying_ptr</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">nullptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb2-4">    control_block_base<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_control_block_ptr</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">nullptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb2-5"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb2-6"></span>
<span id="cb2-7"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> control_block_base<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb2-8">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>atomic<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">unsigned</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">long</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">long</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_ref_count</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-9"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span></code></pre></div>
<p>A minmialistic implementation of <code>shared_ptr</code> is as follows:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp number-lines code-with-copy"><code class="sourceCode cpp"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Reference: C++ Memory Management</span></span>
<span id="cb3-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Patrice Roy, Packt 2025</span></span>
<span id="cb3-3"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include</span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;format&gt;</span></span>
<span id="cb3-4"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include</span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;atomic&gt;</span></span>
<span id="cb3-5"></span>
<span id="cb3-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">namespace</span> dev<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb3-7">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> control_block_base<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb3-8">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>atomic<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">unsigned</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">long</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">long</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_ref_count</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb3-9"></span>
<span id="cb3-10">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> increment<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(){</span></span>
<span id="cb3-11">            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_ref_count</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-12">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb3-13"></span>
<span id="cb3-14">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">auto</span> decrement<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(){</span></span>
<span id="cb3-15">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">--</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_ref_count</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-16">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb3-17"></span>
<span id="cb3-18">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">auto</span> use_count<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(){</span></span>
<span id="cb3-19">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_ref_count</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>load<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb3-20">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb3-21"></span>
<span id="cb3-22">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">virtual</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> release_shared<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-23">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb3-24"></span>
<span id="cb3-25">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">template</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">typename</span> T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb3-26">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> control_block <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> control_block_base<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb3-27">        T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_object_ptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-28">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">explicit</span> control_block<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb3-29">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> control_block_base<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span></span>
<span id="cb3-30">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_object_ptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb3-31">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span></span>
<span id="cb3-32"></span>
<span id="cb3-33">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> release_shared<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">override</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb3-34">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>decrement<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()==</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb3-35">            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb3-36">                <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">delete</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_object_ptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-37">                <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">delete</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">this</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-38">            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb3-39">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb3-40">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb3-41"></span>
<span id="cb3-42">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">template</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">typename</span> T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb3-43">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> control_block_with_storage <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> control_block_base<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb3-44">        T <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_object</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-45">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">template</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">typename</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...</span> Args<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb3-46">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">explicit</span> control_block_with_storage<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>Args<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;...</span> args<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb3-47">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> control_block_base<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span></span>
<span id="cb3-48">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_object</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>forward<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>Args<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;(</span>args<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)...)}</span></span>
<span id="cb3-49">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span></span>
<span id="cb3-50"></span>
<span id="cb3-51">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> release_shared<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">override</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb3-52">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>decrement<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">){</span></span>
<span id="cb3-53">                <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">delete</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">this</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-54">            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb3-55">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb3-56"></span>
<span id="cb3-57">        T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> get<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(){</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_object</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb3-58">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb3-59"></span>
<span id="cb3-60">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">template</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">typename</span> T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb3-61">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> shared_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb3-62">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb3-63"></span>
<span id="cb3-64">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/* Default constructor*/</span></span>
<span id="cb3-65">        shared_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">default</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-66"></span>
<span id="cb3-67">        shared_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> t<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> control_block_base<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> cb<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb3-68">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_raw_underlying_ptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>t<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb3-69">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_control_block_ptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>cb<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb3-70">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span></span>
<span id="cb3-71"></span>
<span id="cb3-72">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/* Parametrized constructor : Takes ownership of the pointee */</span></span>
<span id="cb3-73">        shared_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> </span>
<span id="cb3-74">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_raw_underlying_ptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb3-75">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb3-76">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">try</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb3-77">                <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_control_block_ptr</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">new</span> control_block<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb3-78">            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">catch</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(...){</span></span>
<span id="cb3-79">                <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">delete</span> ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-80">                <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">throw</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-81">            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb3-82">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb3-83"></span>
<span id="cb3-84">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/* Copy constructor : Implements shared co-ownership of the pointee semantics */</span></span>
<span id="cb3-85">        shared_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> shared_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> other<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb3-86">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_raw_underlying_ptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>other<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_raw_underlying_ptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb3-87">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_control_block_ptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>other<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_control_block_ptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb3-88">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb3-89">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_control_block_ptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb3-90">                <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_control_block_ptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span>increment<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span>   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//Atomic pre-increment</span></span>
<span id="cb3-91">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb3-92"></span>
<span id="cb3-93">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/* Move constructor : Represents the transfer of ownership */</span></span>
<span id="cb3-94">        shared_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>shared_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;</span> other<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb3-95">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_raw_underlying_ptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>exchange<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>other<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_raw_underlying_ptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">nullptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)}</span></span>
<span id="cb3-96">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_control_block_ptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>exchange<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>other<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_control_block_ptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">nullptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)}</span></span>
<span id="cb3-97">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span></span>
<span id="cb3-98"></span>
<span id="cb3-99">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/* Swap : Swap two shared_ptr objects member by member */</span></span>
<span id="cb3-100">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> swap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>shared_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> other<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">){</span></span>
<span id="cb3-101">            <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">using</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>swap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-102">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>swap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_raw_underlying_ptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> other<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_raw_underlying_ptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb3-103">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>swap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_control_block_ptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> other<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_control_block_ptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb3-104">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb3-105"></span>
<span id="cb3-106">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">friend</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> swap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>shared_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> lhs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> shared_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> rhs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">){</span></span>
<span id="cb3-107">            lhs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>swap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>rhs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb3-108">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb3-109"></span>
<span id="cb3-110">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/* Copy assignment operator : Release the current held resource</span></span>
<span id="cb3-111"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           and share the ownership of the resource specified by args */</span></span>
<span id="cb3-112">        shared_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">operator</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=(</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> shared_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> other<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">){</span></span>
<span id="cb3-113">            shared_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span> other <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}.</span>swap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(*</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">this</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb3-114">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">this</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-115">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb3-116"></span>
<span id="cb3-117">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/* Move assignment : Release the currently held resource</span></span>
<span id="cb3-118"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           and transfer the ownership of resource specified in args */</span></span>
<span id="cb3-119">        shared_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">operator</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=(</span>shared_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;</span> other<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">){</span></span>
<span id="cb3-120">            shared_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>move<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>other<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}.</span>swap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(*</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">this</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb3-121">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">this</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-122">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb3-123"></span>
<span id="cb3-124">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>shared_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(){</span></span>
<span id="cb3-125">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_control_block_ptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">){</span></span>
<span id="cb3-126">                <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_control_block_ptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span>release_shared<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb3-127">            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb3-128">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb3-129"></span>
<span id="cb3-130">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/* get() - Returns the stored pointer */</span></span>
<span id="cb3-131">        T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> get<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(){</span></span>
<span id="cb3-132">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_raw_underlying_ptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-133">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb3-134"></span>
<span id="cb3-135">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> get<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb3-136">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_raw_underlying_ptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-137">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb3-138"></span>
<span id="cb3-139">        T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">operator</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*()</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">noexcept</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb3-140">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_raw_underlying_ptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-141">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb3-142"></span>
<span id="cb3-143">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">operator</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*()</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">noexcept</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb3-144">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_raw_underlying_ptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-145">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb3-146"></span>
<span id="cb3-147">        T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">operator</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;()</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">noexcept</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb3-148">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_raw_underlying_ptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-149">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb3-150">        </span>
<span id="cb3-151">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">operator</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;()</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">noexcept</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb3-152">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_raw_underlying_ptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-153">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb3-154"></span>
<span id="cb3-155">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/* Comparison operator*/</span></span>
<span id="cb3-156">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">bool</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">operator</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==(</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> shared_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> other<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">noexcept</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb3-157">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_raw_underlying_ptr</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> other<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_raw_underlying_ptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb3-158">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb3-159"></span>
<span id="cb3-160">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">bool</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">operator</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=(</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> shared_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> other<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">noexcept</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb3-161">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!(*</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">this</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> other<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb3-162">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb3-163"></span>
<span id="cb3-164">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">unsigned</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">long</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">long</span> use_count<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">noexcept</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb3-165">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_control_block_ptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb3-166">                <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_control_block_ptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span>use_count<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb3-167">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span></span>
<span id="cb3-168">                <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-169">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb3-170">        </span>
<span id="cb3-171">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/* Replaces the managed resource */</span></span>
<span id="cb3-172">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> reset<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">){</span></span>
<span id="cb3-173">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_raw_underlying_ptr</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb3-174">                shared_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">).</span>swap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(*</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">this</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb3-175">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb3-176"></span>
<span id="cb3-177">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">template</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">typename</span> U<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">typename</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...</span> Args<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb3-178">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">friend</span> shared_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>U<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> make_shared<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>Args<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;...</span> args<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb3-179"></span>
<span id="cb3-180">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb3-181">        T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_raw_underlying_ptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">nullptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb3-182">        control_block_base<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_control_block_ptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">nullptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb3-183">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb3-184"></span>
<span id="cb3-185">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">template</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">typename</span> T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">typename</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...</span> Args<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb3-186">    shared_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> make_shared<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>Args<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;...</span> args<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">){</span></span>
<span id="cb3-187">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/* Perform a single heap memory allocation */</span></span>
<span id="cb3-188">        control_block_with_storage<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;*</span> cb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">new</span> control_block_with_storage<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;(</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>forward<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>Args<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;(</span>args<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)...);</span></span>
<span id="cb3-189">        T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cb<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span>get<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb3-190">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> shared_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;(</span>data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> cb<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb3-191">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb3-192"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p>You can play around the code files, build the project and run unit tests for this (naive) toy-implementation of <code>shared_ptr</code> by cloning my <a href="https://github.com/quasar-chunawala/interview_data_structures">GitHub repo</a>.</p>
<section id="writing-the-shared_ptrt-destructor" class="level2">
<h2 class="anchored" data-anchor-id="writing-the-shared_ptrt-destructor">Writing the <code>~shared_ptr&lt;T&gt;()</code> destructor</h2>
<p>The destructor is tricky to get right.</p>
<p>A naive algorithm for destruction could be that, if <code>*m_ref_count_ptr == 1</code>, call delete on both pointees, otherwise decrement the counter. It is possible that two threads enter the destructor concurrently with <code>*m_ref_count_ptr=2</code>, and neither thread sees <code>*m_ref_count_ptr==1</code> and the pointees are never destroyed.</p>
<p>Another algorithm could be to decrement <code>*m_ref_count_ptr</code>. If <code>*m_ref_count_ptr==0</code>, invoke delete’s. There is a possibility that two threads enter the destructor concurrently, with <code>*m_ref_count_ptr=2</code>, then both concurrently decrement <code>*m_ref_count_ptr</code> leading to the possibility of both seeing <code>*m_ref_count_ptr=0</code>, resulting in double deletion.</p>
</section>
</section>


<div id="quarto-appendix" class="default"><section id="references" class="level1 appendix"><h2 class="anchored quarto-appendix-heading">References</h2><div class="quarto-appendix-contents">

<ul>
<li><a href="https://www.amazon.com/Memory-Management-leaner-memory-management-techniques/dp/1805129805">C++ Memory Management</a> by Patrice Roy.</li>
</ul>


</div></section></div> ]]></description>
  <category>C++</category>
  <guid>http://quantdev.blog/posts/shared_ptr/index.html</guid>
  <pubDate>Sun, 20 Apr 2025 23:00:00 GMT</pubDate>
  <media:content url="http://quantdev.blog/posts/shared_ptr/cpp.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>C++ Atomics</title>
  <dc:creator>Quasar </dc:creator>
  <link>http://quantdev.blog/posts/atomic-operations/index.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<p>Atomic operations are indivisible. Consider, for instance a shared variable <code>counter</code> that is initialized to <code>0</code>. Consider the assembly instructions corresponding to the increment operation <code>count++</code>.</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp number-lines code-with-copy"><code class="sourceCode cpp"><span id="cb1-1"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> counter <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb1-2"></span>
<span id="cb1-3"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> main<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(){</span></span>
<span id="cb1-4">    counter<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++;</span></span>
<span id="cb1-5"></span>
<span id="cb1-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-7"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p><a href="https://godbolt.org/z/cjhYK3hv9">Play on Compiler Explorer</a></p>
<p>Look at the assembler code generated by the compiler and the instructions the CPU executes.</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource fasm number-lines code-with-copy"><code class="sourceCode fasm"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">counter:</span></span>
<span id="cb2-2">        .zero   <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span></span>
<span id="cb2-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">main:</span></span>
<span id="cb2-4">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">push</span>    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">rbp</span></span>
<span id="cb2-5">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">mov</span>     <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">rbp</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">rsp</span></span>
<span id="cb2-6">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">mov</span>     <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">eax</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">DWORD</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">PTR</span> counter<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>rip<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb2-7">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">add</span>     <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">eax</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb2-8">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">mov</span>     <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">DWORD</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">PTR</span> counter<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>rip<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">],</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">eax</span></span>
<span id="cb2-9">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">mov</span>     <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">eax</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb2-10">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">pop</span>     <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">rbp</span></span>
<span id="cb2-11">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">ret</span></span></code></pre></div>
<p>The code increments a global counter. The statement on line <code>6</code>, copies the value stored in the <code>counter</code> to the <code>eax</code> register, line <code>7</code> adds <code>1</code> to the value stored in <code>eax</code>, and finally line <code>8</code> copies back the contents of the <code>eax</code> register to the <code>counter</code> variable. So, a thread could execute line <code>6</code> and then be scheduled out, and another thread execute all threee instructions after that. When the first thread finishes increment the result, the counter will be increment just once and thus the result will incorrect.</p>
<p>The following code does the same: it increments a global counter. This time, though, we use an atomic type and operations.</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp number-lines code-with-copy"><code class="sourceCode cpp"><span id="cb3-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;atomic&gt;</span></span>
<span id="cb3-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>atomic<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> counter <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb3-3"></span>
<span id="cb3-4"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> main<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(){</span></span>
<span id="cb3-5">    counter<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++;</span></span>
<span id="cb3-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-7"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p><a href="https://godbolt.org/z/rs9Wrzz3M">Play on Compiler Explorer</a></p>
<p>I will explain the <code>std::atomic&lt;int&gt;</code> type and the atomic increment operation later. The generated assembly code is the following:</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode numberSource fasm number-lines code-with-copy"><code class="sourceCode fasm"><span id="cb4-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">lock</span> add        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">DWORD</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">PTR</span> counter<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>rip<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">],</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span></code></pre></div>
<p>Just one instruction has been generated to add <code>1</code> to the value stored in the <code>counter</code> variable. The lock prefix here means that the following instruction (in this case <code>add</code>) is going to be executed atomically. Hence, a thread cannot be interrupted in the middle of incrementing the counter.</p>
<p>Atomic operations allow threads to read, modify and write indivisibly and can also be used as synchronization primitives. Atomic operations must be provided by the CPU (as in the <code>lock add</code> instruction).</p>
</section>
<section id="non-blocking-data-structures" class="level2">
<h2 class="anchored" data-anchor-id="non-blocking-data-structures">Non-Blocking Data-Structures</h2>
<p>Data-structures synchronized with locks are called <strong>blocking data-structures</strong> because threads are blocked (by the operating system), waiting until the locks become available.</p>
<p>Data-structures that don’t use locks are called <strong>non-blocking data structures</strong>. Most (but not all) of them are lock-free.</p>
<p>A data-structure or algorithm is considered lock-free if each synchronized action completes in a finite number of steps, not allowing indefinite waiting for a condition to become true or false.</p>
<p>The types of lock-free data structures are the following:</p>
<ul>
<li><p><strong>Obstruction-free</strong>: A thread will complete its operation in a bounded number of steps if all other threads are suspended.</p></li>
<li><p><strong>Lock-free</strong>: Atleast one thread will complete its operation in a bounded number of steps while multiple threads are working on the data-structure.</p></li>
<li><p><strong>Wait-free</strong>: All threads will complete their operations in a bounded number of steps while multiple threads are working on the data-structure.</p></li>
</ul>
</section>
<section id="memory-access" class="level2">
<h2 class="anchored" data-anchor-id="memory-access">Memory Access</h2>
<p>Memory order refers to the order in which memory(that is, the variables in a program) are accessed. Memory can be either read or write(load and store). But, what is the actual order in which the variables of a program are accessed? For the following code, there are <img src="https://latex.codecogs.com/png.latex?3"> points of view: the written code order, the compiler-generated instructions order, and finally, the order in which the instructions are executed by the CPU. These <img src="https://latex.codecogs.com/png.latex?3"> orderings can all be the same or (more likely) different.</p>
<p>The first and obvious ordering is the one in the code.</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp number-lines code-with-copy"><code class="sourceCode cpp"><span id="cb5-1"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> func_1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">){</span></span>
<span id="cb5-2">    a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb5-3">    b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb5-4">    a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb5-5"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p>The <code>func_1</code> function first adds <img src="https://latex.codecogs.com/png.latex?1"> to the variable <code>a</code>, then adds <img src="https://latex.codecogs.com/png.latex?10"> to the variable <code>b</code> and finally adds <img src="https://latex.codecogs.com/png.latex?2"> to the variable <code>a</code>. This is our intention and the order in which we define the statements to be executed.</p>
<p>When compiling the code to assembly, the compiler may change the order of the statements to make the generate code more efficient provided the outcome of the code execution is unchanged. For example, with the preceding code, the compiler could either do the two additions with variable <code>a</code> first and then the addition with variable <code>b</code>, or it could simply add <code>3</code> to <code>a</code> and <code>10</code> to <code>b</code>.</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode numberSource fasm number-lines code-with-copy"><code class="sourceCode fasm"><span id="cb6-1">func_1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>int<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;,</span> int<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;):</span></span>
<span id="cb6-2">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">add</span>     <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">DWORD</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">PTR</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">rdi</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">],</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb6-3">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">add</span>     <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">DWORD</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">PTR</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">rsi</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">],</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span></span>
<span id="cb6-4">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">add</span>     <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">DWORD</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">PTR</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">rdi</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">],</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb6-5">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">ret</span></span></code></pre></div>
<p>If we define <code>func_2</code> as:</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp number-lines code-with-copy"><code class="sourceCode cpp"><span id="cb7-1"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> func_2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">){</span></span>
<span id="cb7-2">    a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb7-3">    a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb7-4">    b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb7-5"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p>the compiler generates:</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp number-lines code-with-copy"><code class="sourceCode cpp"><span id="cb8-1">func_2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;):</span></span>
<span id="cb8-2">        add     DWORD PTR <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>rdi<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">],</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span>
<span id="cb8-3">        add     DWORD PTR <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>rsi<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">],</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span></span>
<span id="cb8-4">        ret</span></code></pre></div>
<p>In this case, the CPU could execute the instructions out of order, as there is no dependency among the operations.</p>
<p>Consider <code>func_3(int&amp;, int&amp;)</code> defined as:</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp number-lines code-with-copy"><code class="sourceCode cpp"><span id="cb9-1"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> func_3<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span>b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">){</span></span>
<span id="cb9-2">    a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb9-3">    b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb9-4">    a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb9-5"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p>In this case, the operation on <code>b</code> depends on the previous operation on <code>a</code>, so the compiler cannot reorder the statements, and the generated code will be like the code we write (same order of operations).</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode numberSource fasm number-lines code-with-copy"><code class="sourceCode fasm"><span id="cb10-1">func_3<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>int<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;,</span> int<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;):</span></span>
<span id="cb10-2">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">mov</span>     <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">eax</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">DWORD</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">PTR</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">rdi</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb10-3">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">lea</span>     <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">edx</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">rax</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb10-4">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">add</span>     <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">eax</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span></span>
<span id="cb10-5">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">mov</span>     <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">DWORD</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">PTR</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">rdi</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">],</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">edx</span></span>
<span id="cb10-6">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">add</span>     <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">DWORD</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">PTR</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">rsi</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">],</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">eax</span></span>
<span id="cb10-7">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">add</span>     <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">DWORD</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">PTR</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">rdi</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">],</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb10-8">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">ret</span></span></code></pre></div>
<p>To conclude, the source code order, the compiler generated object-code order and the actual exection order on a multi-core CPU will differ.</p>
</section>
<section id="modification-order" class="level2">
<h2 class="anchored" data-anchor-id="modification-order">Modification Order</h2>
<p>Any entity with a type <code>T</code> that has a lifetime and occupies storage in memory is an object. Every object in a C++ program has a modification order, consisting of all writes to that object from all the threads in the program, starting with the object’s initialization. In multi-threaded code, the modification order may vary between runs, but in a given execution of the program, all threads must agree on the order.</p>
<p>If distinct threads see distinct sequences of values for a single variable, we have a data-race and UB.</p>
<p>Certain kinds of speculative execution aren’t permitted. Once a thread has seen a particular entry in the modification order, subsequent reads from the same thread must return later values and subsequent writes to that object must occur later in the modification order. A read of an object that follows a write to that object in the same thread must either return the same value or another value that occurs later in the modification order. Although all threads must agree on the modification orders of each individual object, they may not necessarily agree on the relative ordering of operations on separate objects.</p>
</section>
<section id="memory-model" class="level2">
<h2 class="anchored" data-anchor-id="memory-model">Memory Model</h2>
<p>Typically, each core in a multi-core processor has dedicated store buffers, its own L3 cache. A pair of cores often share the L2 cache. All cores share the L1 cache and the global main memory. So, the below picture is a more accurate mental model of a modern microprocessor.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="http://quantdev.blog/posts/atomic-operations/multicore_processor.png" width="700" height="500" class="figure-img"></p>
<figcaption class="figure-caption">Memory Model</figcaption>
</figure>
</div>
<p>Consider 2 globally declared atomic flags <code>flag1</code> and <code>flag2</code>. Assume that <code>thread_1</code> executes on processor-1 and <code>thread_2</code> executes on processor-2 and all reads and writes are atomic.</p>
<p>Essentially, <code>thread_1</code> declares its intent to enter a critical section by setting <code>flag1 = 1</code>. A <code>flag1.store(1)</code> operation writes <code>flag1 = 1</code> to the store buffer. Concurrently, <code>thread_2</code> declares its intent to enter the critical section by setting <code>flag2 = 1</code>. A <code>flag2.store(1)</code> operation writes <code>flag2 = 1</code> the processor’s store buffer.</p>
<p><code>thread_1</code> reads the value of <code>flag2</code> from the global main memory, which is <code>0</code> (since processor-2’s buffer has not been flushed). Hence, the predicate <code>!flag2</code> is satisfied and the <code>thread_1</code> enters the critical section. Similarly, <code>thread_2</code> reads the value of <code>flag1</code> from the global main memory, which is also <code>0</code> and enters the critical section at the same time.</p>
<p><img src="https://latex.codecogs.com/png.latex?1"> nanosecond later, the contents of the store buffers on processor-1 and process-2 are flushed to main memory.</p>
<p>Thus, we need synchronization and some form of ordering to prevent undefined behavior.</p>
<section id="sequential-consistency" class="level3">
<h3 class="anchored" data-anchor-id="sequential-consistency">Sequential consistency</h3>
<p><code>std::memory_order_seq_cst</code> has two implications. The operations of a program(thread) will always be executed in source code order.</p>
<p>In a given execution, there is a single global ordering of all operations tagged <code>memory_order_seq</code>, and all threads observe the same global order.</p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp number-lines code-with-copy"><code class="sourceCode cpp"><span id="cb11-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;iostream&gt;</span></span>
<span id="cb11-2"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;atomic&gt;</span></span>
<span id="cb11-3"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;thread&gt;</span></span>
<span id="cb11-4"></span>
<span id="cb11-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>atomic<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ATOMIC_INT_LOCK_FREE<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb11-6"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>atomic<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ATOMIC_INT_LOCK_FREE<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb11-7"></span>
<span id="cb11-8"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> main<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb11-9">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>thread<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> </span>t1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span></span>
<span id="cb11-10">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[&amp;]()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb11-11">            x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>store<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb11-12">            <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> result1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>load<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb11-13">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb11-14">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb11-15"></span>
<span id="cb11-16">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>thread<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> </span>t2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span></span>
<span id="cb11-17">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[&amp;]()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb11-18">            y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>store<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">17</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb11-19">            <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> result2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>load<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb11-20">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb11-21">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb11-22"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p>Sequential ordering is also the default memory ordering.</p>
<p><code>x.store(42)</code> will always be performed before <code>y.load()</code>. <code>y.store(17)</code> will always be performed before <code>x.load()</code>. That is the guarantee of the sequential consistency. And each thread sees operations of the other thread in the same order. This respects our intuition.</p>
<p>How many ways exist to perform these 4 operations? Extremely easy! There are 6 possibilities.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="http://quantdev.blog/posts/atomic-operations/sequential_memory_order.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">Sequential Memory Order</figcaption>
</figure>
</div>
<p>To further elaborate, consider the below snippet:</p>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp number-lines code-with-copy"><code class="sourceCode cpp"><span id="cb12-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Ref: Asynchronous programming with C++</span></span>
<span id="cb12-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Javier Reguera Salgado</span></span>
<span id="cb12-3"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;iostream&gt;</span></span>
<span id="cb12-4"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;atomic&gt;</span></span>
<span id="cb12-5"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;thread&gt;</span></span>
<span id="cb12-6"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;vector&gt;</span></span>
<span id="cb12-7"></span>
<span id="cb12-8"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>atomic<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">bool</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">false</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb12-9"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>atomic<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">bool</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">false</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb12-10"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>atomic<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> z<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb12-11"></span>
<span id="cb12-12"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> write_x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb12-13">    x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>store<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">true</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>memory_order_seq_cst<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb12-14"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb12-15"></span>
<span id="cb12-16"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> write_y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb12-17">    y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>store<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">true</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>memory_order_seq_cst<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb12-18"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb12-19"></span>
<span id="cb12-20"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> read_x_then_y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb12-21">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">while</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(!</span>x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>load<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>memory_order_seq_cst<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">));</span></span>
<span id="cb12-22"></span>
<span id="cb12-23">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>load<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>memory_order_seq_cst<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">))</span></span>
<span id="cb12-24">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++</span>z<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb12-25"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb12-26"></span>
<span id="cb12-27"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> read_y_then_x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb12-28">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">while</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(!</span>y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>load<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>memory_order_seq_cst<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">));</span></span>
<span id="cb12-29"></span>
<span id="cb12-30">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>load<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>memory_order_seq_cst<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">))</span></span>
<span id="cb12-31">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++</span>z<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb12-32"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb12-33"></span>
<span id="cb12-34"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> main<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb12-35">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>thread<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> </span>t1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>write_x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb12-36">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>thread<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> </span>t2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>write_y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb12-37">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>thread<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> </span>t3<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>read_x_then_y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb12-38">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>thread<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> </span>t4<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>read_y_then_x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb12-39"></span>
<span id="cb12-40">    t1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>join<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb12-41">    t2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>join<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb12-42">    t3<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>join<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb12-43">    t4<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>join<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb12-44"></span>
<span id="cb12-45">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>cout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> &lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x = "</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb12-46">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>cout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> &lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y = "</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb12-47">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>cout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> &lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"z = "</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> z<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb12-48"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p>Because we are using <code>std::memory_order_seq_cst</code> when running the code, we note the following:</p>
<ul>
<li>Operations in each thread are executed in the given order (no reordering of atomic operations)</li>
<li><code>t1</code> and <code>t2</code> update <code>x</code> and <code>y</code> in order, and <code>t3</code> and <code>t4</code> see the same order. Without this property, <code>t3</code> could see <code>x</code> and <code>y</code> change in one order, but <code>t4</code> could see the opposite.</li>
<li>Any other memory ordering may print <code>z=0</code> because <code>t3</code> and <code>t4</code> could see changes to <code>x</code> and <code>y</code> in the opposite order.</li>
</ul>
<p>Note that the order between operations in different threads is not guaranteed and instructions from different threads may be executed in any order, because the threads may be scheduled.</p>
</section>
</section>
<section id="acquire-release-semantic" class="level2">
<h2 class="anchored" data-anchor-id="acquire-release-semantic">Acquire-Release Semantic</h2>
<p>Consider the same code as in the previous section for sequential consistency, but in this case, I use acquire-release semantics.</p>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp number-lines code-with-copy"><code class="sourceCode cpp"><span id="cb13-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Ref: Asynchronous programming with C++, Javier Reguera Salgado</span></span>
<span id="cb13-2"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;iostream&gt;</span></span>
<span id="cb13-3"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;atomic&gt;</span></span>
<span id="cb13-4"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;thread&gt;</span></span>
<span id="cb13-5"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;vector&gt;</span></span>
<span id="cb13-6"></span>
<span id="cb13-7"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>atomic<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">bool</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">false</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb13-8"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>atomic<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">bool</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">false</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb13-9"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>atomic<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> z<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb13-10"></span>
<span id="cb13-11"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> write_x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb13-12">    x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>store<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">true</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>memory_order_release<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb13-13"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb13-14"></span>
<span id="cb13-15"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> write_y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb13-16">    y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>store<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">true</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>memory_order_release<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb13-17"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb13-18"></span>
<span id="cb13-19"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> read_x_then_y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb13-20">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">while</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(!</span>x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>load<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>memory_order_acquire<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">));</span></span>
<span id="cb13-21"></span>
<span id="cb13-22">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>load<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>memory_order_acquire<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">))</span></span>
<span id="cb13-23">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++</span>z<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb13-24"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb13-25"></span>
<span id="cb13-26"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> read_y_then_x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb13-27">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">while</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(!</span>y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>load<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>memory_order_acquire<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">));</span></span>
<span id="cb13-28"></span>
<span id="cb13-29">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>load<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>memory_order_acquire<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">))</span></span>
<span id="cb13-30">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++</span>z<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb13-31"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb13-32"></span>
<span id="cb13-33"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> main<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb13-34">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>thread<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> </span>t1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>write_x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb13-35">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>thread<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> </span>t2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>write_y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb13-36">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>thread<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> </span>t3<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>read_x_then_y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb13-37">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>thread<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> </span>t4<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>read_y_then_x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb13-38"></span>
<span id="cb13-39">    t1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>join<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb13-40">    t2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>join<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb13-41">    t3<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>join<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb13-42">    t4<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>join<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb13-43"></span>
<span id="cb13-44">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>cout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> &lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x = "</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb13-45">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>cout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> &lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y = "</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb13-46">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>cout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> &lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"z = "</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> z<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb13-47">    <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">assert</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>z<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>load<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()!=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb13-48"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p>The release operation on <code>x</code> in <code>t1</code> synchronizes with the acquire operation on <code>x</code> in <code>t3</code>. Similarly, the release operation on <code>y</code> in <code>t2</code> synchonizes with <code>acquire</code> operation in thread <code>t4</code>. However, writes to <code>x</code> and <code>y</code> happen in different threads.</p>
<p>So, <code>t3</code> may find <code>x = true</code> and <code>y=false</code>. At the same time <code>t4</code> may find <code>y=true</code> and <code>x=false</code>. Different threads have different views of the memory. So, it may happen that <code>assert(z.load()!=0)</code> may fire at the end of this code. Acquire-release doesn’t imply a total-ordering.</p>
<p>In order to see the benefit of <em>acquire-release</em> ordering, we need to consider two stores from the same thread such as the code snip below. We perform writes to <code>x</code> and <code>y</code> in the same thread. Here, <code>assert(z.load()!=0)</code> will never fire.</p>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp number-lines code-with-copy"><code class="sourceCode cpp"><span id="cb14-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Ref: Asynchronous programming with C++, Javier Reguera Salgado</span></span>
<span id="cb14-2"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;iostream&gt;</span></span>
<span id="cb14-3"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;atomic&gt;</span></span>
<span id="cb14-4"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;thread&gt;</span></span>
<span id="cb14-5"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;vector&gt;</span></span>
<span id="cb14-6"></span>
<span id="cb14-7"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>atomic<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">bool</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">false</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb14-8"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>atomic<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">bool</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">false</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb14-9"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>atomic<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> z<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb14-10"></span>
<span id="cb14-11"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> write_x_then_y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb14-12">    x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>store<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">true</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>memory_order_release<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span>       <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//[1]</span></span>
<span id="cb14-13">    y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>store<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">true</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>memory_order_release<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span>       <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//[2]</span></span>
<span id="cb14-14"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb14-15"></span>
<span id="cb14-16"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> read_y_then_x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb14-17">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// spin-waiting for y to be set to true</span></span>
<span id="cb14-18">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">while</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(!</span>y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>load<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>memory_order_acquire<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">));</span>     <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//[3]</span></span>
<span id="cb14-19"></span>
<span id="cb14-20">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>load<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>memory_order_acquire<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">))</span>          <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//[4]</span></span>
<span id="cb14-21">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++</span>z<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb14-22"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb14-23"></span>
<span id="cb14-24"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> main<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb14-25">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>thread<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> </span>t1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>write_x_then_y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb14-26">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>thread<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> </span>t2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>read_y_then_x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb14-27"></span>
<span id="cb14-28">    t1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>join<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb14-29">    t2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>join<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb14-30"></span>
<span id="cb14-31">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>cout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> &lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x = "</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb14-32">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>cout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> &lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y = "</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb14-33">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>cout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> &lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"z = "</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> z<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb14-34">    <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">assert</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>z<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>load<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()!=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb14-35"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p>Eventually, the <code>load()</code> from <code>y</code>, <code>[3]</code> will see <code>true</code> as written by the store <code>[2]</code>. Because the <code>store</code> uses <code>std::memory_order_release</code> and the <code>load</code> uses <code>std::memory_order_acquire</code>, the <code>store</code> synchronizes with the <code>load</code>. The <code>store</code> to <code>x</code>, <code>[1]</code> happens before the <code>store</code> to <code>y</code>, <code>[2]</code> because they are in the same thread. Because the <code>store</code> to <code>y</code>, synchronizes with the <code>load</code> from <code>y</code>, the <code>store</code> to <code>x</code> also happens before the <code>load</code> from <code>y</code> and by extension happens before the <code>load</code> from <code>x</code>. The <code>load</code> from <code>x</code> must read <code>true</code> and the <code>assert</code> can’t fire.</p>
<p>A <code>release</code> operation on an atomic synchronizes with an <code>acquire</code> operation on the same atomic and additionally establishes an ordering constraint. So, we have a synchronizationation and a partial ordering in the acquire-release semantic.</p>
<p>So, what are typically <code>acquire</code> and <code>release</code> operations?</p>
<ul>
<li><p>Any write operation such as <code>store</code> or <code>clear</code> must specify <code>std::memory_order_release</code>. This flushes the core cache and publishes all updates before the release operation. So, any writes within the same thread prior to the release operation are visible to other susbcriber threads.</p></li>
<li><p>Any read operation such as <code>load</code> or <code>test_and_set</code> must specify <code>std::memory_order_acquire</code>. This captures any all updates upto this point.</p></li>
</ul>
<p>Additionally,</p>
<ul>
<li>Read and write operations cannot be reordered to before an acquire operation.</li>
<li>Read and write operations cannot be reordered to after a release operation.</li>
</ul>
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp number-lines code-with-copy"><code class="sourceCode cpp"><span id="cb15-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;iostream&gt;</span></span>
<span id="cb15-2"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;atomic&gt;</span></span>
<span id="cb15-3"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;thread&gt;</span></span>
<span id="cb15-4"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;vector&gt;</span></span>
<span id="cb15-5"></span>
<span id="cb15-6"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>vector<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> mySharedItems<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb15-7"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>atomic_bool<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> </span>dataProduced<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb15-8"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>atomic_bool<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> </span>dataReadyToBeConsumed<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb15-9"></span>
<span id="cb15-10"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> dataProducer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb15-11">    mySharedItems <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb15-12">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>cout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> &lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dataProduced.store(true)"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb15-13">    dataProduced<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>store<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">true</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>memory_order_release<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb15-14"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb15-15"></span>
<span id="cb15-16"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> deliveryBoy<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb15-17">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">while</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(!</span>dataProduced<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>load<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>memory_order_acquire<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">));</span></span>
<span id="cb15-18">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>cout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> &lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"After dataProduced.load()"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb15-19">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>cout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> &lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Before dataReadyToBeConsumed.store(true)"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb15-20">    dataReadyToBeConsumed<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>store<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">true</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>memory_order_release<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb15-21"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb15-22"></span>
<span id="cb15-23"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> dataConsumer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb15-24">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">while</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(!</span>dataReadyToBeConsumed<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>load<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>memory_order_acquire<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">));</span></span>
<span id="cb15-25">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>cout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> &lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"After dataReadyToBeConsumed.load()"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb15-26">    mySharedItems<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb15-27"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb15-28"></span>
<span id="cb15-29"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> main<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb15-30">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>thread<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> </span>t1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>dataProducer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb15-31">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>thread<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> </span>t2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>deliveryBoy<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb15-32">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>thread<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> </span>t3<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>dataConsumer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb15-33"></span>
<span id="cb15-34">    t1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>join<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb15-35">    t2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>join<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb15-36">    t3<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>join<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb15-37">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb15-38"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p>Output:</p>
<div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode numberSource shell number-lines code-with-copy"><code class="sourceCode"><span id="cb16-1">dataProduced.store(true)</span>
<span id="cb16-2">After dataProduced.load()</span>
<span id="cb16-3">Before dataReadyToBeConsumed.store(true)</span>
<span id="cb16-4">After dataReadyToBeConsumed.load()</span></code></pre></div>
<p>The <code>store</code> on line 13 synchronizes with the <code>load</code> on line 17. That’s the acquire-release semantic. It also establishes a partial ordering. Read or write operations prior to the <code>release</code> on line 13 cannot be moved to after line 13. And <code>release</code> operation on line 20 cannot be moved before <code>acquire</code> operation on line 13.</p>
<p>The same for the <code>deliveryBoy</code> and <code>dataConsumer</code>.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="http://quantdev.blog/posts/atomic-operations/acquire_release_semantics.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">Acquire-release semantics</figcaption>
</figure>
</div>
<p>If you think about mutexes, a mutex <code>lock()</code> is an acquire-operation. A mutex <code>unlock()</code> is a release operation. Things inside the critical region cannot be moved to outside it. An <code>unlock()</code> synchronizes with the next <code>lock()</code>. Similarly, <code>wait</code> and <code>notify</code> are acquire and release operations. The starting of a thread and <code>join</code> call on a thread are acquire and release operations.</p>
</section>
<section id="non-sequential-memory-ordering" class="level2">
<h2 class="anchored" data-anchor-id="non-sequential-memory-ordering">Non-sequential memory ordering</h2>
<p>On the opposite end of the spectrum is relaxed ordering. <em>In the absence of other ordering constraints, the only requirement is that threads agree on the modification order of each variable</em>. Atomic operations on the same atomic variable in a single thread are not reordered. Operations on distinct variables can appear in different orders on different threads.</p>
<div class="sourceCode" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp number-lines code-with-copy"><code class="sourceCode cpp"><span id="cb17-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Ref: Concurrency in Action, Anthony Williams</span></span>
<span id="cb17-2"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include</span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;atomic&gt;</span></span>
<span id="cb17-3"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include</span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;thread&gt;</span></span>
<span id="cb17-4"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include</span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;assert.h&gt;</span></span>
<span id="cb17-5"></span>
<span id="cb17-6"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>atomic<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">bool</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span>y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb17-7"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>atomic<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> z<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb17-8"></span>
<span id="cb17-9"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> write_x_then_y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span></span>
<span id="cb17-10"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb17-11">    x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>store<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">true</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>memory_order_relaxed<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span>   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// [1]</span></span>
<span id="cb17-12">    y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>store<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">true</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>memory_order_relaxed<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span>   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// [2]</span></span>
<span id="cb17-13"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb17-14"></span>
<span id="cb17-15"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> read_y_then_x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span></span>
<span id="cb17-16"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb17-17">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">while</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(!</span>y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>load<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>memory_order_relaxed<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">));</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//[3]</span></span>
<span id="cb17-18">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>load<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>memory_order_relaxed<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">))</span></span>
<span id="cb17-19">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++</span>z<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span>                                    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//[4]</span></span>
<span id="cb17-20"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb17-21"></span>
<span id="cb17-22"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> main<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(){</span></span>
<span id="cb17-23">    x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">false</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb17-24">    y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">false</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb17-25">    z <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb17-26">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>thread<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> </span>a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>write_x_then_y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb17-27">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>thread<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> </span>b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>read_y_then_x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb17-28">    a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>join<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb17-29">    b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>join<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb17-30">    <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">assert</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>z<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>load<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()!=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span>                        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//[5]</span></span>
<span id="cb17-31"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p>This time the <code>assert</code> at <code>[5]</code> can be false, because the <code>x.load()</code> can read <code>false</code>, even though the load of <code>y</code> reads <code>true</code> and the <code>store</code> of <code>x</code> happens before the <code>store</code> of <code>y</code>.</p>
<p><code>x</code> and <code>y</code> are different variables so there are no ordering guarantees relating to the visbility of variables. Relaxed operations on different variables can be freely reordered (provided they obey any happens before relationships in the same thread). They don’t introduce synchronizes-with relationships.</p>
<p>Even though there is a happens-before relationship between the stores and between the loads, the <code>store</code> of <code>y</code> does not synchronize with the <code>load</code> of <code>y</code>. So, the reader thread can see the stores out of order.</p>
<p>There’s another cool example I played around with, from Anthony William’s book, <a href="https://www.amazon.co.uk/Concurrency-Action-2E-Anthony-Williams/dp/1617294691/ref=sr_1_1?crid=XDM8P8PX83TE&amp;dib=eyJ2IjoiMSJ9.IYYYm5K7-DAC9QatR4JhacRupYhVCqhXKTMwjKypkLH2Ra8XhTokeONnDHFXgYAHeaZ__O2JHJG2xcuQO_NACM56oXNi6J2FDDpUqgGwHfA.UwWhBmhH2n059_YhK2AVjuHzezw0wWzzhfmhcgnOLOY&amp;dib_tag=se&amp;keywords=concurrency+in+action&amp;qid=1745649385&amp;sprefix=Concurrency+in+action%2Caps%2C65&amp;sr=8-1">Concurrency in Action</a>.</p>
<div class="sourceCode" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp number-lines code-with-copy"><code class="sourceCode cpp"><span id="cb18-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Relaxed operations on multiple threads</span></span>
<span id="cb18-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Ref: Concurrency in action, Anthony Williams</span></span>
<span id="cb18-3"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include</span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;thread&gt;</span></span>
<span id="cb18-4"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include</span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;atomic&gt;</span></span>
<span id="cb18-5"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include</span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;iostream&gt;</span></span>
<span id="cb18-6"></span>
<span id="cb18-7"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>atomic<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">},</span> y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">},</span> z<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb18-8"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>atomic<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">bool</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> go<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">false</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb18-9"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">uint</span> loop_count<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb18-10"></span>
<span id="cb18-11"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> Snapshot<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb18-12">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb18-13">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb18-14">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> z<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb18-15"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb18-16"></span>
<span id="cb18-17">Snapshot snapshots<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">][</span>loop_count<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb18-18"></span>
<span id="cb18-19"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> increment<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>atomic<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;*</span> var_to_inc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> Snapshot<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> snapshots<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">){</span></span>
<span id="cb18-20">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">while</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(!</span>go<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb18-21">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>this_thread<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">::</span>yield<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span>      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Spin, waiting for the signal</span></span>
<span id="cb18-22"></span>
<span id="cb18-23">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">unsigned</span> i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>loop_count<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;++</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">){</span></span>
<span id="cb18-24">        snapshots<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">].</span>x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>load<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>memory_order_relaxed<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb18-25">        snapshots<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">].</span>y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>load<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>memory_order_relaxed<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb18-26">        snapshots<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">].</span>z <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> z<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>load<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>memory_order_relaxed<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb18-27">        var_to_inc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span>store<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>memory_order_relaxed<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb18-28">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>this_thread<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">::</span>yield<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb18-29">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb18-30"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb18-31"></span>
<span id="cb18-32"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> record_values<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>Snapshot<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> snapshots<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">){</span></span>
<span id="cb18-33">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">while</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(!</span>go<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb18-34">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>this_thread<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">::</span>yield<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb18-35"></span>
<span id="cb18-36">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">unsigned</span> i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>loop_count<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;++</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">){</span></span>
<span id="cb18-37">        snapshots<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">].</span>x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>load<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>memory_order_relaxed<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb18-38">        snapshots<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">].</span>y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>load<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>memory_order_relaxed<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb18-39">        snapshots<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">].</span>z <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> z<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>load<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>memory_order_relaxed<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb18-40">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>this_thread<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">::</span>yield<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb18-41">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb18-42"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb18-43"></span>
<span id="cb18-44"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> print<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>Snapshot<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> v<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">){</span></span>
<span id="cb18-45">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">unsigned</span> i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">={</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>loop_count<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;++</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">){</span></span>
<span id="cb18-46">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb18-47">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>cout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> &lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">","</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb18-48">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>cout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"("</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> v<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">].</span>x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">","</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> v<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">].</span>y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">","</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> v<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">].</span>z <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">")"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb18-49">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb18-50"></span>
<span id="cb18-51">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>cout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb18-52"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb18-53"></span>
<span id="cb18-54"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> main<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(){</span></span>
<span id="cb18-55">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>thread<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> </span>t1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>increment<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span>x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> snapshots<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]);</span></span>
<span id="cb18-56">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>thread<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> </span>t2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>increment<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span>y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> snapshots<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]);</span></span>
<span id="cb18-57">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>thread<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> </span>t3<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>increment<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span>z<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> snapshots<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]);</span></span>
<span id="cb18-58">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>thread<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> </span>t4<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>record_values<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> snapshots<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]);</span></span>
<span id="cb18-59">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>thread<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> </span>t5<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>record_values<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> snapshots<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]);</span></span>
<span id="cb18-60">    go<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">true</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb18-61">    t5<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>join<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb18-62">    t4<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>join<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb18-63">    t3<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>join<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb18-64">    t2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>join<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb18-65">    t1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>join<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb18-66"></span>
<span id="cb18-67">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">unsigned</span> i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;++</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb18-68">        print<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>snapshots<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]);</span></span>
<span id="cb18-69"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p>Output:</p>
<div class="sourceCode" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode numberSource shell number-lines code-with-copy"><code class="sourceCode"><span id="cb19-1">(0,1,0),(1,5,0),(2,6,0),(3,8,0),(4,8,0),(5,10,0),(6,10,0),(7,10,0),(8,10,0),(9,10,0)</span>
<span id="cb19-2">(0,0,0),(1,1,0),(1,2,0),(1,3,0),(1,4,0),(1,5,0),(2,6,0),(3,7,0),(4,8,0),(5,9,0)</span>
<span id="cb19-3">(10,10,0),(10,10,1),(10,10,2),(10,10,3),(10,10,4),(10,10,5),(10,10,6),(10,10,7),(10,10,8),(10,10,9)</span>
<span id="cb19-4">(10,10,10),(10,10,10),(10,10,10),(10,10,10),(10,10,10),(10,10,10),(10,10,10),(10,10,10),(10,10,10),(10,10,10)</span>
<span id="cb19-5">(0,1,0),(1,3,0),(1,4,0),(1,5,0),(2,6,0),(3,7,0),(4,8,0),(5,9,0),(5,10,0),(6,10,0)</span></code></pre></div>
<p>This simple code-snippet shows that each thread sees a distinct sequence of values for the distinct variables <code>x</code>, <code>y</code>, and <code>z</code> when incremented <code>10</code> times each. Only the modification order of each variable is consistent amongst the threads.</p>
</section>


<div id="quarto-appendix" class="default"><section id="references" class="level2 appendix"><h2 class="anchored quarto-appendix-heading">References</h2><div class="quarto-appendix-contents">

<ul>
<li><em><a href="https://www.youtube.com/watch?v=e0DsVqZLMzU&amp;t=2312s">The memory model in C++ - Rainier Grimm</a>, Meeting C++ 2016.</em></li>
</ul>


</div></section></div> ]]></description>
  <category>C++</category>
  <guid>http://quantdev.blog/posts/atomic-operations/index.html</guid>
  <pubDate>Sat, 08 Mar 2025 00:00:00 GMT</pubDate>
  <media:content url="http://quantdev.blog/posts/atomic-operations/cpp.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>numpy and pandas CheatSheet</title>
  <dc:creator>Quasar </dc:creator>
  <link>http://quantdev.blog/posts/numpy-and-pandas-cheatsheet/index.html</link>
  <description><![CDATA[ 




<section id="np.arangestartstopstep" class="level2">
<h2 class="anchored" data-anchor-id="np.arangestartstopstep"><code>np.arange(start,stop,step)</code></h2>
<p><code>np.arange(start, stop, step)</code> returns evenly spaced values in a given interval.</p>
<div id="20744bf9" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-2"></span>
<span id="cb1-3">np.arange(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.1</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="1">
<pre><code>array([0. , 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1. ])</code></pre>
</div>
</div>
</section>
<section id="np.zerosshape" class="level2">
<h2 class="anchored" data-anchor-id="np.zerosshape"><code>np.zeros(shape)</code></h2>
<div id="55b53855" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb3-1">np.zeros(shape<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>))</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="2">
<pre><code>array([[0., 0., 0.],
       [0., 0., 0.],
       [0., 0., 0.]])</code></pre>
</div>
</div>
</section>
<section id="np.zeros_like" class="level2">
<h2 class="anchored" data-anchor-id="np.zeros_like"><code>np.zeros_like</code></h2>
<div id="28e5671f" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb5-1">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([</span>
<span id="cb5-2">    [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>],</span>
<span id="cb5-3">    [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>],</span>
<span id="cb5-4">    [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>]</span>
<span id="cb5-5">])</span>
<span id="cb5-6"></span>
<span id="cb5-7">np.zeros_like(x)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="3">
<pre><code>array([[0, 0, 0, 0],
       [0, 0, 0, 0],
       [0, 0, 0, 0]])</code></pre>
</div>
</div>
</section>
<section id="np.onesshape" class="level2">
<h2 class="anchored" data-anchor-id="np.onesshape"><code>np.ones(shape)</code></h2>
<div id="b7309ef3" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb7-2"></span>
<span id="cb7-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># The matrix of all ones of size 3 x 3</span></span>
<span id="cb7-4">np.ones(shape<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>))</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="4">
<pre><code>array([[1., 1., 1.],
       [1., 1., 1.],
       [1., 1., 1.]])</code></pre>
</div>
</div>
</section>
<section id="np.eyen_rowsm_cols" class="level2">
<h2 class="anchored" data-anchor-id="np.eyen_rowsm_cols"><code>np.eye(N_rows,M_cols)</code></h2>
<div id="c183308c" class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb9-2"></span>
<span id="cb9-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Identity matrix of size 3 x 3</span></span>
<span id="cb9-4">np.eye(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="5">
<pre><code>array([[1., 0., 0.],
       [0., 1., 0.],
       [0., 0., 1.]])</code></pre>
</div>
</div>
</section>
<section id="np.anyarray_like-axis-keepdims" class="level2">
<h2 class="anchored" data-anchor-id="np.anyarray_like-axis-keepdims"><code>np.any(array_like, axis, keepdims)</code></h2>
<p>Tests whether any array element along a given axis evaluates to <code>True</code>.</p>
<div id="4327cb52" class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb11-2"></span>
<span id="cb11-3">np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">any</span>([[<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>], [<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>]])</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="6">
<pre><code>np.True_</code></pre>
</div>
</div>
<div id="23597fe4" class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb13-1">np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">any</span>([[<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>], [<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>]], axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="7">
<pre><code>array([ True,  True])</code></pre>
</div>
</div>
<div id="cc7b6c40" class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb15-1">np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">any</span>([[<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>], [<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>]], axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="8">
<pre><code>array([ True, False])</code></pre>
</div>
</div>
<div id="5c0a6c75" class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb17-1">np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">any</span>([[<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>], [<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>]], axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="9">
<pre><code>array([ True,  True])</code></pre>
</div>
</div>
<div id="20716a90" class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb19-1">np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">any</span>([[<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>], [<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>]], axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, keepdims<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="10">
<pre><code>array([[ True],
       [ True]])</code></pre>
</div>
</div>
</section>
<section id="np.allarray_like-axis-keepdims" class="level2">
<h2 class="anchored" data-anchor-id="np.allarray_like-axis-keepdims"><code>np.all(array_like, axis, keepdims)</code></h2>
<div id="aaf2cce9" class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb21-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb21-2"></span>
<span id="cb21-3">np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">all</span>([[<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>], [<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>]])</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="11">
<pre><code>np.False_</code></pre>
</div>
</div>
<div id="1ad9d96f" class="cell" data-execution_count="12">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb23-1">np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">all</span>([[<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>], [<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>]], axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="12">
<pre><code>array([ True, False])</code></pre>
</div>
</div>
<div id="2cb51e9e" class="cell" data-execution_count="13">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb25-1">np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">all</span>([[<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>], [<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>]], axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="13">
<pre><code>array([False, False])</code></pre>
</div>
</div>
</section>
<section id="np.tilearray-reps" class="level2">
<h2 class="anchored" data-anchor-id="np.tilearray-reps"><code>np.tile(array, reps)</code></h2>
<p>Constructs an array by repeating the array <code>reps</code> number of times.</p>
<div id="c1400775" class="cell" data-execution_count="14">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb27-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb27-2"></span>
<span id="cb27-3">a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>])</span>
<span id="cb27-4">np.tile(a, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="14">
<pre><code>array([0, 1, 2, 0, 1, 2])</code></pre>
</div>
</div>
<div id="e40831d9" class="cell" data-execution_count="15">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb29-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb29-2"></span>
<span id="cb29-3">a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>])</span>
<span id="cb29-4">np.tile(a, (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>))</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="15">
<pre><code>array([[0, 1, 2, 0, 1, 2],
       [0, 1, 2, 0, 1, 2]])</code></pre>
</div>
</div>
</section>
<section id="np.repeatarray-repeats-axis" class="level2">
<h2 class="anchored" data-anchor-id="np.repeatarray-repeats-axis"><code>np.repeat(array, repeats, axis)</code></h2>
<p>Repeats each element of an array after themselves.</p>
<div id="6b9cba89" class="cell" data-execution_count="16">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb31-1">np.repeat(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="16">
<pre><code>array([3, 3, 3, 3])</code></pre>
</div>
</div>
<div id="bca0f600" class="cell" data-execution_count="17">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb33-1">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([</span>
<span id="cb33-2">    [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>],</span>
<span id="cb33-3">    [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>],</span>
<span id="cb33-4">    [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>]</span>
<span id="cb33-5">])</span>
<span id="cb33-6"></span>
<span id="cb33-7">np.repeat(x, repeats<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="17">
<pre><code>array([[1, 2],
       [1, 2],
       [3, 4],
       [3, 4],
       [5, 6],
       [5, 6]])</code></pre>
</div>
</div>
<div id="23aab666" class="cell" data-execution_count="18">
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb35-1">np.repeat(x, repeats <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="18">
<pre><code>array([[1, 1, 2, 2],
       [3, 3, 4, 4],
       [5, 5, 6, 6]])</code></pre>
</div>
</div>
</section>
<section id="broadcasting" class="level2">
<h2 class="anchored" data-anchor-id="broadcasting">Broadcasting</h2>
<p>The term broadcasting describes how NumPy treats arrays with different shapes during arithmetic operations. Subject to certain constraints, the smaller array is broadcast across the larger array, so that they have compatible shapes. Broadcasting provides a means of vectorizing array operations so that looping occurs in C, instead of Python.</p>
<p>For example, let <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7Bx%7D=%5Bx_0,%20x_1,%20%5Cldots,%20x_%7Bn-1%7D%5D"> be a column vector and let <img src="https://latex.codecogs.com/png.latex?k"> be a scalar.</p>
<p>The scalar multiplication <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7By%7D%20=%20k%20%5Cmathbf%7Bx%7D"> multiplies each element <img src="https://latex.codecogs.com/png.latex?x_0,%20x_1,%20x_2,%20%5Cldots,%20x_%7Bn-1%7D"> by <img src="https://latex.codecogs.com/png.latex?k">.</p>
<p>We can think of the scalar <img src="https://latex.codecogs.com/png.latex?k"> as being stretched during the arithmetic operation into a vector with the same length as <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7Bx%7D">. The stretching analogy is only conceptual. NumPy is smart enough to use the original scalar value without actually making copies.</p>
</section>
<section id="np.wherecondition-x-y" class="level2">
<h2 class="anchored" data-anchor-id="np.wherecondition-x-y"><code>np.where(condition, x, y)</code></h2>
<p>For each element <img src="https://latex.codecogs.com/png.latex?x"> in the array, if the array-element satisfies the condition, then <code>x</code> values are returned, else <code>y</code> values are returned.</p>
<div id="179c97e3" class="cell" data-execution_count="19">
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb37-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb37-2"></span>
<span id="cb37-3">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.arange(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb37-4">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># this returns a filter mask - an array of booleans</span></span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="19">
<pre><code>array([False, False, False, False, False, False,  True,  True,  True,
        True])</code></pre>
</div>
</div>
<div id="538739cc" class="cell" data-execution_count="20">
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb39-1">x[x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="20">
<pre><code>array([6, 7, 8, 9])</code></pre>
</div>
</div>
<div id="3406a8d5" class="cell" data-execution_count="21">
<div class="sourceCode cell-code" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb41-1">np.where(x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, x)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="21">
<pre><code>array([ 0,  1,  2,  3,  4,  5, 36, 49, 64, 81])</code></pre>
</div>
</div>
</section>
<section id="pandas.dataframedatacolumns" class="level2">
<h2 class="anchored" data-anchor-id="pandas.dataframedatacolumns"><code>pandas.DataFrame(data,columns)</code></h2>
<p>A <code>pandas.DataFrame</code> represents a two dimensional, size-mutable, potentially heterogenous collection of data.</p>
<p><code>data</code> can be any iterable, <code>dict</code> or another dataframe.</p>
<div id="76173870" class="cell" data-execution_count="22">
<div class="sourceCode cell-code" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb43-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb43-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> datetime <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> date</span>
<span id="cb43-3">data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb43-4">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Date'</span> : [ date(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2025</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">31</span>), date(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2025</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)],</span>
<span id="cb43-5">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Close price'</span> : [ <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">101.25</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">103.00</span> ]</span>
<span id="cb43-6">}</span>
<span id="cb43-7"></span>
<span id="cb43-8">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame(data)</span>
<span id="cb43-9">df</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="22">
<div>


<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">Date</th>
<th data-quarto-table-cell-role="th">Close price</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>2025-01-31</td>
<td>101.25</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>2025-02-01</td>
<td>103.00</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
</section>
<section id="indexing-a-dataframe" class="level2">
<h2 class="anchored" data-anchor-id="indexing-a-dataframe">Indexing a <code>DataFrame</code></h2>
<div id="d9490676" class="cell" data-execution_count="23">
<div class="sourceCode cell-code" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb44-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Access a single value for a row/column label pair</span></span>
<span id="cb44-2">df.at[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Close price'</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="23">
<pre><code>np.float64(103.0)</code></pre>
</div>
</div>
<div id="e3d6fb8e" class="cell" data-execution_count="24">
<div class="sourceCode cell-code" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb46-1">df.at[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Close price'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">102.50</span></span></code></pre></div>
</div>
<div id="8e155602" class="cell" data-execution_count="25">
<div class="sourceCode cell-code" id="cb47" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb47-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Accessing a group of rows and columns by label(s) or boolean array</span></span>
<span id="cb47-2">df.loc[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="25">
<pre><code>Date           2025-01-31
Close price        101.25
Name: 0, dtype: object</code></pre>
</div>
</div>
<div id="b7e649c2" class="cell" data-execution_count="26">
<div class="sourceCode cell-code" id="cb49" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb49-1">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame({</span>
<span id="cb49-2">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'A'</span> : [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>],</span>
<span id="cb49-3">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'B'</span> : [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>],</span>
<span id="cb49-4">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'C'</span> : [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">13</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">17</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">18</span>]</span>
<span id="cb49-5">})</span>
<span id="cb49-6">df</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="26">
<div>


<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">A</th>
<th data-quarto-table-cell-role="th">B</th>
<th data-quarto-table-cell-role="th">C</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>1</td>
<td>7</td>
<td>13</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>2</td>
<td>8</td>
<td>14</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>3</td>
<td>9</td>
<td>15</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>4</td>
<td>10</td>
<td>16</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>5</td>
<td>11</td>
<td>17</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">5</td>
<td>6</td>
<td>12</td>
<td>18</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<div id="19ccaaab" class="cell" data-execution_count="27">
<div class="sourceCode cell-code" id="cb50" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb50-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Accessing a group of rows and columns by label(s) or boolean array</span></span>
<span id="cb50-2">df.loc[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="27">
<pre><code>A     1
B     7
C    13
Name: 0, dtype: int64</code></pre>
</div>
</div>
<div id="4b72dc19" class="cell" data-execution_count="28">
<div class="sourceCode cell-code" id="cb52" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb52-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Integer location based indexing</span></span>
<span id="cb52-2">df.iloc[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="28">
<pre><code>1    8
2    9
Name: B, dtype: int64</code></pre>
</div>
</div>
</section>
<section id="filtering-data" class="level2">
<h2 class="anchored" data-anchor-id="filtering-data">Filtering data</h2>
<div id="380b0b29" class="cell" data-execution_count="29">
<div class="sourceCode cell-code" id="cb54" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb54-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># This produces a filter mask</span></span>
<span id="cb54-2">df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'B'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span></span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="29">
<pre><code>0    False
1    False
2    False
3     True
4     True
5     True
Name: B, dtype: bool</code></pre>
</div>
</div>
<div id="451330f2" class="cell" data-execution_count="30">
<div class="sourceCode cell-code" id="cb56" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb56-1">df[df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'B'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="30">
<div>


<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">A</th>
<th data-quarto-table-cell-role="th">B</th>
<th data-quarto-table-cell-role="th">C</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">3</td>
<td>4</td>
<td>10</td>
<td>16</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">4</td>
<td>5</td>
<td>11</td>
<td>17</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">5</td>
<td>6</td>
<td>12</td>
<td>18</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
</section>
<section id="data-transformation" class="level2">
<h2 class="anchored" data-anchor-id="data-transformation">Data transformation</h2>
<div id="b653e4f8" class="cell" data-execution_count="31">
<div class="sourceCode cell-code" id="cb57" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb57-1">df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'B'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lambda</span> row: row[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'B'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> , axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb57-2">df</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="31">
<div>


<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">A</th>
<th data-quarto-table-cell-role="th">B</th>
<th data-quarto-table-cell-role="th">C</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>1</td>
<td>49</td>
<td>13</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>2</td>
<td>64</td>
<td>14</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>3</td>
<td>81</td>
<td>15</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>4</td>
<td>100</td>
<td>16</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>5</td>
<td>121</td>
<td>17</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">5</td>
<td>6</td>
<td>144</td>
<td>18</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>


</section>

 ]]></description>
  <category>Python</category>
  <guid>http://quantdev.blog/posts/numpy-and-pandas-cheatsheet/index.html</guid>
  <pubDate>Thu, 06 Mar 2025 00:00:00 GMT</pubDate>
  <media:content url="http://quantdev.blog/posts/numpy-and-pandas-cheatsheet/python.jpeg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Python lists, dicts, tuples</title>
  <dc:creator>Quasar </dc:creator>
  <link>http://quantdev.blog/posts/python-built-in-types/index.html</link>
  <description><![CDATA[ 




<section id="dict-in-python" class="level2">
<h2 class="anchored" data-anchor-id="dict-in-python"><code>dict</code> in Python</h2>
<p>Python <code>dict</code>s are a collection of key-value pairs implemented as hash tables. <code>dict</code>s can be updated in place and dictionaries can grow and shrink as needed.</p>
</section>
<section id="flattening-a-dict-of-dicts" class="level2">
<h2 class="anchored" data-anchor-id="flattening-a-dict-of-dicts">Flattening a <code>dict</code> of <code>dict</code>s</h2>
<div id="2d1af229" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb1-1">quote_types <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb1-2">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Bids'</span> : {</span>
<span id="cb1-3">        <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> : [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">45</span>],</span>
<span id="cb1-4">        <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> : [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">47.5</span>],</span>
<span id="cb1-5">        <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> : [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">49.5</span>]</span>
<span id="cb1-6">    },</span>
<span id="cb1-7">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Offers'</span> : {</span>
<span id="cb1-8">        <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> : [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">50.5</span>],</span>
<span id="cb1-9">        <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> : [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">52.5</span>],</span>
<span id="cb1-10">        <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> : [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">55</span>]</span>
<span id="cb1-11">    }</span>
<span id="cb1-12">}</span>
<span id="cb1-13"></span>
<span id="cb1-14">dict_of_height_3 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>{</span>
<span id="cb1-15">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'a'</span> : {</span>
<span id="cb1-16">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'b'</span> :{</span>
<span id="cb1-17">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'c'</span> : <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb1-18">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'d'</span> : <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,</span>
<span id="cb1-19">        },</span>
<span id="cb1-20">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'e'</span> : {</span>
<span id="cb1-21">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'f'</span> : <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,</span>
<span id="cb1-22">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'g'</span> : <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>,</span>
<span id="cb1-23">        }</span>
<span id="cb1-24">    },</span>
<span id="cb1-25">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'h'</span> : {</span>
<span id="cb1-26">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'i'</span> : {</span>
<span id="cb1-27">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'j'</span> : <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>,</span>
<span id="cb1-28">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'k'</span> : <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>,</span>
<span id="cb1-29">        },</span>
<span id="cb1-30">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'l'</span> : {</span>
<span id="cb1-31">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'m'</span> : <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>,</span>
<span id="cb1-32">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'n'</span> : <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>,</span>
<span id="cb1-33">        },</span>
<span id="cb1-34">    }</span>
<span id="cb1-35">}</span>
<span id="cb1-36"></span>
<span id="cb1-37"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> flatten_dict(d : <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>, parent_key <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span>, sep <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'_'</span>):</span>
<span id="cb1-38">    result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {}</span>
<span id="cb1-39">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> k,v <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> d.items():</span>
<span id="cb1-40">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span>(v) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">is</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>):</span>
<span id="cb1-41">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Recursively flatten the child element</span></span>
<span id="cb1-42">            child_flat_dict <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> flatten_dict(v, parent_key<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(k))</span>
<span id="cb1-43"></span>
<span id="cb1-44">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># We now have a dict-of-dicts of height 2</span></span>
<span id="cb1-45">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> child_k, child_v <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> child_flat_dict.items():</span>
<span id="cb1-46">                key <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> parent_key <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> sep <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> child_k <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> parent_key <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> child_k</span>
<span id="cb1-47">                result[key] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> child_v</span>
<span id="cb1-48">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb1-49">            key <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> parent_key <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> sep <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(k)</span>
<span id="cb1-50">            result[key] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> v</span>
<span id="cb1-51">            </span>
<span id="cb1-52">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> result</span>
<span id="cb1-53"></span>
<span id="cb1-54"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"flattening quotes</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb1-55">flatten_dict(quote_types)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>flattening quotes
</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="1">
<pre><code>{'Bids_1': [10, 45],
 'Bids_2': [25, 47.5],
 'Bids_3': [30, 49.5],
 'Offers_1': [30, 50.5],
 'Offers_2': [25, 52.5],
 'Offers_3': [10, 55]}</code></pre>
</div>
</div>
<div id="58d1a07a" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dict_of_height_3</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb4-2">flatten_dict(dict_of_height_3)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>dict_of_height_3
</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="2">
<pre><code>{'a_b_c': 1,
 'a_b_d': 2,
 'a_e_f': 3,
 'a_e_g': 4,
 'h_i_j': 5,
 'h_i_k': 6,
 'h_l_m': 7,
 'h_l_n': 8}</code></pre>
</div>
</div>
</section>
<section id="list-in-python" class="level2">
<h2 class="anchored" data-anchor-id="list-in-python"><code>list()</code> in Python</h2>
<p><code>list</code>s are mutable sequences typically used to store collections of homogenous items.</p>
<p><code>list.append(x:Any)-&gt;None</code> adds a single-item to the end of the list, <em>in-place</em>. <code>list.extend(Iterable)-&gt;None</code> extends the list <em>in-place</em> by appending all items from the iterable, and returns <code>None</code>.</p>
<p><code>list.insert(i,x)-&gt;None</code> inserts an element <code>x</code> at the given index <code>i</code>. <code>list.remove(x)</code> removes the first item from the list who value is equal to <code>x</code>. <code>list.pop([i])</code> removes the item at the given position in the list and returns it. If no index is specified, <code>list.pop()</code> removes and returns the last element in the list.</p>
</section>
<section id="reverse-a-list" class="level2">
<h2 class="anchored" data-anchor-id="reverse-a-list">Reverse a list</h2>
<div id="93a2e241" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> typing <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> List</span>
<span id="cb7-2">l <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>]</span>
<span id="cb7-3"></span>
<span id="cb7-4">l.reverse()  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># reverse in place</span></span>
<span id="cb7-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(l)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[5, 4, 3, 2, 1]</code></pre>
</div>
</div>
<div id="cd471399" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># recursive solution</span></span>
<span id="cb9-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> reverse(l : List, acc : List <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> List:</span>
<span id="cb9-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(l) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>):</span>
<span id="cb9-4">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> acc</span>
<span id="cb9-5">    </span>
<span id="cb9-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(l) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>):</span>
<span id="cb9-7">        l.extend(acc)</span>
<span id="cb9-8">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> l</span>
<span id="cb9-9">    </span>
<span id="cb9-10">    new_acc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [l[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]]</span>
<span id="cb9-11">    new_acc.extend(acc)</span>
<span id="cb9-12">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> reverse(l[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:], new_acc)</span>
<span id="cb9-13"></span>
<span id="cb9-14"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> reverse_iter(l : List) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> List:</span>
<span id="cb9-15">    result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb9-16">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> element <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> l:</span>
<span id="cb9-17">        result.insert(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, element)</span>
<span id="cb9-18"></span>
<span id="cb9-19">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> result</span>
<span id="cb9-20"></span>
<span id="cb9-21">items <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">17</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>]</span>
<span id="cb9-22">reverse(items)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="4">
<pre><code>[3, 15, 42, 17, 2]</code></pre>
</div>
</div>
</section>
<section id="determine-if-the-list-is-a-palindrome" class="level2">
<h2 class="anchored" data-anchor-id="determine-if-the-list-is-a-palindrome">Determine if the list is a palindrome</h2>
<div id="3adcc3bb" class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> typing <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> List</span>
<span id="cb11-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> is_palindrome(l : List) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">bool</span>:</span>
<span id="cb11-3">    n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(l)</span>
<span id="cb11-4">    i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb11-5">    j <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb11-6"></span>
<span id="cb11-7">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">while</span>(i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> j):</span>
<span id="cb11-8">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span>(l[i] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> l[j]):</span>
<span id="cb11-9">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb11-10">        </span>
<span id="cb11-11">        i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb11-12">        j <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb11-13"></span>
<span id="cb11-14">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb11-15"></span>
<span id="cb11-16"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(is_palindrome([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]))</span>
<span id="cb11-17"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(is_palindrome([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>True
True</code></pre>
</div>
</div>
</section>
<section id="flatten-a-nested-list" class="level2">
<h2 class="anchored" data-anchor-id="flatten-a-nested-list">Flatten a nested list</h2>
<div id="a799f3ba" class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb13-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> flatten_list(l : List):</span>
<span id="cb13-2">    result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb13-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> element <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> l:</span>
<span id="cb13-4">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span>(element) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">is</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>):</span>
<span id="cb13-5">            simple_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> flatten_list(element)</span>
<span id="cb13-6">            result.extend(simple_list)</span>
<span id="cb13-7">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb13-8">            result.append(element)</span>
<span id="cb13-9">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> result</span>
<span id="cb13-10"></span>
<span id="cb13-11">flatten_list([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'a'</span>, [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'b'</span>, [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'c'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'d'</span>], <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'e'</span>]])</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="6">
<pre><code>['a', 'b', 'c', 'd', 'e']</code></pre>
</div>
</div>
</section>
<section id="eliminate-consecutive-duplicates-of-list-elements" class="level2">
<h2 class="anchored" data-anchor-id="eliminate-consecutive-duplicates-of-list-elements">Eliminate consecutive duplicates of list elements</h2>
<p>Always use <code>key in my_dict</code> directly instead of <code>key in my_dict.keys()</code>, if you want to check the existence of a key in a <code>dict</code>. That will use the dictionary’s <img src="https://latex.codecogs.com/png.latex?O(1)"> hashing rather than <img src="https://latex.codecogs.com/png.latex?O(n)">. <code>my_dict.keys()</code> returns a list of keys.</p>
<div id="211846c7" class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb15-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> typing <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> List</span>
<span id="cb15-2"></span>
<span id="cb15-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Remove duplicates from a nested-list while preserving the</span></span>
<span id="cb15-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># the structure</span></span>
<span id="cb15-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> array_unique(l : List, unique_elements : <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>{}) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> (List,<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>):</span>
<span id="cb15-6">    result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb15-7">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> element <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> l:</span>
<span id="cb15-8">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span>(element) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">is</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>:</span>
<span id="cb15-9">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># get the list of unique children and append it to result</span></span>
<span id="cb15-10">            child_list, unique_elements <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> array_unique(element, unique_elements<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>unique_elements)</span>
<span id="cb15-11">            result.append(child_list)</span>
<span id="cb15-12">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb15-13">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> element <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> unique_elements:</span>
<span id="cb15-14">                <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">continue</span></span>
<span id="cb15-15">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb15-16">                result.append(element)</span>
<span id="cb15-17">                unique_elements[element] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb15-18"></span>
<span id="cb15-19">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> result, unique_elements</span>
<span id="cb15-20"></span>
<span id="cb15-21">my_array <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>], <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>], [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>], <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>]</span>
<span id="cb15-22">result, _ <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> array_unique(my_array)</span>
<span id="cb15-23">result</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="7">
<pre><code>[1, [2, [3], 4, 5], [6], 7]</code></pre>
</div>
</div>
</section>
<section id="list-comprehensions" class="level2">
<h2 class="anchored" data-anchor-id="list-comprehensions">List comprehensions</h2>
<div id="60f49632" class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb17-1">squares <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)]</span>
<span id="cb17-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(squares)</span>
<span id="cb17-3">combs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [(x,y,z) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> y <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> z <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)]</span>
<span id="cb17-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(combs)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[0, 1, 4, 9, 16]
[(0, 0, 0), (0, 0, 1), (0, 1, 0), (0, 1, 1), (1, 0, 0), (1, 0, 1), (1, 1, 0), (1, 1, 1)]</code></pre>
</div>
</div>
</section>
<section id="nested-list-comprehensions" class="level2">
<h2 class="anchored" data-anchor-id="nested-list-comprehensions">Nested List comprehensions</h2>
<div id="7121c66d" class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb19-1">matrix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb19-2">    [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>],</span>
<span id="cb19-3">    [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>],</span>
<span id="cb19-4">    [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>],</span>
<span id="cb19-5">]</span>
<span id="cb19-6"></span>
<span id="cb19-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Take the transpose of a matrix</span></span>
<span id="cb19-8">[[row[i] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> row <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> matrix]<span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="9">
<pre><code>[[1, 5, 9], [2, 6, 10], [3, 7, 11], [4, 8, 12]]</code></pre>
</div>
</div>
</section>
<section id="tuples-in-python" class="level2">
<h2 class="anchored" data-anchor-id="tuples-in-python"><code>tuple</code>s in Python</h2>
<p><code>list</code>s are mutable wherease <code>tuple</code>s are immutable types. The contents of a tuple cannot be modified at run-time. They usually store a heterogenous collection of items.</p>
</section>
<section id="sets-in-python" class="level2">
<h2 class="anchored" data-anchor-id="sets-in-python"><code>set</code>s in Python</h2>
<p>Python also includes a data-type for sets. A set is an unordered collection with no duplicate elements. Basic uses include membership testing and eliminating duplicate entries. Set objects also support mathematical operations such as union, intersection, difference and symmetric difference.</p>
<p>Curly braces or <code>set()</code> is used to create sets.</p>
<div id="9fff20c2" class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb21-1">a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'abracadabra'</span>)</span>
<span id="cb21-2">b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'alcazam'</span>)</span>
<span id="cb21-3"></span>
<span id="cb21-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(a)</span>
<span id="cb21-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> b)</span>
<span id="cb21-6"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span> b)</span>
<span id="cb21-7"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> b)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>{'a', 'd', 'c', 'b', 'r'}
{'d', 'b', 'r'}
{'m', 'a', 'd', 'c', 'z', 'l', 'b', 'r'}
{'c', 'a'}</code></pre>
</div>
</div>
</section>
<section id="python-3.8-walrus-operator" class="level2">
<h2 class="anchored" data-anchor-id="python-3.8-walrus-operator">Python 3.8 walrus <code>:=</code> operator</h2>
<p><code>:=</code> assigns a value to a variable and simultaneous returns the value. For example:</p>
<div id="a6e9f21c" class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb23-1">my_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>]</span>
<span id="cb23-2"></span>
<span id="cb23-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(my_list)):</span>
<span id="cb23-4">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"The list has non-zero length = </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>n<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>The list has non-zero length = 5</code></pre>
</div>
</div>
<p>Another motivating use-case is when looping over fixed-length blocks in a protocol parser.</p>
<div class="sourceCode" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb25-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Loop over fixed length blocks</span></span>
<span id="cb25-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">while</span> (block <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:=</span> f.read(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span>)) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span>:</span>
<span id="cb25-3">    process(block)</span></code></pre></div>


</section>

 ]]></description>
  <category>Python</category>
  <guid>http://quantdev.blog/posts/python-built-in-types/index.html</guid>
  <pubDate>Wed, 05 Mar 2025 00:00:00 GMT</pubDate>
  <media:content url="http://quantdev.blog/posts/python-built-in-types/python.jpeg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>DIY asyncio</title>
  <dc:creator>Quasar </dc:creator>
  <link>http://quantdev.blog/posts/diy-asyncio/index.html</link>
  <description><![CDATA[ 




<section id="basics" class="level2">
<h2 class="anchored" data-anchor-id="basics">Basics</h2>
<p>In single-core processors, the machine can only perform one task at a time, but can switch between many tasks many times per second. By doing a bit of one task and then a bit of another and so on, it appears that the tasks are happening concureently. This is called <em>task switching</em>. Because the task switches are so fast, it provides an illusion of concurrency to both the user and the applications.</p>
<p>On a single-core maching doing task switching, chunks from each task are interleaved. But, they are also spaced out a bit; in order to do the interleaving, the operating system has to perform a <em>context switch</em> every time it changes from one task to another, and this takes time. In order to perform a context switch, the OS has to save the CPU state and the instruction pointer for the currently running task, work out which task to switch to, and reload the CPU state for the task being switched to.</p>
<p>Multi-core processors are genuinely capable of running more than one task in parallel. This is called <em>hardware concurrency</em>.</p>
<section id="throughput-and-latency" class="level3">
<h3 class="anchored" data-anchor-id="throughput-and-latency">Throughput and Latency</h3>
<p>The rate of doing work (operations per second) is called <em>throughput</em>. The response time it takes for a system to process a request is called <em>latency</em>.</p>
</section>
<section id="synchronous-vs-asynchronous" class="level3">
<h3 class="anchored" data-anchor-id="synchronous-vs-asynchronous">Synchronous vs Asynchronous</h3>
<p>Synchronous execution is sequential.</p>
<div id="bb2d4dee" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> foo():</span>
<span id="cb1-2">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Inside foo."</span>)</span>
<span id="cb1-3"></span>
<span id="cb1-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> main():</span>
<span id="cb1-5">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Starting work."</span>)</span>
<span id="cb1-6">    foo()</span>
<span id="cb1-7">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Finishing work."</span>)</span>
<span id="cb1-8"></span>
<span id="cb1-9">main()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Starting work.
Inside foo.
Finishing work.</code></pre>
</div>
</div>
<p>In the <code>main()</code> code-path, the call to <code>foo()</code> is a blocking call, the execution jumps to <code>foo()</code> and <code>main()</code> resumes when <code>foo()</code> returns.</p>
<p>Asynchronous(or <em>async</em>) execution refers to execution that doesn't block when invoking subroutines. It is a <em>fire-and-forget</em> technique. Any work package runs separately from the main application thread and notifies the calling thread of its completion, failure or progress.</p>
<p>Usually, such methods return an entity called <code>future</code> or <code>promise</code> that is the representation of an in-progress computation. The calling thread can query for the status of the computation via the returned future or promise and retrieve the result once completed.</p>
<p>Another pattern is to pass a callback function to the asynchronous functional call, which is invoked with the results when the asynchronous function is done processing.</p>
<p>Asynchronous programming is an execllent choice for applications that do extensive network or disk I/O and spend most of their time waiting.</p>
</section>
<section id="io-bound-vs-cpu-bound" class="level3">
<h3 class="anchored" data-anchor-id="io-bound-vs-cpu-bound">I/O bound vs CPU bound</h3>
<section id="cpu-bound" class="level4">
<h4 class="anchored" data-anchor-id="cpu-bound">CPU bound</h4>
<p>Programs that are compute-intensive are called CPU bound programs. This could involve numerical optimizations, Monte-Carlo simulations, data-crunching etc.</p>
</section>
<section id="io-bound" class="level4">
<h4 class="anchored" data-anchor-id="io-bound">I/O bound</h4>
<p>I/O bound programs spend most of their time doing network or main memory and file I/O operations. Since the CPU and main memory are separate, a bus exists between the two to transfer bits. Similarly, data needs to moved from the NIC to CPU/memory. Even though these physical distances are small, the time taken to transfer the data can waste a few thousand CPU cycles. This is why I/O bound programs show relatively lower CPU utilization than CPU bound programs.</p>
</section>
</section>
<section id="data-race-conditions-and-thread-safety" class="level3">
<h3 class="anchored" data-anchor-id="data-race-conditions-and-thread-safety">Data race-conditions and thread safety</h3>
<p>The most common cause of bugs in concurrent code is a <em>race-condition</em>.</p>
<div id="2f52cf5d" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> concurrent.futures</span>
<span id="cb3-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> logging</span>
<span id="cb3-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> time</span>
<span id="cb3-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> concurrent</span>
<span id="cb3-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> threading</span>
<span id="cb3-6"></span>
<span id="cb3-7"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> Account:</span>
<span id="cb3-8">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb3-9">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.value <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb3-10"></span>
<span id="cb3-11">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@property</span></span>
<span id="cb3-12">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> value(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb3-13">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._value</span>
<span id="cb3-14">    </span>
<span id="cb3-15">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@value.setter</span></span>
<span id="cb3-16">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> value(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, x):</span>
<span id="cb3-17">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._value <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x</span>
<span id="cb3-18">    </span>
<span id="cb3-19">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> credit(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, name : <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>, amount : <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>):</span>
<span id="cb3-20">        logging.info(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Thread </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%s</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">: starting update"</span>, name)</span>
<span id="cb3-21">        </span>
<span id="cb3-22">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ----- Critical section -----</span></span>
<span id="cb3-23">        local_copy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.value     </span>
<span id="cb3-24">        local_copy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> amount</span>
<span id="cb3-25">        time.sleep(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>)</span>
<span id="cb3-26">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.value <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> local_copy</span>
<span id="cb3-27">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ----- End of critical section -----</span></span>
<span id="cb3-28"></span>
<span id="cb3-29">        logging.info(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Thread </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%s</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">: finishing update"</span>, name)</span>
<span id="cb3-30"></span>
<span id="cb3-31"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">__name__</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"__main__"</span>:</span>
<span id="cb3-32">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%(asctime)s</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%(message)s</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb3-33">    logging.basicConfig(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span>, level<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>logging.INFO, datefmt<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"%H:%M:%S"</span>)</span>
<span id="cb3-34">    account <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Account()</span>
<span id="cb3-35">    logging.info(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Testing update. Starting value is </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">."</span>, account.value)</span>
<span id="cb3-36"></span>
<span id="cb3-37">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> concurrent.futures.ThreadPoolExecutor(max_workers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> executor:</span>
<span id="cb3-38">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> index <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>):</span>
<span id="cb3-39">            executor.submit(account.credit, index, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)</span>
<span id="cb3-40"></span>
<span id="cb3-41">    logging.info(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Testing update. Ending value is </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>, account.value)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>11:49:59: Testing update. Starting value is 0.
11:49:59: Thread 0: starting update
11:49:59: Thread 1: starting update
11:49:59: Thread 1: finishing update
11:49:59: Thread 0: finishing update
11:49:59: Testing update. Ending value is 100</code></pre>
</div>
</div>
<p>The above logic can be made thread-safe by fencing off the critical section using a mutex and enforcing that only a single thread can enter at a time.</p>
</section>
<section id="deadlocks" class="level3">
<h3 class="anchored" data-anchor-id="deadlocks">Deadlocks</h3>
<p>Imagine that you have a toy that comes in two parts, and you need both parts to play with it - a toy drum and a drumstick, for example. Now, imagine that you ave two small children, both of whom like playing with it. If one of them gets both the drum and the drumstick, that child can merrily play the drum until titing of it. If the other child wants to play, they have wait, however sad that makes them. Now, imagine one child has the drum and other has the drumstick. They’re stuck, unless one decides to be nice and let the other play, each will hold on to whatver they have and demand that they be given the other piece, so neither gets to play. This is a deadlock.</p>
<p>Imagine two threads arguing over locks on mutexes: each of a pair of threads needs to lock both of a pair of mutexes to perform some operation, and each thread has one mutex and is waiting for the other. Neither thread can proceed, because each is waiting for the other to release its mutex. This scenario is called <em>deadlock</em>.</p>
<div id="e76ebc96" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> threading</span>
<span id="cb5-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> concurrent</span>
<span id="cb5-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> time</span>
<span id="cb5-4"></span>
<span id="cb5-5"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">__name__</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"__main__"</span>:</span>
<span id="cb5-6">    drum <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> threading.Lock()</span>
<span id="cb5-7">    drumstick <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> threading.Lock()</span>
<span id="cb5-8"></span>
<span id="cb5-9">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> child1_plays_drums():</span>
<span id="cb5-10">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">Child-1 waiting for drums"</span>)</span>
<span id="cb5-11">        drum.acquire()</span>
<span id="cb5-12">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">Child-1 acquired drums"</span>)</span>
<span id="cb5-13">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">Child-1 waiting for drumstick"</span>)</span>
<span id="cb5-14">        drumstick.acquire()</span>
<span id="cb5-15">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">Child-1 is playing drums"</span>)</span>
<span id="cb5-16"></span>
<span id="cb5-17">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> child2_plays_drums():</span>
<span id="cb5-18">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">Child-2 waiting for drumstick"</span>)</span>
<span id="cb5-19">        drumstick.acquire()</span>
<span id="cb5-20">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">Child-2 acquired drumstick"</span>)</span>
<span id="cb5-21">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">Child-2 waiting for drums"</span>)</span>
<span id="cb5-22">        drum.acquire()</span>
<span id="cb5-23">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">Child-2 acquired drums"</span>)</span>
<span id="cb5-24">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">Child-2 is playing drums"</span>)</span>
<span id="cb5-25"></span>
<span id="cb5-26">    t1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> threading.Thread(target<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>child1_plays_drums)</span>
<span id="cb5-27">    t2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> threading.Thread(target<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>child2_plays_drums)</span>
<span id="cb5-28">    </span>
<span id="cb5-29">    t1.start()</span>
<span id="cb5-30">    t2.start()</span>
<span id="cb5-31"></span>
<span id="cb5-32">    time.sleep(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>
Child-1 waiting for drums

Child-1 acquired drums

Child-1 waiting for drumstick

Child-1 is playing drums

Child-2 waiting for drumstick</code></pre>
</div>
</div>
</section>
<section id="mutexes-and-semaphores" class="level3">
<h3 class="anchored" data-anchor-id="mutexes-and-semaphores">Mutexes and Semaphores</h3>
<p>A mutex is an programming construct that allows only a single thread to access a shared resource or critical section. Once a thread acquires a mutex, all other threads attempting to acquire the same mutex are blocked until the thread releases the mutex.</p>
<p>A semaphore on the hand is used to limit access to a collection of resources. Think of semaphore as having a limited number of permits to give out. If a semaphore has given out all the permits it has, then any new thread that comes along requesting a permit will be blocked till an earlier thread with a permit returns it to the semaphore. A protoypical example is a <code>ConnectionPool</code> that hands out database connects to requesting threads.</p>
<p>A semaphore with a single permit is called a <em>binary semaphore</em>. Semaphores can also be used for signaling among threads. This is an important distinction as it allows threads to cooperatively work towards completing a task. A mutex on the other hand, is strictly limted to serializing access to shared data among competing threads.</p>
<section id="when-can-a-semaphore-masquerade-as-a-mutex" class="level4">
<h4 class="anchored" data-anchor-id="when-can-a-semaphore-masquerade-as-a-mutex">When can a semaphore masquerade as a mutex?</h4>
<p>A semaphore can potentially act as a mutex if the number of permits it can give is at most <img src="https://latex.codecogs.com/png.latex?1">. However, the most important difference is that, the thread that calls <code>acquire()</code> on a mutex must subsequently <code>release()</code> the mutex. A mutex is <em>owned</em> by the thread acquiring it, upto the point the owning thread releases it. Whilst, in the case of a binary semaphore, different threads can call <code>acquire()</code> and <code>release()</code> on the semaphore.</p>
</section>
</section>
<section id="semaphore-for-signaling" class="level3">
<h3 class="anchored" data-anchor-id="semaphore-for-signaling">Semaphore for signaling</h3>
<p>Another distinction between a semaphore and a mutex is that semaphores can be used for signaling amongst threads. For example, in case of the classical <a href="https://quantdev.blog/posts/thread-safe-queues/">producer-consumer problem</a>, the producer thread can signal the consumer thread by incrementing the semaphore count to indicate to the consumer thread to read items from the queue. Threads can coordinate tasks using semaphores. A mutex, in contrast, only guards access to shared data.</p>
</section>
</section>
<section id="threading-module" class="level2">
<h2 class="anchored" data-anchor-id="threading-module"><code>threading</code> module</h2>
<p>Data-parallelism can be achieved using multi-threading.</p>
<div id="fcc517c5" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb7-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> threading</span>
<span id="cb7-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> typing</span>
<span id="cb7-4"></span>
<span id="cb7-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> accumulate(a : np.array, idx : <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>):</span>
<span id="cb7-6">    result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(a)</span>
<span id="cb7-7">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">Sum of the subarray </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>idx<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> = </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>result<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb7-8"></span>
<span id="cb7-9"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">__name__</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"__main__"</span>:</span>
<span id="cb7-10">    data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.rand(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000000</span>)</span>
<span id="cb7-11">    num_chunks <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span></span>
<span id="cb7-12">    chunk_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(data) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> num_chunks)</span>
<span id="cb7-13">    num_threads <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> num_chunks</span>
<span id="cb7-14"></span>
<span id="cb7-15">    threads <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb7-16">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(num_threads):</span>
<span id="cb7-17">        start <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> chunk_size</span>
<span id="cb7-18">        end <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> start <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> chunk_size</span>
<span id="cb7-19">        thread <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> threading.Thread(target<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>accumulate(data[start:end], i))</span>
<span id="cb7-20">        threads.append(thread)</span>
<span id="cb7-21"></span>
<span id="cb7-22">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> t <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> threads:</span>
<span id="cb7-23">        t.start()</span>
<span id="cb7-24"></span>
<span id="cb7-25">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> t <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> threads:</span>
<span id="cb7-26">        t.join()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>
Sum of the subarray 0 = 124776.70127165115

Sum of the subarray 1 = 125051.88402552163

Sum of the subarray 2 = 125194.03813575335

Sum of the subarray 3 = 125021.25239279671</code></pre>
</div>
</div>
<p>Another way to create threads is subclassing the <code>threading.Thread</code> class.</p>
<div id="dc55b926" class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> threading <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Thread</span>
<span id="cb9-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> threading <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> current_thread</span>
<span id="cb9-3"></span>
<span id="cb9-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> MyTask(Thread):</span>
<span id="cb9-5"></span>
<span id="cb9-6">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb9-7">        Thread.<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"subClassThread"</span>, args<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>))</span>
<span id="cb9-8"></span>
<span id="cb9-9">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> run(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb9-10">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>current_thread()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> is executing"</span>)</span>
<span id="cb9-11"></span>
<span id="cb9-12">myTask <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> MyTask()</span>
<span id="cb9-13">myTask.start()  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># start the thread</span></span>
<span id="cb9-14">myTask.join()   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># wait for the thread to complete</span></span></code></pre></div>
</div>
<p>The important caveats to remember when subclassing <code>Thread</code> class are:</p>
<ul>
<li>We can only override the <code>run()</code> method and the constructor of the <code>Thread</code> class.</li>
<li><code>Thread.__init__()</code> must be invoked if the subclass chooses to override the constructor.</li>
</ul>
<section id="daemon-thread" class="level3">
<h3 class="anchored" data-anchor-id="daemon-thread">Daemon Thread</h3>
<p><em>Daemon</em> threads are background threads. When the <code>main</code> thread is about to exit, it cycles through all regular non-daemon threads and waits for them to complete. In the implementation of the <code>threading</code> module, the <a href="https://github.com/python/cpython/blob/df5cdc11123a35065bbf1636251447d0bfe789a5/Lib/threading.py#L1263"><code>_shutdown()</code></a> method iterates through non-daemon threads and invokes <code>join()</code> on each of them. <code>join()</code> is a blocking call, which returns when a thread’s work package is complete.</p>
<div id="aa6eda86" class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> threading</span>
<span id="cb10-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> time</span>
<span id="cb10-3"></span>
<span id="cb10-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> daemon_task():</span>
<span id="cb10-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">while</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>):</span>
<span id="cb10-6">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Executing daemon task"</span>)</span>
<span id="cb10-7">        time.sleep(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb10-8">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Completed daemon task"</span>)</span>
<span id="cb10-9"></span>
<span id="cb10-10"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">__name__</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"__main__"</span>:</span>
<span id="cb10-11">    daemon_thread <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> threading.Thread(</span>
<span id="cb10-12">        target<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>daemon_task,</span>
<span id="cb10-13">        name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"daemon thread"</span>,</span>
<span id="cb10-14">        daemon<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb10-15">    )</span>
<span id="cb10-16"></span>
<span id="cb10-17">    daemon_thread.start()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Executing daemon task</code></pre>
</div>
</div>
</section>
<section id="implementation-of-a-thread-safe-lifo-stack" class="level3">
<h3 class="anchored" data-anchor-id="implementation-of-a-thread-safe-lifo-stack">Implementation of a thread-safe LIFO stack</h3>
<div id="ac5af62c" class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> threading</span>
<span id="cb12-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> time</span>
<span id="cb12-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> typing <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Any, Optional</span>
<span id="cb12-4"></span>
<span id="cb12-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> StackFull(<span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">Exception</span>):</span>
<span id="cb12-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">pass</span></span>
<span id="cb12-7"></span>
<span id="cb12-8"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> StackEmpty(<span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">Exception</span>):</span>
<span id="cb12-9">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">pass</span></span>
<span id="cb12-10">    </span>
<span id="cb12-11"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> Stack:</span>
<span id="cb12-12">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, maxsize : <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>):</span>
<span id="cb12-13">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._mutex <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> threading.RLock()</span>
<span id="cb12-14">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.maxsize <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> maxsize</span>
<span id="cb12-15">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>()</span>
<span id="cb12-16"></span>
<span id="cb12-17">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@property</span></span>
<span id="cb12-18">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> maxsize(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb12-19">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._mutex:</span>
<span id="cb12-20">            value <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._maxsize</span>
<span id="cb12-21"></span>
<span id="cb12-22">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> value</span>
<span id="cb12-23"></span>
<span id="cb12-24">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@maxsize.setter</span></span>
<span id="cb12-25">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> maxsize(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, value : <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>):</span>
<span id="cb12-26">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._mutex:</span>
<span id="cb12-27">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._maxsize <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> value</span>
<span id="cb12-28"></span>
<span id="cb12-29">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> size(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>:</span>
<span id="cb12-30">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._mutex:</span>
<span id="cb12-31">            size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._data)</span>
<span id="cb12-32">        </span>
<span id="cb12-33">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> size</span>
<span id="cb12-34"></span>
<span id="cb12-35">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> empty(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">bool</span>:</span>
<span id="cb12-36">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._mutex:</span>
<span id="cb12-37">            isEmpty <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._data) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb12-38">        </span>
<span id="cb12-39">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> isEmpty</span>
<span id="cb12-40"></span>
<span id="cb12-41">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> full(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">bool</span>:</span>
<span id="cb12-42">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._mutex:</span>
<span id="cb12-43">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.maxsize <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">is</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>):</span>
<span id="cb12-44">                isFull <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._data) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.maxsize</span>
<span id="cb12-45">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb12-46">                isFull <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb12-47">        </span>
<span id="cb12-48">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> isFull</span>
<span id="cb12-49"></span>
<span id="cb12-50">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> put(</span>
<span id="cb12-51">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>,</span>
<span id="cb12-52">        item : Any, </span>
<span id="cb12-53">        block : <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">bool</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, </span>
<span id="cb12-54">        timeout : <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb12-55">    ) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb12-56">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._mutex.acquire(blocking<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,timeout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>timeout)</span>
<span id="cb12-57">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">Pushing item </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>item<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> to the stack"</span>)</span>
<span id="cb12-58">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.full():</span>
<span id="cb12-59">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Stack full!"</span>)</span>
<span id="cb12-60">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._mutex.release()</span>
<span id="cb12-61">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">raise</span> StackFull(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Stack full!"</span>)</span>
<span id="cb12-62">        </span>
<span id="cb12-63">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._data.append(item)</span>
<span id="cb12-64">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">Push complete"</span>)</span>
<span id="cb12-65">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"stack : </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>_data<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb12-66">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._mutex.release()</span>
<span id="cb12-67">    </span>
<span id="cb12-68">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> put_nowait(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, item:Any):</span>
<span id="cb12-69">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.put(item, block<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb12-70"></span>
<span id="cb12-71">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> get(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, block : <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">bool</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, timeout : <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> Any:</span>
<span id="cb12-72">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._mutex.acquire(blocking<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>block, timeout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>timeout)</span>
<span id="cb12-73">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">Popping from the stack"</span>)</span>
<span id="cb12-74">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.empty():</span>
<span id="cb12-75">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Stack empty!"</span>)</span>
<span id="cb12-76">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._mutex.release()</span>
<span id="cb12-77">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">raise</span> StackEmpty(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Stack empty!"</span>)</span>
<span id="cb12-78">        </span>
<span id="cb12-79">        value <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._data[<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.size() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb12-80">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">del</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._data[<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.size() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb12-81">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">Popped item </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>value<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> from the stack"</span>)</span>
<span id="cb12-82">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"stack : </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>_data<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb12-83">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._mutex.release()</span>
<span id="cb12-84"></span>
<span id="cb12-85">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> value</span>
<span id="cb12-86"></span>
<span id="cb12-87">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> get_no_wait(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb12-88">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.get(block<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb12-89"></span>
<span id="cb12-90">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> top(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> Any:</span>
<span id="cb12-91">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._mutex.acquire()</span>
<span id="cb12-92">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.empty():</span>
<span id="cb12-93">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._mutex.release()</span>
<span id="cb12-94">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Stack empty!"</span>)</span>
<span id="cb12-95">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">raise</span> StackEmpty(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Stack empty!"</span>)  </span>
<span id="cb12-96"></span>
<span id="cb12-97">        value <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._data[<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.size() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb12-98">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._mutex.release()</span>
<span id="cb12-99">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> value</span>
<span id="cb12-100"></span>
<span id="cb12-101"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> push_thread(stack : Stack):</span>
<span id="cb12-102">    </span>
<span id="cb12-103">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>):</span>
<span id="cb12-104">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">try</span>:</span>
<span id="cb12-105">            stack.put(i)</span>
<span id="cb12-106">            time.sleep(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>)</span>
<span id="cb12-107">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">except</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">Exception</span>:</span>
<span id="cb12-108">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">pass</span></span>
<span id="cb12-109"></span>
<span id="cb12-110"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> pop_thread(stack: Stack):</span>
<span id="cb12-111">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>):</span>
<span id="cb12-112">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">try</span>:</span>
<span id="cb12-113">            item <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stack.get()</span>
<span id="cb12-114">            time.sleep(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.12</span>)</span>
<span id="cb12-115">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">except</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">Exception</span>:</span>
<span id="cb12-116">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">pass</span></span>
<span id="cb12-117"></span>
<span id="cb12-118"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">__name__</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"__main__"</span>:</span>
<span id="cb12-119">    stack <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Stack()</span>
<span id="cb12-120">    </span>
<span id="cb12-121">    t1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> threading.Thread(target<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>push_thread, args<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(stack,))</span>
<span id="cb12-122">    t2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> threading.Thread(target<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>pop_thread, args<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(stack,))</span>
<span id="cb12-123">    </span>
<span id="cb12-124">    t1.start()</span>
<span id="cb12-125">    t2.start()</span>
<span id="cb12-126"></span>
<span id="cb12-127">    t1.join()</span>
<span id="cb12-128">    t2.join()</span>
<span id="cb12-129">    </span>
<span id="cb12-130">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"main() thread finished."</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>
Pushing item 0 to the stack

Push complete
stack : [0]

Popping from the stack

Popped item 0 from the stack
stack : []

Pushing item 1 to the stack

Push complete
stack : [1]

Popping from the stack

Popped item 1 from the stack
stack : []

Pushing item 2 to the stack

Push complete
stack : [2]

Popping from the stack

Popped item 2 from the stack
stack : []

Pushing item 3 to the stack

Push complete
stack : [3]

Popping from the stack

Popped item 3 from the stack
stack : []

Pushing item 4 to the stack

Push complete
stack : [4]

Popping from the stack

Popped item 4 from the stack
stack : []

Pushing item 5 to the stack

Push complete
stack : [5]

Popping from the stack

Popped item 5 from the stack
stack : []

Pushing item 6 to the stack

Push complete
stack : [6]

Pushing item 7 to the stack

Push complete
stack : [6, 7]

Popping from the stack

Popped item 7 from the stack
stack : [6]

Pushing item 8 to the stack

Push complete
stack : [6, 8]

Popping from the stack

Popped item 8 from the stack
stack : [6]

Pushing item 9 to the stack

Push complete
stack : [6, 9]

Popping from the stack

Popped item 9 from the stack
stack : [6]

Popping from the stack

Popped item 6 from the stack
stack : []
main() thread finished.</code></pre>
</div>
</div>
<p>In the above implementation, I used <code>RLock</code> - a reentrant lock. If a thread acquires a <code>RLock</code> object, it can choose to reacquire it as many times as possible. It is implicit to call <code>release()</code> as many times as <code>lock()</code> was called.</p>
</section>
<section id="condition-variables" class="level3">
<h3 class="anchored" data-anchor-id="condition-variables">Condition variables</h3>
<p>We looked at various ways of protecting the data that’s shared between threads. But, sometimes we don’t just need to protect the data, we also need to synchronize actions on separate threads. One thread might need to wait for another thread to complete a task before the first thread can complete its own. In general, its common to want a thread to wait for a specific event to happen or a condition to be <code>true</code>. Although it would be possible to do this by periodically checking a <em>task-complete</em> flag or something like that, it is far from ideal. The need to synchronize operations between threads like this is a common scenario and the python standard standard library provides facilities to handle it, in the form of <em>condition variables</em> and <em>futures</em>.</p>
<p>A condition variable is always associated with some kind of lock; this can be passed in, or one will be created on the fly. Passing one in is useful when several condition variables must share the same lock. The two important methods of a condition variable are:</p>
<ul>
<li><code>wait()</code> - The <code>wait()</code> method releases the lock held, then block until another thread awakens it by calling <code>notify()</code> or <code>notify_all()</code>. Once awakened, <code>wait()</code> reqacquires the lock and returns.</li>
<li><code>notify()</code> - The <code>notify()</code> method arbitrarily wakes up any one of the threads waiting on the condition variable. The <code>notify_all()</code> method wakes up all the threads.</li>
</ul>
<p>The typical programming style using condition variables uses the lock to synchronize access to some shared state; threads that are interest in a particular change of state call <code>wait()</code> repeatedly until they see the desired state, while threads that modify the state call <code>notify()</code> or <code>notify_all()</code> when they change the state in such a way that it could possibly be a desired state for one of the waiters.</p>
<p>Note: The <code>notify()</code> and <code>notify_all()</code> methods don’t release the lock; this means that the thread or threads awakened will not return from their <code>wait()</code> call immediately, but only when the waited-for thread finally relinquishes the ownership of the lock.</p>
<p>For example, the following code is a generic producer-consumer situation with unlimited buffer capacity:</p>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># consumer</span></span>
<span id="cb14-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> cond_var:</span>
<span id="cb14-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">while</span> item_is_not_available:</span>
<span id="cb14-4">        cond_var.wait()</span>
<span id="cb14-5">    </span>
<span id="cb14-6">    get_the_available_item()</span>
<span id="cb14-7"></span>
<span id="cb14-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># producer</span></span>
<span id="cb14-9"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> cond_var:</span>
<span id="cb14-10">    produce_an_item()</span>
<span id="cb14-11">    cond_var.notify()</span></code></pre></div>
</section>
<section id="implementation-of-a-thread-based-spsc-bounded-ring-buffer" class="level3">
<h3 class="anchored" data-anchor-id="implementation-of-a-thread-based-spsc-bounded-ring-buffer">Implementation of a thread-based SPSC bounded ring-buffer</h3>
<div id="96c62fdd" class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb15-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> threading</span>
<span id="cb15-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> time</span>
<span id="cb15-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> typing <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Any, Optional</span>
<span id="cb15-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> threading <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Condition</span>
<span id="cb15-5"></span>
<span id="cb15-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> QueueFull(<span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">Exception</span>):</span>
<span id="cb15-7">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">pass</span></span>
<span id="cb15-8"></span>
<span id="cb15-9"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> QueueEmpty(<span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">Exception</span>):</span>
<span id="cb15-10">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">pass</span></span>
<span id="cb15-11">    </span>
<span id="cb15-12"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> Queue:</span>
<span id="cb15-13">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, maxsize : <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>):</span>
<span id="cb15-14">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._lck <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> threading.RLock()</span>
<span id="cb15-15">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._queue_not_empty_condition <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Condition(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._lck)</span>
<span id="cb15-16">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._queue_not_full_condition <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Condition(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._lck)</span>
<span id="cb15-17">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.maxsize <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> maxsize</span>
<span id="cb15-18">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>()</span>
<span id="cb15-19"></span>
<span id="cb15-20">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@property</span></span>
<span id="cb15-21">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> maxsize(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb15-22">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._lck:</span>
<span id="cb15-23">            value <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._maxsize</span>
<span id="cb15-24"></span>
<span id="cb15-25">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> value</span>
<span id="cb15-26"></span>
<span id="cb15-27">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@maxsize.setter</span></span>
<span id="cb15-28">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> maxsize(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, value : <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>):</span>
<span id="cb15-29">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._lck:</span>
<span id="cb15-30">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._maxsize <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> value</span>
<span id="cb15-31"></span>
<span id="cb15-32">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> size(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>:</span>
<span id="cb15-33">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._lck:</span>
<span id="cb15-34">            size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._data)</span>
<span id="cb15-35">        </span>
<span id="cb15-36">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> size</span>
<span id="cb15-37"></span>
<span id="cb15-38">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> empty(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">bool</span>:</span>
<span id="cb15-39">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._lck:</span>
<span id="cb15-40">            isEmpty <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._data) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb15-41">        </span>
<span id="cb15-42">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> isEmpty</span>
<span id="cb15-43"></span>
<span id="cb15-44">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> full(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">bool</span>:</span>
<span id="cb15-45">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._lck:</span>
<span id="cb15-46">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.maxsize <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">is</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>):</span>
<span id="cb15-47">                isFull <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._data) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.maxsize</span>
<span id="cb15-48">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb15-49">                isFull <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb15-50">        </span>
<span id="cb15-51">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> isFull</span>
<span id="cb15-52"></span>
<span id="cb15-53">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> put(</span>
<span id="cb15-54">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>,</span>
<span id="cb15-55">        item : Any, </span>
<span id="cb15-56">    ) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb15-57">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">Pushing item </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>item<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> to the queue"</span>)</span>
<span id="cb15-58">        </span>
<span id="cb15-59">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._queue_not_full_condition.acquire()</span>
<span id="cb15-60">        </span>
<span id="cb15-61">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">while</span> (<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.full()):</span>
<span id="cb15-62">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._queue_not_full_condition.wait()</span>
<span id="cb15-63">        </span>
<span id="cb15-64">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._data.append(item)</span>
<span id="cb15-65"></span>
<span id="cb15-66">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">Push complete"</span>)</span>
<span id="cb15-67">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"queue : </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>_data<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb15-68">        </span>
<span id="cb15-69">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._queue_not_empty_condition.notify()</span>
<span id="cb15-70"></span>
<span id="cb15-71">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._queue_not_full_condition.release()</span>
<span id="cb15-72">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span></span>
<span id="cb15-73"></span>
<span id="cb15-74"></span>
<span id="cb15-75">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> get(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> Any:</span>
<span id="cb15-76">        </span>
<span id="cb15-77">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._queue_not_empty_condition.acquire()</span>
<span id="cb15-78"></span>
<span id="cb15-79">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">while</span> (<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.empty()):</span>
<span id="cb15-80">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._queue_not_empty_condition.wait()</span>
<span id="cb15-81"></span>
<span id="cb15-82">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">Popping from the queue"</span>)</span>
<span id="cb15-83">        </span>
<span id="cb15-84">        value <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._data[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb15-85">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">del</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._data[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb15-86">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">Popped item </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>value<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> from the queue"</span>)</span>
<span id="cb15-87">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"queue : </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>_data<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb15-88"></span>
<span id="cb15-89">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._queue_not_full_condition.notify()</span>
<span id="cb15-90"></span>
<span id="cb15-91">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._queue_not_empty_condition.release()</span>
<span id="cb15-92">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> value</span>
<span id="cb15-93"></span>
<span id="cb15-94">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> top(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> Any:</span>
<span id="cb15-95">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._lck.acquire()</span>
<span id="cb15-96">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.empty():</span>
<span id="cb15-97">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._lck.release()</span>
<span id="cb15-98">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">raise</span> QueueEmpty(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"queue empty!"</span>)  </span>
<span id="cb15-99"></span>
<span id="cb15-100">        value <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._data[<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.size() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb15-101">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._lck.release()</span>
<span id="cb15-102">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> value</span>
<span id="cb15-103"></span>
<span id="cb15-104"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> push_thread(queue : Queue):</span>
<span id="cb15-105">    </span>
<span id="cb15-106">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>):</span>
<span id="cb15-107">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">try</span>:</span>
<span id="cb15-108">            queue.put(i)</span>
<span id="cb15-109">            time.sleep(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.07</span>)</span>
<span id="cb15-110">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">except</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">Exception</span>:</span>
<span id="cb15-111">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">pass</span></span>
<span id="cb15-112"></span>
<span id="cb15-113"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> pop_thread(queue: Queue):</span>
<span id="cb15-114">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>):</span>
<span id="cb15-115">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">try</span>:</span>
<span id="cb15-116">            item <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> queue.get()</span>
<span id="cb15-117">            time.sleep(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>)</span>
<span id="cb15-118">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">except</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">Exception</span>:</span>
<span id="cb15-119">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">pass</span></span>
<span id="cb15-120"></span>
<span id="cb15-121"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">__name__</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"__main__"</span>:</span>
<span id="cb15-122">    queue <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Queue()</span>
<span id="cb15-123">   </span>
<span id="cb15-124">    </span>
<span id="cb15-125">    t1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> threading.Thread(target<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>push_thread, args<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(queue,))</span>
<span id="cb15-126">    t2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> threading.Thread(target<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>pop_thread, args<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(queue,))</span>
<span id="cb15-127">    </span>
<span id="cb15-128">    t1.start()</span>
<span id="cb15-129">    t2.start()</span>
<span id="cb15-130"></span>
<span id="cb15-131">    t1.join()</span>
<span id="cb15-132">    t2.join()</span>
<span id="cb15-133">    </span>
<span id="cb15-134">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"main() thread finished."</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>
Pushing item 0 to the queue

Push complete
queue : [0]

Popping from the queue

Popped item 0 from the queue
queue : []

Pushing item 1 to the queue

Push complete
queue : [1]

Popping from the queue

Popped item 1 from the queue
queue : []

Pushing item 2 to the queue

Push complete
queue : [2]

Popping from the queue

Popped item 2 from the queue
queue : []

Pushing item 3 to the queue

Push complete
queue : [3]

Pushing item 4 to the queue

Push complete
queue : [3, 4]

Popping from the queue

Popped item 3 from the queue
queue : [4]

Pushing item 5 to the queue

Push complete
queue : [4, 5]

Popping from the queue

Popped item 4 from the queue
queue : [5]

Pushing item 6 to the queue

Push complete
queue : [5, 6]

Pushing item 7 to the queue

Push complete
queue : [5, 6, 7]

Popping from the queue

Popped item 5 from the queue
queue : [6, 7]

Pushing item 8 to the queue

Push complete
queue : [6, 7, 8]

Popping from the queue

Popped item 6 from the queue
queue : [7, 8]

Pushing item 9 to the queue

Push complete
queue : [7, 8, 9]

Popping from the queue

Popped item 7 from the queue
queue : [8, 9]

Popping from the queue

Popped item 8 from the queue
queue : [9]

Popping from the queue

Popped item 9 from the queue
queue : []
main() thread finished.</code></pre>
</div>
</div>
</section>
<section id="semaphores" class="level3">
<h3 class="anchored" data-anchor-id="semaphores">Semaphores</h3>
<p>This is one of the oldest synchronization primitices in the history of CS, invented by the Dutch computer scientist <a href="https://en.wikipedia.org/wiki/Edsger_W._Dijkstra">Edsger W. Djikstra</a>. A semaphore manages an internal counter which is decremented by each <code>acquire()</code> and incremented by each <code>release()</code> call.</p>
</section>
</section>
<section id="events" class="level2">
<h2 class="anchored" data-anchor-id="events">Events</h2>
<p>An <code>Event</code> object is one of the simplest primitives available for synchronization. Internally, the CPython <a href="https://github.com/python/cpython/blob/df5cdc11123a35065bbf1636251447d0bfe789a5/Lib/threading.py#L488">implementation</a> manages a flag that can be set to <code>True</code> with the <code>set()</code> method and reset to <code>False</code> using the <code>clear()</code> method. The <code>wait()</code> method blocks until the flag is <code>True</code>.</p>
<p>When the internal flag is set to <code>True</code>, all threads waiting on the <code>Event</code> are awakened. Threads that call <code>wait()</code> once the flag is <code>True</code> will not block at all.</p>
<p>When the internal flag is reset to <code>False</code>, threads calling <code>wait()</code> will block until <code>set()</code> is called to set the internal flag to <code>True</code> again.</p>
</section>
<section id="the-global-interpreter-lockgil" class="level2">
<h2 class="anchored" data-anchor-id="the-global-interpreter-lockgil">The Global Interpreter Lock(GIL)</h2>
<p>The Python interpreter maintains a reference count of each object in Python code. When references go out of scope, the reference count of the object is decremented and if the reference count equals <img src="https://latex.codecogs.com/png.latex?0">, memory is deallocated(reclaimed). These reference counts are shared state and executing Python bytecode requires acquiring an exclusive lock on the interpreter (shared state). The implication is that the <code>threading</code> library does not offer true hardware concurrency even on multi-core CPUs.</p>
</section>
<section id="asyncio-from-scratch" class="level2">
<h2 class="anchored" data-anchor-id="asyncio-from-scratch"><code>asyncio</code> from scratch</h2>
<section id="generators" class="level3">
<h3 class="anchored" data-anchor-id="generators">Generators</h3>
<div id="04bdd50e" class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb17-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> fib(count: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>):</span>
<span id="cb17-2">    a, b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb17-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(count):</span>
<span id="cb17-4">        a, b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> b, a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b</span>
<span id="cb17-5">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">yield</span> b</span>
<span id="cb17-6"></span>
<span id="cb17-7"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> main():</span>
<span id="cb17-8">    gen <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> fib(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span>
<span id="cb17-9">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(gen)</span>
<span id="cb17-10">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">while</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>:</span>
<span id="cb17-11">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">next</span>(gen))</span>
<span id="cb17-12"></span>
<span id="cb17-13"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">try</span>:</span>
<span id="cb17-14">    main()        </span>
<span id="cb17-15"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">except</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">StopIteration</span>:</span>
<span id="cb17-16">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Stop Iteration."</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>&lt;generator object fib at 0x11e043ca0&gt;
1
1
2
3
5
Stop Iteration.</code></pre>
</div>
</div>
<p>The fibonacci sequence is a staple of generator examples. Each time through the loop we add the previous two numbers together and yield that value resulting in the sequence <img src="https://latex.codecogs.com/png.latex?%5C%7B1,%201,%202,%203,%205,%20%5Cldots%20%5C%7D">. But, when we call this function, we don’t get any of these values directly, instead we get a compiled version of the generator object. The actual code in our function hasn’t even started executing yet.</p>
<p>The generator object can then be iterated over just like a list and the standard <code>next()</code> function from the standard library can be used to iterate just once at a time. Each time we call <code>next()</code> on our generator object, it’s re-entering the function where we left off, preserving the full state and if the function yields another value we get that value as the result value or the return value from the next call. When the generator function completes or returns, it raises a <code>StopIteration</code> exception, just like any other iterator would.</p>
<p>It’s quite common to see generators that yield values out, but it’s also possible to communicate or send values back into the generator from the outside. To do this, we have to replace the use of the <code>next()</code> function with the generator’s <code>send()</code> function.</p>
<div id="2ddd64a2" class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb19-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> counter(start <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, stop <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, step <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>):</span>
<span id="cb19-2">    value <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> start</span>
<span id="cb19-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">while</span> value <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> stop:</span>
<span id="cb19-4">        value <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">yield</span> value</span>
<span id="cb19-5">        value <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> step</span>
<span id="cb19-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">yield</span> value</span>
<span id="cb19-7"></span>
<span id="cb19-8"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> main():</span>
<span id="cb19-9">    gen <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> counter()</span>
<span id="cb19-10">    </span>
<span id="cb19-11">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># prime the generator</span></span>
<span id="cb19-12">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># advance to the next yield statement</span></span>
<span id="cb19-13">    value <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> gen.send(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>)</span>
<span id="cb19-14">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"sent None, got </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>value<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb19-15"></span>
<span id="cb19-16">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">try</span>:</span>
<span id="cb19-17">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">while</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>):</span>
<span id="cb19-18">            next_value <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> gen.send(value)</span>
<span id="cb19-19">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"sent </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>value<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, got </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>next_value<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb19-20">            value <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> next_value</span>
<span id="cb19-21">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">except</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">StopIteration</span>:</span>
<span id="cb19-22">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"StopIteration."</span>)</span>
<span id="cb19-23"></span>
<span id="cb19-24">main()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>sent None, got 0
sent 0, got 1
sent 1, got 2
sent 2, got 3
sent 3, got 4
sent 4, got 5
sent 5, got 6
sent 6, got 7
sent 7, got 8
sent 8, got 9
sent 9, got 10
StopIteration.</code></pre>
</div>
</div>
<p>Congratulation, now you’ve just discovered coroutines. Python’s had them hiding in plain sight for years. But, how do we actually use this to run concurrent tasks?</p>
<p>We are going to write an event loop that calls <code>send</code> on each generator object. And rather than looking for a flag, we catch the <code>StopIteration</code> exception and mark those generators and tasks as completed. The <code>StopIteration</code> itself contains the return value from these generators. So, we save those for the final result. Lastly, we also capture intermediate yielded values and send them back on the next iteration, which enables coroutines to call other coroutines.</p>
<div id="c67a076e" class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb21-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> typing <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Generator, Any, List, Iterable</span>
<span id="cb21-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> time</span>
<span id="cb21-3"></span>
<span id="cb21-4"></span>
<span id="cb21-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> wait(tasks: Iterable[Generator]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> List[Any]:</span>
<span id="cb21-6">    pending <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(tasks)</span>
<span id="cb21-7">    tasks <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {task: <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> task <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> pending}</span>
<span id="cb21-8">    before <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> time.time()</span>
<span id="cb21-9"></span>
<span id="cb21-10">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">while</span> pending:</span>
<span id="cb21-11">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> gen <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> pending:</span>
<span id="cb21-12">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">try</span>:</span>
<span id="cb21-13">                tasks[gen] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> gen.send(tasks[gen])</span>
<span id="cb21-14">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">except</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">StopIteration</span> <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> e:</span>
<span id="cb21-15">                tasks[gen] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> e.args[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb21-16">                pending.remove(gen)</span>
<span id="cb21-17"></span>
<span id="cb21-18">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"duration = </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>time<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>time() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> before<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.3}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb21-19">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(tasks.values())</span></code></pre></div>
</div>
<p>This means that we can now <code>yield from</code> another coroutine to call into it. Together, this makes our coroutines look and feel more like standard functions. But, they are still yielding control on their terms, and get to continue where they left off when its their turn again.</p>
<div id="20596b45" class="cell" data-execution_count="12">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb22-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> sleep(duration: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>):</span>
<span id="cb22-2">    now <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> time.time()</span>
<span id="cb22-3">    threshold <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> now <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> duration</span>
<span id="cb22-4"></span>
<span id="cb22-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">while</span> now <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> threshold:</span>
<span id="cb22-6">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">yield</span></span>
<span id="cb22-7">        now <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> time.time()</span>
<span id="cb22-8"></span>
<span id="cb22-9"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> bar():</span>
<span id="cb22-10">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">yield</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">from</span> sleep(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>)</span>
<span id="cb22-11">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">123</span></span>
<span id="cb22-12"></span>
<span id="cb22-13"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> foo():</span>
<span id="cb22-14">    value <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">yield</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">from</span> bar()</span>
<span id="cb22-15">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> value</span>
<span id="cb22-16"></span>
<span id="cb22-17"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> main():</span>
<span id="cb22-18">    tasks <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [foo(), foo()]</span>
<span id="cb22-19">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(wait(tasks))</span>
<span id="cb22-20"></span>
<span id="cb22-21">main()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>duration = 0.1
[123, 123]</code></pre>
</div>
</div>
<p>We can create a pair of coroutines from the <code>foo()</code> functions and pass them to the event loop. It will follow execution from <code>foo</code> into <code>bar</code> and then into the <code>sleep</code> coroutine. In there, it will continue yielding back into the event loop until the time duration is up. Then, on the next iteration, it will <code>return</code> control to <code>bar()</code> which returns the value back to <code>foo()</code> which finally completes and returns the value.</p>
<p>To be clear, at each <code>yield()</code>, our event loop is cycling to the next pending task, giving us the cooperative multitasking concurrency that we have been looking for.</p>


</section>
</section>

 ]]></description>
  <category>Python</category>
  <guid>http://quantdev.blog/posts/diy-asyncio/index.html</guid>
  <pubDate>Fri, 28 Feb 2025 00:00:00 GMT</pubDate>
  <media:content url="http://quantdev.blog/posts/diy-asyncio/python.jpeg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>A thread-safe queue implementation</title>
  <dc:creator>Quasar </dc:creator>
  <link>http://quantdev.blog/posts/thread-safe-queues/index.html</link>
  <description><![CDATA[ 




<section id="producer-consumer-problem" class="level2">
<h2 class="anchored" data-anchor-id="producer-consumer-problem">Producer-consumer problem</h2>
<p>In the <em>producer-consumer problem</em>, we have two classes of threads, producers and consumers and a buffer containing a fixed number of slots. A producer thread attempts to put something into the next empty buffer slot, a consumer thread attempts to take something out of the next occupied buffer slot. The synchronization conditions are that producers cannot proceed unless there are empty slots and consumers cannot proceed unless there are occupied slots. The problem occurs because of the different rates at which producers deposit and consumers exhaust data.</p>
<p>This is a classic, but frequently occurring synchronization problem. For example, the heart of the implementation of UNIX pipes is an instance of this problem.</p>
</section>
<section id="ring-buffer" class="level2">
<h2 class="anchored" data-anchor-id="ring-buffer">Ring buffer</h2>
<p>Consider a single, fixed-size buffer as if it were connected end-to-end, such that the oldest entry is processed first. This is a circular FIFO queue.</p>
<p>What do we use SPSC FIFO queues for? In the industry, you often have a pipeline of processes. For example, you have one thread reading from sockets, another thread that handles the messages from the sockets and maybe processes them and produces a result and a third thread writes a response to the network. Those can be connected by SPSC FIFO queues. There’s a couple of advantages to this. All these advantages and disadvantages are subject to measurement, so always measure. It may improve the throughput over just a single thread doing all <img src="https://latex.codecogs.com/png.latex?3"> of these operations, in fact, I’ll be surprised if it didn’t. It also should improve the resiliency of the application to spikes in message traffic. Some of the disadvantages are that you have to manage 3 threads and it probably uses more memory, because each of the FIFO queues needs place to store its messages.</p>
</section>
<section id="basic-functionalities-to-expect-from-a-thread-safe-queue" class="level2">
<h2 class="anchored" data-anchor-id="basic-functionalities-to-expect-from-a-thread-safe-queue">Basic functionalities to expect from a thread-safe queue</h2>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp number-lines code-with-copy"><code class="sourceCode cpp"><span id="cb1-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;gtest/gtest.h&gt;</span></span>
<span id="cb1-2"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;thread&gt;</span></span>
<span id="cb1-3"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;vector&gt;</span></span>
<span id="cb1-4"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">"threadsafe_queue.h"</span></span>
<span id="cb1-5"></span>
<span id="cb1-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Test default constructor</span></span>
<span id="cb1-7">TEST<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>ThreadSafeQueueTest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> DefaultConstructorTest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb1-8">    dev<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>threadsafe_queue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> queue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-9">    EXPECT_EQ<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>queue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>empty<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(),</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">true</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb1-10">    EXPECT_EQ<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>queue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(),</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb1-11"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb1-12"></span>
<span id="cb1-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Test push and front</span></span>
<span id="cb1-14">TEST<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>ThreadSafeQueueTest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> PushAndFrontTest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb1-15">    dev<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>threadsafe_queue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> queue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-16">    queue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>push<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb1-17">    EXPECT_EQ<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>queue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>front<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(),</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb1-18">    EXPECT_EQ<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>queue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(),</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb1-19">    EXPECT_EQ<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>queue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>empty<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(),</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">false</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb1-20"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb1-21"></span>
<span id="cb1-22"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Test push and back</span></span>
<span id="cb1-23">TEST<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>ThreadSafeQueueTest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> PushAndBackTest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb1-24">    dev<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>threadsafe_queue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> queue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-25">    queue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>push<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb1-26">    queue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>push<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb1-27">    EXPECT_EQ<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>queue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>back<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(),</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb1-28">    EXPECT_EQ<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>queue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(),</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb1-29"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb1-30"></span>
<span id="cb1-31"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Test try_pop (non-blocking)</span></span>
<span id="cb1-32">TEST<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>ThreadSafeQueueTest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> TryPopTest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb1-33">    dev<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>threadsafe_queue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> queue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-34">    queue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>push<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb1-35">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">auto</span> item <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> queue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>try_pop<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb1-36">    EXPECT_TRUE<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>item<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>has_value<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">());</span></span>
<span id="cb1-37">    EXPECT_EQ<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>item<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>value<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(),</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb1-38">    EXPECT_EQ<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>queue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>empty<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(),</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">true</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb1-39"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb1-40"></span>
<span id="cb1-41"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Test pop (blocking)</span></span>
<span id="cb1-42">TEST<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>ThreadSafeQueueTest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> BlockingPopTest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb1-43">    dev<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>threadsafe_queue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> queue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-44"></span>
<span id="cb1-45">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>thread<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> </span>producer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">([&amp;</span>queue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb1-46">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>this_thread<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">::</span>sleep_for<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>chrono<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">::</span>milliseconds<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">));</span></span>
<span id="cb1-47">        queue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>push<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb1-48">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">});</span></span>
<span id="cb1-49"></span>
<span id="cb1-50">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">auto</span> item <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> queue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>pop<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb1-51">    EXPECT_EQ<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>item<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb1-52">    EXPECT_EQ<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>queue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>empty<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(),</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">true</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb1-53"></span>
<span id="cb1-54">    producer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>join<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb1-55"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb1-56"></span>
<span id="cb1-57"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Test emplace</span></span>
<span id="cb1-58">TEST<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>ThreadSafeQueueTest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> EmplaceTest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb1-59">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> Point <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb1-60">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-61">        Point<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">),</span> y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span></span>
<span id="cb1-62">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb1-63"></span>
<span id="cb1-64">    dev<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>threadsafe_queue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>Point<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> queue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-65">    queue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>emplace<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb1-66">    EXPECT_EQ<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>queue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>front<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">().</span>x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb1-67">    EXPECT_EQ<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>queue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>front<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">().</span>y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb1-68"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb1-69"></span>
<span id="cb1-70"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Test thread safety with multiple producers and consumers</span></span>
<span id="cb1-71">TEST<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>ThreadSafeQueueTest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> MultiThreadedTest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb1-72">    dev<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>threadsafe_queue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> queue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-73">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> num_items <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-74"></span>
<span id="cb1-75">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>thread<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> </span>producer1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">([&amp;</span>queue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb1-76">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> num_items<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb1-77">            queue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>push<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb1-78">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb1-79">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">});</span></span>
<span id="cb1-80"></span>
<span id="cb1-81">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>thread<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> </span>producer2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">([&amp;</span>queue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb1-82">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> num_items<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> num_items<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb1-83">            queue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>push<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb1-84">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb1-85">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">});</span></span>
<span id="cb1-86"></span>
<span id="cb1-87">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>vector<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> consumed_items<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-88">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>mutex<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> </span>mtx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-89">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>thread<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> </span>consumer1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">([&amp;</span>queue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span>consumed_items<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span>mtx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb1-90">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> num_items<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb1-91">            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb1-92">                <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>unique_lock<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>mutex<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> unique_lck<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>mtx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb1-93">                consumed_items<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>push_back<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>queue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>pop<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">());</span></span>
<span id="cb1-94">            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb1-95">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb1-96">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">});</span></span>
<span id="cb1-97"></span>
<span id="cb1-98">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>thread<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> </span>consumer2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">([&amp;</span>queue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span>consumed_items<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span>mtx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb1-99">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> num_items<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb1-100">            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb1-101">                <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>unique_lock<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>mutex<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> unique_lck<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>mtx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb1-102">                consumed_items<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>push_back<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>queue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>pop<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">());</span></span>
<span id="cb1-103">            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb1-104">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb1-105">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">});</span></span>
<span id="cb1-106"></span>
<span id="cb1-107">    producer1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>join<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb1-108">    producer2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>join<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb1-109">    consumer1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>join<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb1-110">    consumer2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>join<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb1-111"></span>
<span id="cb1-112">    EXPECT_EQ<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>consumed_items<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(),</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> num_items<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb1-113">    EXPECT_EQ<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>queue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>empty<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(),</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">true</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb1-114"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb1-115"></span>
<span id="cb1-116"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Test empty queue behavior</span></span>
<span id="cb1-117">TEST<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>ThreadSafeQueueTest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> EmptyQueueTest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb1-118">    dev<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>threadsafe_queue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> queue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-119">    EXPECT_EQ<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>queue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>empty<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(),</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">true</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb1-120">    EXPECT_EQ<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>queue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(),</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb1-121"></span>
<span id="cb1-122">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">auto</span> item <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> queue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>try_pop<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb1-123">    EXPECT_FALSE<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>item<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>has_value<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">());</span></span>
<span id="cb1-124"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb1-125"></span>
<span id="cb1-126"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Test copy constructor</span></span>
<span id="cb1-127">TEST<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>ThreadSafeQueueTest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> CopyConstructorTest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb1-128">    dev<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>threadsafe_queue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> queue1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-129">    queue1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>push<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb1-130">    queue1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>push<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">17</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb1-131"></span>
<span id="cb1-132">    dev<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>threadsafe_queue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> queue2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>queue1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb1-133">    EXPECT_EQ<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>queue2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(),</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb1-134">    EXPECT_EQ<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>queue2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>front<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(),</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb1-135">    EXPECT_EQ<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>queue2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>back<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(),</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">17</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb1-136"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb1-137"></span>
<span id="cb1-138"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Test size</span></span>
<span id="cb1-139">TEST<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>ThreadSafeQueueTest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> SizeTest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb1-140">    dev<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>threadsafe_queue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> queue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-141">    queue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>push<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb1-142">    queue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>push<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb1-143">    queue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>push<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb1-144">    EXPECT_EQ<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>queue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(),</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb1-145"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="basic-threadsafe_queue-implementation" class="level2">
<h2 class="anchored" data-anchor-id="basic-threadsafe_queue-implementation">Basic <code>threadsafe_queue</code> implementation</h2>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp number-lines code-with-copy"><code class="sourceCode cpp"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Ref: Asynchronous Programming with C++</span></span>
<span id="cb2-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Javier Reguara Salgado, Juan Antonio Rufes</span></span>
<span id="cb2-3"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;iostream&gt;</span></span>
<span id="cb2-4"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;shared_mutex&gt;</span></span>
<span id="cb2-5"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;queue&gt;</span></span>
<span id="cb2-6"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;condition_variable&gt;</span></span>
<span id="cb2-7"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;optional&gt;</span></span>
<span id="cb2-8"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;type_traits&gt;</span></span>
<span id="cb2-9"></span>
<span id="cb2-10"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">namespace</span> dev<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb2-11">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">template</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">typename</span> T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb2-12">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> threadsafe_queue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb2-13">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb2-14">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>queue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_queue</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-15">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mutable</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>mutex<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> </span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_mutex</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-16">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>condition_variable<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> </span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">not_empty_</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-17"></span>
<span id="cb2-18">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb2-19">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">using</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">value_type</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-20">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">using</span> reference <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;;</span></span>
<span id="cb2-21">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">using</span> const_reference <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;;</span></span>
<span id="cb2-22"></span>
<span id="cb2-23">        threadsafe_queue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">default</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-24"></span>
<span id="cb2-25">        threadsafe_queue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> threadsafe_queue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> other<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">){</span></span>
<span id="cb2-26">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>unique_lock<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>mutex<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> unique_lck<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>other<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_mutex</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb2-27">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_queue</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> other<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_queue</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-28">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb2-29"></span>
<span id="cb2-30">        threadsafe_queue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">operator</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=(</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> threadsafe_queue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">delete</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-31">        </span>
<span id="cb2-32">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">value_type</span> front<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(){</span></span>
<span id="cb2-33">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>unique_lock<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>mutex<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> unique_lck<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_mutex</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb2-34">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_queue</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>front<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb2-35">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb2-36"></span>
<span id="cb2-37">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">value_type</span> back<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(){</span></span>
<span id="cb2-38">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>unique_lock<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>mutex<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> unique_lck<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_mutex</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb2-39">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_queue</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>back<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb2-40">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb2-41"></span>
<span id="cb2-42">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">bool</span> empty<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(){</span></span>
<span id="cb2-43">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>unique_lock<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>mutex<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> unique_lck<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_mutex</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb2-44">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_queue</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>empty<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb2-45">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb2-46"></span>
<span id="cb2-47">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>size_t<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> </span>size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(){</span></span>
<span id="cb2-48">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>unique_lock<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>mutex<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> unique_lck<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_mutex</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb2-49">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_queue</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb2-50">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb2-51"></span>
<span id="cb2-52">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// non-blocking</span></span>
<span id="cb2-53">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">bool</span> try_push<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>const_reference item<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">){</span></span>
<span id="cb2-54">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>unique_lock<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>mutex<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> unique_lck<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_mutex</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>try_to_lock<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb2-55">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(!</span>unique_lck<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb2-56">                <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">false</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-57"></span>
<span id="cb2-58">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">constexpr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>is_nothrow_move_constructible_v<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;){</span></span>
<span id="cb2-59">                <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_queue</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>push<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>move<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>item<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">));</span></span>
<span id="cb2-60">            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb2-61">                <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_queue</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>push<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>item<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb2-62">            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb2-63">            unique_lck<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>unlock<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb2-64">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">not_empty_</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>notify_one<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb2-65">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">true</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-66">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb2-67"></span>
<span id="cb2-68">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// blocking</span></span>
<span id="cb2-69">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> push<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>const_reference item<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">){</span></span>
<span id="cb2-70">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>unique_lock<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>mutex<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> unique_lck<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_mutex</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb2-71">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_queue</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>push<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>item<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb2-72">            unique_lck<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>unlock<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb2-73">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">not_empty_</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>notify_one<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb2-74">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb2-75"></span>
<span id="cb2-76">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// non-blocking</span></span>
<span id="cb2-77">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>optional<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> try_pop<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span></span>
<span id="cb2-78">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb2-79">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>unique_lock<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>mutex<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> unique_lck<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_mutex</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>try_to_lock<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb2-80">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(!</span>unique_lck <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">||</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_queue</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>empty<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">())</span></span>
<span id="cb2-81">                <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>nullopt<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-82"></span>
<span id="cb2-83">            <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">value_type</span> item<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-84">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">constexpr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>is_nothrow_move_assignable_v<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;){</span></span>
<span id="cb2-85">                item <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>move<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_queue</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>front<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">());</span></span>
<span id="cb2-86">            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb2-87">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb2-88">                item <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_queue</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>front<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb2-89">            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb2-90">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_queue</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>pop<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb2-91">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> item<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-92">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb2-93"></span>
<span id="cb2-94">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// blocking</span></span>
<span id="cb2-95">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">value_type</span> pop<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(){</span></span>
<span id="cb2-96">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>unique_lock<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>mutex<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> unique_lck<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_mutex</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb2-97">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">not_empty_</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>wait<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>unique_lck<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">this</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">](){</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_queue</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>empty<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">});</span></span>
<span id="cb2-98"></span>
<span id="cb2-99">            <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">value_type</span> item<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-100">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">constexpr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>is_nothrow_move_assignable_v<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;){</span></span>
<span id="cb2-101">                item <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>move<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_queue</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>front<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">());</span></span>
<span id="cb2-102">            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb2-103">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb2-104">                item <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_queue</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>front<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb2-105">            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb2-106">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_queue</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>pop<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb2-107">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> item<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-108">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb2-109"></span>
<span id="cb2-110">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// blocking</span></span>
<span id="cb2-111">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">template</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">typename</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...</span> Args<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb2-112">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> emplace<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>Args<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;...</span> args<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">){</span></span>
<span id="cb2-113">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>unique_lock<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>mutex<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> unique_lck<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_mutex</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb2-114">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_queue</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>emplace<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>forward<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>Args<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;(</span>args<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)...);</span></span>
<span id="cb2-115">            unique_lck<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>unlock<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb2-116">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">not_empty_</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>notify_one<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb2-117">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb2-118">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb2-119"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p>It would be The use of a mutex to protect the entire stack data-structure limits the concurrency supported by this queue; although multiple threads might be blocked on the queue in various member functions, only one thread can be doing any work at the time. This restriction comes from the use of <code>std::queue&lt;T&gt;</code> in the implementation. If we write a detailed implementation of the data-structure, we can provide more fine-grained locking and allow a higher level of concurrency.</p>
</section>
<section id="semaphores" class="level2">
<h2 class="anchored" data-anchor-id="semaphores">Semaphores</h2>
<p>C++20 introduces new synchronization primitives to write multi-threaded applications .</p>
<p>A <strong>semaphore</strong> is a counter that manages the numberof permits available for accessing a share resource. Semaphores can be classified into two main types:</p>
<ul>
<li><strong>Binary Semaphore</strong>. It has only <img src="https://latex.codecogs.com/png.latex?2"> states: <img src="https://latex.codecogs.com/png.latex?0"> and <img src="https://latex.codecogs.com/png.latex?1">. Event though a binary semaphore is conceptually like a mutex, there are some differences between a binary semaphore and a mutex, that we’ll explore later.</li>
<li><strong>Counting Semaphore</strong>. It can have a value greater than <img src="https://latex.codecogs.com/png.latex?1"> and is used to control access to a resource that has a limited number of instances.</li>
</ul>
<p>C++20 implements both binary and counting semaphores.</p>
<section id="binary-semaphores" class="level3">
<h3 class="anchored" data-anchor-id="binary-semaphores">Binary Semaphores</h3>
<p>A binary semaphore is a synchronization primitive that can be used to control access to a shared resource. It has two states: <img src="https://latex.codecogs.com/png.latex?0"> and <img src="https://latex.codecogs.com/png.latex?1">. A semaphore with a value of <img src="https://latex.codecogs.com/png.latex?0"> indicates that the resource is unavailable, while a semaphore with a value of <img src="https://latex.codecogs.com/png.latex?1"> indicates that the resource is available.</p>
<p>The most significant difference between mutexes and semaphores is that threads that have acquired a mutex have exclusive ownership of it. Only the thread owning the mutex can release it. Semaphores can be signaled by any thread. A mutex is a locking mechanism for a critical section, whereas a semaphore is more like a signaling mechanism. For this reason, semaphores are commonly used for signaling rather than for mutual exlusion.</p>
<p>In C++20, <code>std::binary_semaphore</code> is an alias for the specialization of <code>std::counting_semaphore</code> with <code>LeastMaxValue</code> being <img src="https://latex.codecogs.com/png.latex?1">.</p>
<p>Binary semaphores must be initialized with either <img src="https://latex.codecogs.com/png.latex?1"> or <img src="https://latex.codecogs.com/png.latex?0"> as follows:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp number-lines code-with-copy"><code class="sourceCode cpp"><span id="cb3-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>binary_semaphore<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> </span>smphr1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb3-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>binary_semaphore<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> </span>smphr2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span></code></pre></div>
<p>If the initial value is <code>0</code>, acquiring the semaphore will block the thread trying to acquire it, and before it can be acquired, it must be released by another thread. Acquiring the semaphore decreases the counter, and releasing it increases the counter.</p>
</section>
<section id="counting-semaphores" class="level3">
<h3 class="anchored" data-anchor-id="counting-semaphores">Counting semaphores</h3>
<p>A counting semaphore allows access to a shared resource by more than one thread. The counter can be initialized to an arbitrary number, and it will be decreased every time a thread acquires the semaphore.</p>
<p>We can design a thread-safe queue using semaphores instead of condition variables to synchronize access to the queue.</p>
<p>We code up an unbounded <code>queue</code> implemented as a circular queue with doubling.</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp number-lines code-with-copy"><code class="sourceCode cpp"><span id="cb4-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;iostream&gt;</span></span>
<span id="cb4-2"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;shared_mutex&gt;</span></span>
<span id="cb4-3"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;semaphore&gt;</span></span>
<span id="cb4-4"></span>
<span id="cb4-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">namespace</span> dev <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb4-6">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/* </span></span>
<span id="cb4-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    A queue implements a first-in-first-out data-structure allowing </span></span>
<span id="cb4-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    enqueuing (adding) items to the rear and dequeuing(removing)</span></span>
<span id="cb4-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    them from the front.</span></span>
<span id="cb4-10"></span>
<span id="cb4-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    My implementation uses a circular queue with doubling - the simplest</span></span>
<span id="cb4-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    and reasonably efficient choice.</span></span>
<span id="cb4-13"></span>
<span id="cb4-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    The interface design conforms to the standard library std::queue&lt;T&gt;</span></span>
<span id="cb4-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    specification.</span></span>
<span id="cb4-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    */</span></span>
<span id="cb4-17">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">template</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">typename</span> T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb4-18">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> queue <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb4-19">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb4-20">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">enum</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>min_capacity <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb4-21">        T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_ring_buffer</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-22">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_front</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-23">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_rear</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-24">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_capacity</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-25"></span>
<span id="cb4-26">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb4-27">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">using</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">value_type</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-28">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">using</span> reference <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;;</span></span>
<span id="cb4-29"></span>
<span id="cb4-30">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/* Constructors */</span></span>
<span id="cb4-31"></span>
<span id="cb4-32">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Default constructor</span></span>
<span id="cb4-33">        queue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> queue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>min_capacity<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">){}</span></span>
<span id="cb4-34"></span>
<span id="cb4-35">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Parametrized Constructor</span></span>
<span id="cb4-36">        queue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> capacity<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb4-37">            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_ring_buffer</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">nullptr</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb4-38">            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_front</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb4-39">            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_rear</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb4-40">            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_capacity</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb4-41">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb4-42">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_ring_buffer</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">static_cast</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*&gt;(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">operator</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">new</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>capacity <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">sizeof</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)));</span></span>
<span id="cb4-43">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_capacity</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> capacity<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-44">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb4-45"></span>
<span id="cb4-46">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/* Destructor */</span></span>
<span id="cb4-47">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>queue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb4-48">            clear<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb4-49">            <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">operator</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">delete</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_ring_buffer</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb4-50">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb4-51"></span>
<span id="cb4-52">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/* Copy constructor </span></span>
<span id="cb4-53"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        * Perform a deep-copy of the contents of the queue</span></span>
<span id="cb4-54"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        */</span></span>
<span id="cb4-55">        queue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> queue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> other<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> </span>
<span id="cb4-56">            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> queue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>other<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_capacity</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Allocation step</span></span>
<span id="cb4-57">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb4-58">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/* Call the copy constructor of T </span></span>
<span id="cb4-59"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            * placing it directly into the pre-allocated</span></span>
<span id="cb4-60"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            * storage at memory address &amp;m_ring_buffer[i]</span></span>
<span id="cb4-61"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            */</span></span>
<span id="cb4-62">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span>i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> other<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();++</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb4-63">                <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">new</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(&amp;</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_ring_buffer</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">])</span> T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>other<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]);</span></span>
<span id="cb4-64">                <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_rear</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-65">            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb4-66">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb4-67"></span>
<span id="cb4-68">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/* Swap the contents of lhs and rhs member-by-member */</span></span>
<span id="cb4-69">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">friend</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> swap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>queue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> lhs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> queue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> rhs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb4-70">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>swap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>lhs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_ring_buffer</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> rhs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_ring_buffer</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb4-71">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>swap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>lhs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_front</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> rhs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_front</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb4-72">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>swap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>lhs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_rear</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> rhs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_rear</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb4-73">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>swap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>lhs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_capacity</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> rhs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_capacity</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb4-74">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb4-75"></span>
<span id="cb4-76">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/* Copy-assignment */</span></span>
<span id="cb4-77">        queue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">operator</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=(</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> queue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> other<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb4-78">            queue temp<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span> other <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span>    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Copy-construct</span></span>
<span id="cb4-79">            swap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(*</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">this</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> temp<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span>      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// and swap idiom</span></span>
<span id="cb4-80">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(*</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">this</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb4-81">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb4-82"></span>
<span id="cb4-83">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/* Move constructor */</span></span>
<span id="cb4-84">        queue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>queue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;</span> other<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb4-85">            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_ring_buffer</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>move<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>other<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_ring_buffer</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb4-86">            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_front</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>move<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>other<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_front</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb4-87">            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_rear</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>move<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>other<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_rear</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb4-88">            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_capacity</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>move<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>other<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_capacity</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb4-89">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb4-90">            other<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_ring_buffer</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">nullptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-91">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb4-92"></span>
<span id="cb4-93">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/* Move assignment */</span></span>
<span id="cb4-94">        queue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">operator</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=(</span>queue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;</span> other<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb4-95">            queue temp<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>move<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>other<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb4-96">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>swap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(*</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">this</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> temp<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb4-97">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(*</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">this</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb4-98">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb4-99"></span>
<span id="cb4-100">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/* Capacity*/</span></span>
<span id="cb4-101"></span>
<span id="cb4-102">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/* Checks whether the queue is empty */</span></span>
<span id="cb4-103">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">bool</span> empty<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span></span>
<span id="cb4-104">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb4-105">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_rear</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_front</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb4-106">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb4-107"></span>
<span id="cb4-108">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">bool</span> full<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb4-109">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_rear</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_front</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_capacity</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb4-110">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb4-111"></span>
<span id="cb4-112">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/* Returns the number of elements in the queue*/</span></span>
<span id="cb4-113">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb4-114">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_rear</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_front</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb4-115">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb4-116"></span>
<span id="cb4-117">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> capacity<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb4-118">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_capacity</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-119">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb4-120"></span>
<span id="cb4-121">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/* Modifiers */</span></span>
<span id="cb4-122"></span>
<span id="cb4-123">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/* Double the capacity of the queue */</span></span>
<span id="cb4-124">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> resize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span></span>
<span id="cb4-125">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb4-126">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>cout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> &lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Resizing the queue from "</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_capacity</span> </span>
<span id="cb4-127">                <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" to "</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_capacity</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" elements."</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-128"></span>
<span id="cb4-129">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// 1. Allocation step</span></span>
<span id="cb4-130">            T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> new_array <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">static_cast</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*&gt;(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">operator</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">new</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_capacity</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">sizeof</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)));</span></span>
<span id="cb4-131"></span>
<span id="cb4-132">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>cout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> &lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Allocation complete."</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-133"></span>
<span id="cb4-134">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// 2. Copy over the elements of the queue to the newly</span></span>
<span id="cb4-135">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// allocated storage.</span></span>
<span id="cb4-136">            <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> new_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb4-137">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span>i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> new_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;++</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb4-138">                <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">new</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(&amp;</span>new_array<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">])</span> T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>move<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_ring_buffer</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[(</span>i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_front</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_capacity</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]));</span></span>
<span id="cb4-139">            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb4-140"></span>
<span id="cb4-141">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>cout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> &lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Copy-construction complete"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-142"></span>
<span id="cb4-143">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// 3. Destroy the old array</span></span>
<span id="cb4-144">            clear<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb4-145">            <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">operator</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">delete</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_ring_buffer</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb4-146">            </span>
<span id="cb4-147">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>cout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> &lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Destruction of old array complete"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-148">            </span>
<span id="cb4-149">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Re-wire m_ring_buffer, set front, rear and capacity</span></span>
<span id="cb4-150">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_ring_buffer</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> new_array<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-151">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_front</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-152">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_rear</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> new_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-153">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_capacity</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-154">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb4-155"></span>
<span id="cb4-156">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/* Push the given value to the end of the queue */</span></span>
<span id="cb4-157">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> push<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> value<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb4-158">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>cout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> &lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Pushing "</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> value <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" to the queue"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-159">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>full<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">())</span></span>
<span id="cb4-160">                resize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb4-161">            <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">new</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(&amp;</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_ring_buffer</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_rear</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_capacity</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)])</span> T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>value<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb4-162">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>cout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> &lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Pushed "</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> value <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" to the queue"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-163">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_rear</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++;</span></span>
<span id="cb4-164">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb4-165"></span>
<span id="cb4-166">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> push<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;</span> value<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb4-167">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>cout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> &lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Pushing "</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> value <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" to the queue"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-168">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>full<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">())</span></span>
<span id="cb4-169">                resize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb4-170">            <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">new</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(&amp;</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_ring_buffer</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_rear</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_capacity</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)])</span> T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>move<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>value<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">));</span></span>
<span id="cb4-171">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_rear</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++;</span></span>
<span id="cb4-172">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb4-173"></span>
<span id="cb4-174">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/* Removes an element from the front of the queue */</span></span>
<span id="cb4-175">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> pop<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb4-176">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_ring_buffer</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_front</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_capacity</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">].~</span>T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb4-177">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_front</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++;</span></span>
<span id="cb4-178">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb4-179"></span>
<span id="cb4-180">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/* Element access */</span></span>
<span id="cb4-181"></span>
<span id="cb4-182">        T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">operator</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[](</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb4-183">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_ring_buffer</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_front</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_capacity</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb4-184">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb4-185"></span>
<span id="cb4-186">        T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">operator</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[](</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb4-187">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_ring_buffer</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_front</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_capacity</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb4-188">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb4-189"></span>
<span id="cb4-190">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/* Returns a reference to the first element in the queue */</span></span>
<span id="cb4-191">        T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> front<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb4-192">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_ring_buffer</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_front</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_capacity</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb4-193">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb4-194"></span>
<span id="cb4-195">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/* Return a reference to the last element in the queue */</span></span>
<span id="cb4-196">        T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> back<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb4-197">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_ring_buffer</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_rear</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_capacity</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb4-198">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb4-199"></span>
<span id="cb4-200">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb4-201">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/* Helper function to clear the queue */</span></span>
<span id="cb4-202">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> clear<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb4-203">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb4-204">                <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_ring_buffer</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_front</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_capacity</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">].~</span>T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb4-205">            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb4-206">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb4-207">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb4-208"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb4-209"></span>
<span id="cb4-210"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> main<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span></span>
<span id="cb4-211"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb4-212">    dev<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>queue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">double</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> q<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-213">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>cout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> &lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Queue capacity = "</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> q<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>capacity<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb4-214">    </span>
<span id="cb4-215">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">double</span> i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span>i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">10.0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++)</span></span>
<span id="cb4-216">        q<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>push<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb4-217">    </span>
<span id="cb4-218">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>cout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> &lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Queue capacity = "</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> q<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>capacity<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb4-219"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p><a href="https://godbolt.org/z/7xbY4x5x3">Play on Compiler Explorer</a></p>
<p>Next, we code up the <code>semaphore_queue</code> class that uses semaphores instead of condition variables as the synchronization mechanism.</p>
</section>
</section>
<section id="spmc-queues-and-coding-up-a-threadpool" class="level2">
<h2 class="anchored" data-anchor-id="spmc-queues-and-coding-up-a-threadpool">SPMC queues and coding up a <code>ThreadPool</code></h2>
<p>A <em>thread-pool</em> is a group of pre-instantiated, idle threads which stand ready to be given work. These are preferred over instantiating new threads for each task whenever there are a large number of short tasks to be done rather than a small number of long ones. This prevents having to incur the overhead of creating a thread a large number of times and starvation of threads.</p>
<p>The <code>ThreadPool</code> class has a container for the worker threads as one of its member-variables.</p>
<p>When a <em>thread-pool</em> is handed a <code>Task</code>, it is added to a SPMC queue. If a thread from the <code>ThreadPool</code> is idle, it can <code>pop()</code> the next task off the <code>TaskQueue</code> and executes it. Once the execution is complete, the thread hands itself back to the pool to be put into the container for reuse and until the <code>queue_not_empty_cond</code> condition is met, and the cycle repeats.</p>


</section>

 ]]></description>
  <category>C++</category>
  <guid>http://quantdev.blog/posts/thread-safe-queues/index.html</guid>
  <pubDate>Sun, 23 Feb 2025 00:00:00 GMT</pubDate>
  <media:content url="http://quantdev.blog/posts/thread-safe-queues/cpp.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Thread-Safe Stack Implementation</title>
  <dc:creator>Quasar </dc:creator>
  <link>http://quantdev.blog/posts/thread-safe-stack/index.html</link>
  <description><![CDATA[ 




<section id="basic-thread-safe-stack-and-queue" class="level1">
<h1>Basic thread-safe stack and queue</h1>
<p>We can use C++ synchronization primitives to implement a basic thread-safe stack and queue.</p>
<section id="thread-safe-stack" class="level2">
<h2 class="anchored" data-anchor-id="thread-safe-stack">Thread-safe stack</h2>
</section>
<section id="basic-functionalities-expected-from-a-thread-safe-stack" class="level2">
<h2 class="anchored" data-anchor-id="basic-functionalities-expected-from-a-thread-safe-stack">Basic functionalities expected from a thread-safe stack</h2>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp number-lines code-with-copy"><code class="sourceCode cpp"><span id="cb1-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;gtest/gtest.h&gt;</span></span>
<span id="cb1-2"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">"threadsafe_stack.h"</span></span>
<span id="cb1-3"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;thread&gt;</span></span>
<span id="cb1-4"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;vector&gt;</span></span>
<span id="cb1-5"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;algorithm&gt;</span></span>
<span id="cb1-6"></span>
<span id="cb1-7">TEST<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>ThreadSafeStackTest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> PushAndTopTest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb1-8">    dev<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>threadsafe_stack<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> stack<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-9">    stack<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>push<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb1-10">    EXPECT_EQ<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>stack<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>top<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(),</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb1-11"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb1-12"></span>
<span id="cb1-13">TEST<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>ThreadSafeStackTest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> PopTest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb1-14">    dev<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>threadsafe_stack<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> stack<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-15">    stack<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>push<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb1-16">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">auto</span> popped <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stack<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>pop<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb1-17">    EXPECT_TRUE<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>popped<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>has_value<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">());</span></span>
<span id="cb1-18">    EXPECT_EQ<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>popped<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>value<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(),</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb1-19">    EXPECT_TRUE<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>stack<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>empty<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">());</span></span>
<span id="cb1-20"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb1-21"></span>
<span id="cb1-22">TEST<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>ThreadSafeStackTest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> EmptyTest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb1-23">    dev<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>threadsafe_stack<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> stack<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-24">    EXPECT_TRUE<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>stack<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>empty<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">());</span></span>
<span id="cb1-25">    stack<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>push<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb1-26">    EXPECT_FALSE<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>stack<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>empty<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">());</span></span>
<span id="cb1-27"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb1-28"></span>
<span id="cb1-29">TEST<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>ThreadSafeStackTest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> ConcurrentPushTest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb1-30">    dev<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>threadsafe_stack<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> stack<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-31">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>vector<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>thread<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> threads<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-32"></span>
<span id="cb1-33">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb1-34">        threads<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>emplace_back<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">([&amp;</span>stack<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb1-35">            stack<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>push<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb1-36">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">});</span></span>
<span id="cb1-37">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb1-38"></span>
<span id="cb1-39">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">auto</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> thread <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> threads<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb1-40">        thread<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>join<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb1-41">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb1-42"></span>
<span id="cb1-43">    EXPECT_FALSE<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>stack<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>empty<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">());</span></span>
<span id="cb1-44">    EXPECT_TRUE<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>stack<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb1-45"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb1-46"></span>
<span id="cb1-47">TEST<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>ThreadSafeStackTest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> ConcurrentPopTest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb1-48">    dev<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>threadsafe_stack<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> stack<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-49">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb1-50">        stack<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>push<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb1-51">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb1-52"></span>
<span id="cb1-53">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>vector<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>thread<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> threads<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-54">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>vector<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> results<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-55">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>mutex<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> </span>mtx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-56"></span>
<span id="cb1-57">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb1-58">        threads<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>emplace_back<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">([&amp;</span>stack<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span>results<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span>mtx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb1-59">            <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">auto</span> popped <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stack<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>pop<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb1-60">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>popped<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>has_value<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">())</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb1-61">                <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>unique_lock<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>mutex<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> unique_lck<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>mtx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb1-62">                results<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>push_back<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>popped<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>value<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">());</span></span>
<span id="cb1-63">            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb1-64">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">});</span></span>
<span id="cb1-65">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb1-66"></span>
<span id="cb1-67">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">auto</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> thread <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> threads<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb1-68">        thread<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>join<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb1-69">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb1-70"></span>
<span id="cb1-71">    EXPECT_EQ<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>results<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(),</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb1-72"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb1-73"></span>
<span id="cb1-74">TEST<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>ThreadSafeStackTest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> ConcurrentSwapTest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">){</span></span>
<span id="cb1-75">    dev<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>threadsafe_stack<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> evens<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> odds<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-76">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;++</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb1-77">        evens<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>push<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb1-78">    </span>
<span id="cb1-79">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;++</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb1-80">        odds<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>push<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span>  </span>
<span id="cb1-81">        </span>
<span id="cb1-82">    dev<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>threadsafe_stack<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> evensCopy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>evens<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb1-83">    dev<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>threadsafe_stack<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> oddsCopy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>odds<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span>            </span>
<span id="cb1-84"></span>
<span id="cb1-85">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>vector<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>thread<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> threads<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-86"></span>
<span id="cb1-87">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> j<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span>j<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;++</span>j<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">){</span></span>
<span id="cb1-88">        threads<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>emplace_back<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">([&amp;</span>evens<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span>odds<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">](){</span></span>
<span id="cb1-89">            evens<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>swap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>odds<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb1-90">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">});</span></span>
<span id="cb1-91">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb1-92"></span>
<span id="cb1-93">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> j<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span>j<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;++</span>j<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb1-94">        threads<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>j<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">].</span>join<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb1-95">    </span>
<span id="cb1-96">    EXPECT_EQ<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>evens <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> evensCopy<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">true</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb1-97">    EXPECT_EQ<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>odds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> oddsCopy<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">true</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb1-98"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<section id="implementation-notes" class="level3">
<h3 class="anchored" data-anchor-id="implementation-notes">Implementation Notes</h3>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp number-lines code-with-copy"><code class="sourceCode cpp"><span id="cb2-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;stack&gt;</span></span>
<span id="cb2-2"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;mutex&gt;</span></span>
<span id="cb2-3"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;shared_mutex&gt;</span></span>
<span id="cb2-4"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;optional&gt;</span></span>
<span id="cb2-5"></span>
<span id="cb2-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">namespace</span> dev<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb2-7">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">template</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">typename</span> T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb2-8">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> threadsafe_stack<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb2-9">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb2-10">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>stack<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_stack</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-11">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>shared_mutex<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> </span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_shared_mutex</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-12"></span>
<span id="cb2-13">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb2-14">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">using</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">value_type</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-15">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">using</span> reference <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;;</span></span>
<span id="cb2-16">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">using</span> const_reference <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;;</span></span>
<span id="cb2-17"></span>
<span id="cb2-18">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// default constructor</span></span>
<span id="cb2-19">        threadsafe_stack<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">default</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-20"></span>
<span id="cb2-21">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// copy constructor</span></span>
<span id="cb2-22">        threadsafe_stack<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> threadsafe_stack<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> other<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb2-23">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb2-24">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>shared_lock<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>shared_mutex<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> shared_lck<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">const_cast</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>shared_mutex<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&gt;(</span>other<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_shared_mutex</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">));</span></span>
<span id="cb2-25">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_stack</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> other<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_stack</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-26">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb2-27"></span>
<span id="cb2-28">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// copy assignment</span></span>
<span id="cb2-29">        threadsafe_stack<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">operator</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=(</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> threadsafe_stack<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">delete</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-30"></span>
<span id="cb2-31">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/**</span></span>
<span id="cb2-32"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">         * </span><span class="an" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@brief</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> Inserts an element at the top of the stack.</span></span>
<span id="cb2-33"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">         */</span></span>
<span id="cb2-34">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> push<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>const_reference element<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">){</span></span>
<span id="cb2-35">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>unique_lock<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> </span>unique_lck<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_shared_mutex</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb2-36">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">constexpr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>is_nothrow_constructible_v<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;){</span></span>
<span id="cb2-37">                <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_stack</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>push<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>move<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>element<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">));</span></span>
<span id="cb2-38">            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb2-39">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb2-40">                <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_stack</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>push<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>element<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb2-41">            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb2-42">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb2-43"></span>
<span id="cb2-44">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>optional<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> pop<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(){</span></span>
<span id="cb2-45">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>unique_lock<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>shared_mutex<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> unique_lck<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_shared_mutex</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb2-46">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_stack</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>empty<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">())</span></span>
<span id="cb2-47">                <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>nullopt<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-48">            </span>
<span id="cb2-49">            T element<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-50">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">constexpr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>is_nothrow_move_constructible_v<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;){</span></span>
<span id="cb2-51">                element <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>move<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_stack</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>top<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">());</span></span>
<span id="cb2-52">            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb2-53">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb2-54">                element <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_stack</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>top<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb2-55">            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb2-56">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_stack</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>pop<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb2-57">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> element<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-58">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb2-59"></span>
<span id="cb2-60">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">value_type</span> top<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(){</span></span>
<span id="cb2-61">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>shared_lock<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>shared_mutex<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> shared_lck<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_shared_mutex</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb2-62">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_stack</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>top<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb2-63">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb2-64"></span>
<span id="cb2-65">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">bool</span> empty<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(){</span></span>
<span id="cb2-66">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>shared_lock<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>shared_mutex<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> shared_lck<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_shared_mutex</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb2-67">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_stack</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>empty<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb2-68">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb2-69"></span>
<span id="cb2-70">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>size_t<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> </span>size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(){</span></span>
<span id="cb2-71">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>shared_lock<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>shared_mutex<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> shared_lck<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_shared_mutex</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb2-72">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_stack</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb2-73">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb2-74"></span>
<span id="cb2-75">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> swap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>threadsafe_stack<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> other<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">){</span></span>
<span id="cb2-76">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>scoped_lock<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>shared_mutex<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>shared_mutex<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> scoped_lck<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_shared_mutex</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> other<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_shared_mutex</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb2-77">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>swap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_stack</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> other<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_stack</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb2-78">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb2-79"></span>
<span id="cb2-80">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">friend</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> swap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>threadsafe_stack<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> lhs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> threadsafe_stack<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> rhs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">){</span></span>
<span id="cb2-81">            lhs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>swap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>rhs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb2-82">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb2-83"></span>
<span id="cb2-84">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">friend</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">bool</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">operator</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==(</span>threadsafe_stack<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> lhs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> threadsafe_stack<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> rhs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">){</span></span>
<span id="cb2-85">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>scoped_lock<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>shared_mutex<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>shared_mutex<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> scoped_lck<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>lhs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_shared_mutex</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> rhs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_shared_mutex</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb2-86">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>lhs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_stack</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> rhs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_stack</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">())</span></span>
<span id="cb2-87">                <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">false</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-88">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> lhs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_stack</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> rhs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_stack</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-89">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb2-90">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb2-91"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>


</section>
</section>
</section>

 ]]></description>
  <category>C++</category>
  <guid>http://quantdev.blog/posts/thread-safe-stack/index.html</guid>
  <pubDate>Sun, 23 Feb 2025 00:00:00 GMT</pubDate>
  <media:content url="http://quantdev.blog/posts/thread-safe-stack/cpp.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Margrabe’s formula</title>
  <dc:creator>Quasar </dc:creator>
  <link>http://quantdev.blog/posts/kirks_approximation_a_numerical_experiment/index.html</link>
  <description><![CDATA[ 




<section id="kirks-approximation---a-numerical-experiment" class="level1">
<h1>Kirk’s approximation - A numerical experiment</h1>
<section id="margrabes-formula" class="level2">
<h2 class="anchored" data-anchor-id="margrabes-formula">Margrabe’s formula</h2>
<p>Let <img src="https://latex.codecogs.com/png.latex?S_1(t)"> and <img src="https://latex.codecogs.com/png.latex?S_2(t)"> denote the prices of two risky assets which have dynamics:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign*%7D%0AdS_1(t)/%20S_1(t)%20&amp;=%20r%20dt%20+%20%5Csigma_1%20dW_1%5E%7B%5Cmathbb%7BQ%7D%7D(t)%20%5C%5C%0AdS_2(t)/%20S_2(t)%20&amp;=%20r%20dt%20+%20%5Csigma_2%20dW_2%5E%7B%5Cmathbb%7BQ%7D%7D(t)%0A%5Cend%7Balign*%7D%0A"></p>
<p>where <img src="https://latex.codecogs.com/png.latex?r"> is the constant risk-free rate, <img src="https://latex.codecogs.com/png.latex?W_1%5E%7B%5Cmathbb%7BQ%7D%7D(t)"> and <img src="https://latex.codecogs.com/png.latex?W_2%5E%7B%5Cmathbb%7BQ%7D%7D(t)"> are brownian motions with instantaneous correlation <img src="https://latex.codecogs.com/png.latex?%5Crho">.</p>
<p>We are interested to price the payoff</p>
<p><img src="https://latex.codecogs.com/png.latex?%0AV_T%20=%20(S_1(T)%20-%20S_2(T))%5E+%0A"></p>
<p>By the risk-neutral pricing formula,</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign*%7D%0AV_0%20&amp;=%20M(0)%5Cmathbb%7BE%7D%5E%7B%5Cmathbb%7BQ%7D%7D%5Cleft%5B%5Cfrac%7BV(T)%7D%7BM(T)%7D%5Cright%5D%5C%5C%0A&amp;=%20S_2(0)%5Cmathbb%7BE%7D%5E%7B%5Cmathbb%7BQ%7D%5E%7BS_2%7D%7D%5Cleft%5B%5Cfrac%7BV(T)%7D%7BS_2(T)%7D%5Cright%5D%5C%5C%0A&amp;%20%5Cquad%20%5C%7B%5Ctext%7BSwitching%20from%20%7D%5Cmathbb%7BQ%7D%5Ctext%7B%20to%20%7D%5Cmathbb%7BQ%7D%5E%7BS_2%7D%5Ctext%7B-measure.%7D%5C%7D%5C%5C%0A&amp;=%20S_2(0)%5Cmathbb%7BE%7D%5E%7B%5Cmathbb%7BQ%7D%5E%7BS_2%7D%7D%5Cleft%5B%5Cfrac%7B1%7D%7BS_2(T)%7DS_1(T)%20-%20S_2(T)%201_%7BS_1(T)%20%3E%20S_2(T)%7D%5Cright%5D%5C%5C%0A&amp;=%20S_2(0)%5Cmathbb%7BE%7D%5E%7B%5Cmathbb%7BQ%7D%5E%7BS_2%7D%7D%5Cleft%5B%5Cleft(%5Cfrac%7BS_1(T)%7D%7BS_2(T)%7D%20-%201%20%5Cright)%201_%7BS_1(T)%20%3E%20S_2(T)%7D%5Cright%5D%5C%5C%0A%5Cend%7Balign*%7D%0A"></p>
<p>Define the asset price process <img src="https://latex.codecogs.com/png.latex?Y(t)"> as:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0AY(t)%20:=%20%5Cfrac%7BS_1(t)%7D%7BS_2(t)%7D%0A"></p>
<p>So, we want to compute the expectation</p>
<p><img src="https://latex.codecogs.com/png.latex?%0AV_0%20=%20S_2(0)%20%5Cmathbb%7BE%7D%5E%7B%5Cmathbb%7BQ%7D%5E%7BS_2%7D%7D%20%5Cleft%5B(Y_T%20-%201)%5E+%5Cright%5D%0A"></p>
<section id="dynamics-of-y_t" class="level3">
<h3 class="anchored" data-anchor-id="dynamics-of-y_t">Dynamics of <img src="https://latex.codecogs.com/png.latex?(Y_t)"></h3>
<p>We know that <img src="https://latex.codecogs.com/png.latex?(Y_t,t%5Cgeq%200)"> is a <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%7BQ%7D%5E%7BS_2%7D"> martingale. The <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%7BQ%7D">-dynamics of <img src="https://latex.codecogs.com/png.latex?(Y_t)"> is:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Baligned%7D%0AdY_%7Bt%7D%20&amp;%20=d%5Cleft(%5Cfrac%7BS_%7B1%7D(%20t)%7D%7BS_%7B2%7D(%20t)%7D%5Cright)%5C%5C%0A&amp;%20%5Cleft%5C%7B%5Ctext%7BApplying%20Ito's%20product%20rule%20%7D%5Cright%5C%7D%5C%5C%0A&amp;%20=S_%7B1%7D(%20t)%20d%5Cleft(%5Cfrac%7B1%7D%7BS_%7B2%7D(%20t)%7D%5Cright)%20+%5Cfrac%7B1%7D%7BS_%7B2%7D(%20t)%7D%20dS_%7B1%7D(%20t)%20+dS_%7B1%7D(%20t)%20d%5Cleft(%5Cfrac%7B1%7D%7BS_%7B2%7D(%20t)%7D%5Cright)%5C%5C%0A&amp;%20=-S_%7B1%7D(%20t)%5Cleft%5B%5Cfrac%7B1%7D%7BS_%7B2%7D(%20t)%5E%7B2%7D%7D%20dS_%7B2%7D(%20t)%20+%5Cfrac%7B1%7D%7B2%7D%5Cleft(%5Cfrac%7B2%7D%7BS_%7B2%7D(%20t)%5E%7B3%7D%7D%5Cright)%20dS_%7B2%7D(%20t)%20%5Ccdot%20dS_%7B2%7D(%20t)%5Cright%5D%20+%5Cfrac%7B1%7D%7BS_%7B2%7D(%20t)%7D%5Cleft(%20rS_%7B1%7D(%20t)%20dt+%5Csigma%20_%7B1%7D%20S_%7B1%7D(%20t)%20dW_%7B1%7D%5E%7B%5Cmathbb%7BQ%7D%7D(%20t)%5Cright)%5C%5C%0A&amp;%20+S_%7B1%7D%5Cleft(%20rdt+%5Csigma%20_%7B1%7D%20dW_%7B1%7D%5E%7B%5Cmathbb%7BQ%7D%7D(%20t)%5Cright)%5Cleft%5B%20-%5Cfrac%7B1%7D%7BS_%7B2%7D(%20t)%5E%7B2%7D%7D%20dS_%7B2%7D(%20t)%20+%5Cfrac%7B1%7D%7B2%7D%5Cleft(%5Cfrac%7B2%7D%7BS_%7B2%7D(%20t)%5E%7B3%7D%7D%5Cright)%20dS_%7B2%7D(%20t)%20%5Ccdot%20dS_%7B2%7D(%20t)%5Cright%5D%5C%5C%0A&amp;%20=-%5Cfrac%7BS_%7B1%7D(%20t)%7D%7BS_%7B2%7D(%20t)%7D%5Cleft(%5Ccancel%7Brdt%7D%20+%5Csigma%20_%7B2%7D%20dW_%7B2%7D%5E%7B%5Cmathbb%7BQ%7D%7D(%20t)%5Cright)%20-%5Cfrac%7BS_%7B1%7D(%20t)%7D%7BS_%7B2%7D(%20t)%7D%20%5Csigma%20_%7B2%7D%5E%7B2%7D%20dt+%5Cfrac%7BS_%7B1%7D(%20t)%7D%7BS_%7B2%7D(%20t)%7D%5Cleft(%5Ccancel%7Brdt%7D%20+%5Csigma%20_%7B1%7D%20dW_%7B1%7D%5E%7B%5Cmathbb%7BQ%7D%7D(%20t)%5Cright)%5C%5C%0A&amp;%20+%5Cfrac%7BS_%7B1%7D%7D%7BS_%7B2%7D%7D%5Cleft(%20rdt+%5Csigma%20_%7B1%7D%20dW_%7B1%7D%5E%7B%5Cmathbb%7BQ%7D%7D(%20t)%5Cright)%5Cleft%5B%20-%5Cleft(%20rdt+%5Csigma%20_%7B2%7D%20dW_%7B2%7D%5E%7B%5Cmathbb%7BQ%7D%7D(%20t)%5Cright)%20+%5Csigma%20_%7B2%7D%5E%7B2%7D%20dt%5Cright%5D%5C%5C%0A&amp;%20=%5Cfrac%7BS_%7B1%7D%7D%7BS_%7B2%7D%7D%5Cleft%5B%20-%5Csigma%20_%7B2%7D%20dW_%7B2%7D%5E%7B%5Cmathbb%7BQ%7D%7D(%20t)%20+%5Csigma%20_%7B1%7D%20dW_%7B1%7D%5E%7B%5Cmathbb%7BQ%7D%7D(%20t)%20-%5Crho%20%5Csigma%20_%7B1%7D%20%5Csigma%20_%7B2%7D%20dt-%5Csigma%20_%7B2%7D%5E%7B2%7D%20dt%5Cright%5D%5C%5C%0A&amp;=Y_t%5Cleft%5B%20-%5Csigma%20_%7B2%7D%20dW_%7B2%7D%5E%7B%5Cmathbb%7BQ%7D%7D(%20t)%20+%5Csigma%20_%7B1%7D%20dW_%7B1%7D%5E%7B%5Cmathbb%7BQ%7D%7D(%20t)%20-%5Crho%20%5Csigma%20_%7B1%7D%20%5Csigma%20_%7B2%7D%20dt-%5Csigma%20_%7B2%7D%5E%7B2%7D%20dt%5Cright%5D%0A%5Cend%7Baligned%7D%0A"></p>
<p>Since we know, the <img src="https://latex.codecogs.com/png.latex?Y_t"> is the price of <img src="https://latex.codecogs.com/png.latex?S_1(t)"> expressed in units of <img src="https://latex.codecogs.com/png.latex?S_2(t)">, it is a <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%7BQ%7D%5E%7BS_2%7D">-martingale. So, we can just drop the <img src="https://latex.codecogs.com/png.latex?(...)dt"> terms and write:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0AdY_t%20=%20Y_t%20%5Cleft%5B%20-%5Csigma_%7B2%7D%20dW_%7B2%7D%5E%7B%5Cmathbb%7BQ%7D%5E%7BS_2%7D%7D(%20t)%20+%5Csigma_%7B1%7D%20dW_%7B1%7D%5E%7B%5Cmathbb%7BQ%7D%5E%7BS_2%7D%7D(t)%20%5Cright%5D%0A"></p>
<p>We can perform an orthogonal decomposition of the correlated brownian motions <img src="https://latex.codecogs.com/png.latex?W_1%5E%7B%5Cmathbb%7BQ%7D%5E%7BS_2%7D%7D(t)"> and <img src="https://latex.codecogs.com/png.latex?W_2%5E%7B%5Cmathbb%7BQ%7D%5E%7BS_2%7D%7D(t)"> and write:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign*%7D%0AdY_t%20=%20Y_t%20%5Cleft%5B%20-%5Csigma_%7B2%7D%20(%5Crho%20dB_1%5E%7B%5Cmathbb%7BQ%7D%5E%7BS_2%7D%7D%20(t)%20+%20%5Csqrt%7B1%20-%20%5Crho%5E2%7D%20dB_2%5E%7B%5Cmathbb%7BQ%7D%5E%7BS_2%7D%7D(t))%20+%5Csigma_%7B1%7D%20dB_%7B1%7D%5E%7B%5Cmathbb%7BQ%7D%5E%7BS_2%7D%7D(t)%20%5Cright%5D%5C%5C%0AdY_t%20=%20Y_t%20%5Cleft%5B(%5Csigma_1%20-%20%5Crho%20%5Csigma_2)%20dB_1%5E%7B%5Cmathbb%7BQ%7D%5E%7BS_2%7D%7D%20(t)%20-%20%5Csigma_2%20%5Csqrt%7B1%20-%20%5Crho%5E2%7DdB_2%5E%7B%5Cmathbb%7BQ%7D%5E%7BS_2%7D%7D(t)%5Cright%5D%0A%5Cend%7Balign*%7D%0A"></p>
<p>Define the process <img src="https://latex.codecogs.com/png.latex?(X_t,t%5Cgeq%200)"> as:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0AdX_t%20=%20%5Cfrac%7B1%7D%7B%5Csigma%7D%20%5Cleft%5B(%5Csigma_1%20-%20%5Crho%20%5Csigma_2)%20dB_1%5E%7B%5Cmathbb%7BQ%7D%5E%7BS_2%7D%7D%20(t)%20-%20%5Csigma_2%20%5Csqrt%7B1%20-%20%5Crho%5E2%7DdB_2%5E%7B%5Cmathbb%7BQ%7D%5E%7BS_2%7D%7D(t)%5Cright%5D%0A"></p>
<p>where <img src="https://latex.codecogs.com/png.latex?%5Csigma%20=%20%5Csqrt%7B%5Csigma_1%5E2%20+%20%5Csigma_2%5E2%20-%202%5Crho%20%5Csigma_1%20%5Csigma_2%7D">.</p>
<p>It follows that <img src="https://latex.codecogs.com/png.latex?(X_t,t%5Cgeq%200)"> is a martingale and</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign*%7D%0AdX_t%20%5Ccdot%20dX_t%20&amp;=%5Cfrac%7B1%7D%7B%5Csigma%5E2%7D%5Cleft%5B%20%5Csigma_2%5E2(%5Crho%20dB_1%5E%7B%5Cmathbb%7BQ%7D%5E%7BS_2%7D%7D%20(t)%20+%20%5Csqrt%7B1%20-%20%5Crho%5E2%7D%20dB_2%5E%7B%5Cmathbb%7BQ%7D%5E%7BS_2%7D%7D(t))%5E2%20+%20%5Csigma_1%5E2%20dt%20-%202%5Crho%20%5Csigma_1%20%5Csigma_2%20dt%5Cright%5D%5C%5C%0A&amp;=%5Cfrac%7B1%7D%7B%5Csigma%5E2%7D(%5Csigma_1%5E2%20+%20%5Csigma_2%5E2%20-%202%5Crho%20%5Csigma_1%20%5Csigma_2)dt%20%5C%5C%0A&amp;=%20dt%0A%5Cend%7Balign*%7D%0A"></p>
<p>By Levy’s characterization theorem, <img src="https://latex.codecogs.com/png.latex?(X_t,t%5Cgeq%200)"> is a standard brownian motion. Hence, <img src="https://latex.codecogs.com/png.latex?(Y_t)"> given by the SDE:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0AdY_t%20=%20%5Csigma%20Y_t%20dX_t%0A"></p>
<p>follows lognormal dynamics.</p>
</section>
<section id="analytical-formula" class="level3">
<h3 class="anchored" data-anchor-id="analytical-formula">Analytical formula</h3>
<p>We can thus price the claim <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%7BE%7D%5E%7B%5Cmathbb%7BQ%7D%5E%7BS_2%7D%7D%5Cleft%5B(Y_T%20-%201)%5E+%5Cright%5D"> using the Black formula for a european call option with the asset price given by <img src="https://latex.codecogs.com/png.latex?Y_t%20=%20S_1(t)/S_2(t)">, strike <img src="https://latex.codecogs.com/png.latex?K%20=%201">, the volatility parameter <img src="https://latex.codecogs.com/png.latex?%5Csigma%20=%20%5Csqrt%7B%5Csigma_1%5E2%20+%20%5Csigma_2%5E2%20-%202%5Crho%20%5Csigma_1%20%5Csigma_2%7D"> and riskfree rate <img src="https://latex.codecogs.com/png.latex?r=0">. Subbing these quantities in the Black formula, we have:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign*%7D%0AV(0)%20&amp;=%20S_2(0)%20(F%5CPhi(d_%7B+%7D)%20-%20K%5CPhi(d_%7B-%7D))%20%5C%5C%0A&amp;=%20S_2(0)%5Cleft(%5Cfrac%7BS_1(0)%7D%7BS_2(0)%7D%5CPhi(d_%7B+%7D)%20-%20%5CPhi(d_%7B-%7D)%5Cright)%5C%5C%0A&amp;=S_1(0)%5CPhi(d_%7B+%7D)%20-%20S_2(0)%5CPhi(d_%7B-%7D)%0A%5Cend%7Balign*%7D%0A"></p>
<p>where</p>
<p><img src="https://latex.codecogs.com/png.latex?%0Ad_%7B%5Cpm%7D%20=%20%5Cfrac%7B%5Cln%5Cleft(%5Cfrac%7BS_1(0)%7D%7BS_2(0)%7D%5Cright)%20%5Cpm%20%5Cfrac%7B%5Csigma%5E2%7D%7B2%7DT%7D%7B%5Csigma%5Csqrt%7BT%7D%7D%0A"></p>
</section>
</section>

</section>

<div id="quarto-appendix" class="default"><section id="references" class="level2 appendix"><h2 class="anchored quarto-appendix-heading">References</h2><div class="quarto-appendix-contents">

<ul>
<li><em><a href="https://en.wikipedia.org/wiki/Margrabe%27s_formula">Margrabe’s formula</a>, Wikipedia.</em></li>
</ul>


</div></section></div> ]]></description>
  <category>Back to the basics</category>
  <guid>http://quantdev.blog/posts/kirks_approximation_a_numerical_experiment/index.html</guid>
  <pubDate>Sat, 22 Feb 2025 00:00:00 GMT</pubDate>
  <media:content url="http://quantdev.blog/posts/kirks_approximation_a_numerical_experiment/cpp.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Levenberg-Marquardt Algorithm</title>
  <dc:creator>Quasar </dc:creator>
  <link>http://quantdev.blog/posts/levenberg-marquardt/index.html</link>
  <description><![CDATA[ 




<section id="the-levenberg-marquardt-algorithm" class="level1">
<h1>The Levenberg Marquardt Algorithm</h1>
<section id="algorithm-description" class="level2">
<h2 class="anchored" data-anchor-id="algorithm-description">Algorithm Description</h2>
<p>The Levenberg-Marquardt(LM) method consists of an iterative least-squares minimization of a function based on a modification of the Newton method. It’s a super-intuitive algorithm and a generic implementation can be very quickly coded up. I state the problem formally before defining the algorithm. We’ll use finite differences to approximate the first and second-order derivatives of the function.</p>
<p>Let <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7Bx%7D%5Cin%5Cmathbf%7BR%7D%5En"> be the parameter vector to be optimized. We want to find the optimal <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7Bx%7D%5E*"> that minimizes the scalar error function:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign*%7D%0AF(%5Cmathbf%7Bx%7D)%20=%20%5Cfrac%7B1%7D%7B2%7D%7C%7C%5Cmathbf%7Br%7D(%5Cmathbf%7Bx%7D)%7C%7C%5E2%20=%20%5Cfrac%7B1%7D%7B2%7D%5Cmathbf%7Br%7D(%5Cmathbf%7Bx%7D)%5ET%20%5Cmathbf%7Br%7D(%5Cmathbf%7Bx%7D)%0A%5Cend%7Balign*%7D%0A"></p>
<p>The residual error function <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7Br%7D:%5Cmathbf%7BR%7D%5En%20%5Cto%20%5Cmathbf%7BR%7D%5Em"> may sometimes include a comparison to reference or observed data. A very simple linear example would <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7Br%7D(%5Cmathbf%7Bx%7D)%20=%20%5Cmathbf%7Bb%7D%20-%20%5Cmathbf%7BAx%7D">. However, in the following, I assume that <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7Br%7D(%5Ccdot)"> is any vector-valued function:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign*%7D%0A%5Cmathbf%7Br%7D(%5Cmathbf%7Bx%7D)%20=%20(r_1(%5Cmathbf%7Bx%7D),f_2(%5Cmathbf%7Bx%7D),%5Cldots,r_m(%5Cmathbf%7Bx%7D))%0A%5Cend%7Balign*%7D%0A"></p>
<p>We can define the Jacobian of the residual error functions as <img src="https://latex.codecogs.com/png.latex?m%20%5Ctimes%20n"> matrix with entries :</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cmathbf%7BJ%7D_%7Bij%7D(%5Cmathbf%7Bx%7D)%20=%20%5Cfrac%7B%5Cpartial%20r_i%7D%7B%5Cpartial%20x_j%7D(%5Cmathbf%7Bx%7D)%0A"></p>
<p>We can also define the Hessian of the residual error functions as the <img src="https://latex.codecogs.com/png.latex?n%20%5Ctimes%20n"> matrix with entries :</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign*%7D%0A%5Cmathbf%7BH%7D_%7Bij%7D(%5Cmathbf%7Bx%7D)%20=%20%5Cfrac%7B%5Cpartial%5E2%20r_i%7D%7B%5Cpartial%20x_i%20%5Cpartial%20x_j%7D%20(%5Cmathbf%7Bx%7D)%0A%5Cend%7Balign*%7D%0A"></p>
<p>The gradient of the scalar-valued function <img src="https://latex.codecogs.com/png.latex?F">, by the <img src="https://latex.codecogs.com/png.latex?uv"> product rule is:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign*%7D%0A%5Cnabla%20F(%5Cmathbf%7Bx%7D)%20=%20D%5Cmathbf%7Br%7D(%5Cmathbf%7Bx%7D)%20%5Cmathbf%7Br%7D(%5Cmathbf%7Bx%7D)%20=%20%5Cmathbf%7BJ%7D(%5Cmathbf%7Bx%7D)%5Ccdot%20%5Cmathbf%7Br%7D(%5Cmathbf%7Bx%7D)%0A%5Cend%7Balign*%7D%0A"></p>
<p>The Hessian of the function <img src="https://latex.codecogs.com/png.latex?F"> is:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign*%7D%0A%5Cnabla%5E2%20F(%5Cmathbf%7Bx%7D)%20&amp;=%20D%5Cleft%5C%7B%5Csum_%7Bj=1%7D%5E%7Bm%7D%20%5Cnabla%20r_j(%5Cmathbf%7Bx%7D)%20%5Ccdot%20r_j(%5Cmathbf%7Bx%7D)%5Cright%5C%7D%5C%5C%0A&amp;=%20%5Csum_%7Bj=1%7D%5Em%20%5Cnabla%5E2%20r_j(%5Cmathbf%7Bx%7D)%20r_j(%5Cmathbf%7Bx%7D)%20+%20(%5Cnabla%20r_j(%5Cmathbf%7Bx%7D))%5E2%0A%5Cend%7Balign*%7D%0A"></p>
<p>If the derivatives <img src="https://latex.codecogs.com/png.latex?%5Cnabla%5E2%20r_j(%5Cmathbf%7Bx%7D)"> are small, they can be dropped and the Hessian in this case simply becomes:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cnabla%5E2%20F(%5Cmathbf%7Bx%7D)%20=%20%5Cnabla%20r(%5Cmathbf%7Bx%7D)%5ET%20%5Cnabla(r(%5Cmathbf%7Bx%7D))%20=%20%5Cmathbf%7BJ%7D(%5Cmathbf%7Bx%7D)%5ET%20%5Ccdot%20%5Cmathbf%7BJ%7D(%5Cmathbf%7Bx%7D)%0A"></p>
<p>Then, the LM method minimizes the following <img src="https://latex.codecogs.com/png.latex?2">nd-order Taylor’s expansion of the actual error function:</p>
<p><span id="eq-error-function-to-be-minimized"><img src="https://latex.codecogs.com/png.latex?%0AF(%5Cmathbf%7Bx%7D%5E%7B(k)%7D%20+%20%5Cmathbf%7Bh%7D)%20-%20F(%5Cmathbf%7Bx%7D%5E%7B(k)%7D)%20=%20%5Cmathbf%7Bh%7D%20%5Cnabla%20F(%5Cmathbf%7Bx%7D%5E%7B(k)%7D)%20+%20%5Cfrac%7B1%7D%7B2%7D%5Cmathbf%7Bh%7D%5ET%20%5Cnabla%5E2%20F(%5Cmathbf%7Bx%7D%5E%7B(k)%7D)%20%5Cmathbf%7Bh%7D%0A%5Ctag%7B1%7D"></span></p>
<p>Descent methods like gradient descent can place too much trust in their first- or second- order information, which can result in excessively large steps or premature convergence.</p>
<p>So, in LM, we add a penalty term</p>
<p><span id="eq-penalty-for-the-level-of-distrust"><img src="https://latex.codecogs.com/png.latex?%20%5Cfrac%7B1%7D%7B2%7D%20%5Clambda%5E%7B(k)%7D%20%5Cmathbf%7Bh%7D%5ET%20%5Cmathbf%7Bh%7D%20=%20%5Cfrac%7B1%7D%7B2%7D%20%5Clambda%5E%7B(k)%7D%20%7C%7C%5Cmathbf%7Bx%7D%20-%20%5Cmathbf%7Bx%7D%5E%7B(k)%7D%7C%7C%5E2%20%5Ctag%7B2%7D"></span></p>
<p>to the above Equation&nbsp;1, that we want to minimize. That’s because, we don’t want to go too far away from <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7Bx%7D%5E%7B(k)%7D">. It’s not because, we think the solution is not too far away. The actual solution could be far away. But, that’s a question of trust. And <img src="https://latex.codecogs.com/png.latex?%5Clambda%5E%7B(k)%7D"> essentially gives you your level of distrust. If <img src="https://latex.codecogs.com/png.latex?%5Clambda%5E%7B(k)%7D"> is super-big, it means that you don’t trust the model very much, or you trust it, but only if you are very close to <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7Bx%7D%5E%7B(k)%7D">. When <img src="https://latex.codecogs.com/png.latex?%5Clambda%5E%7B(k)%7D"> gets really small, it means you really trust your model. And you’re gonna find that <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7Bx%7D"> is going to very far from <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7Bx%7D%5E%7B(k)%7D">. So, that’s the gist. Putting together,</p>
<p><span id="eq-expression-to-minimize"><img src="https://latex.codecogs.com/png.latex?%0AE(%5Cmathbf%7Bh%7D)%20=%20%5Cmathbf%7Bh%7D%20%5Cnabla%20F(%5Cmathbf%7Bx%7D%5E%7B(k)%7D)%20+%20%5Cfrac%7B1%7D%7B2%7D%5Cmathbf%7Bh%7D%5ET%20%5Cnabla%5E2%20(%20F(%5Cmathbf%7Bx%7D%5E%7B(k)%7D)%20+%20%5Clambda%5E%7B(k)%7D%20I%20)%5Cmathbf%7Bh%7D%0A%5Ctag%7B3%7D"></span></p>
<p>We can just solve for the optimal step-size <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7Bh%7D_%7Blm%7D"> analytically. Taking the first derivative with respect to the step-size <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7Bh%7D"> and setting it equal to zero:</p>
<p><span id="eq-first-derivative"><img src="https://latex.codecogs.com/png.latex?%0A%5Cnabla%20E(%5Cmathbf%7Bh%7D)%20=%20%5Cnabla%20F(%5Cmathbf%7Bx%7D%5E%7B(k)%7D)%20+%20%5Cmathbf%7Bh%7D_%7Blm%7D(%20%5Cnabla%5E2%20F(%5Cmathbf%7Bx%7D%5E%7B(k)%7D)%20+%20%5Clambda%5E%7B(k)%7DI)%20=%200%0A%5Ctag%7B4%7D"></span></p>
<p>Consequently,</p>
<p><span id="eq-optimal-step-size"><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign*%7D%0A%5Cmathbf%7Bh%7D_%7Blm%7D%20&amp;=%20-(%5Cnabla%5E2%20F(%5Cmathbf%7Bx%7D%5E%7B(k)%7D)%20+%20%5Clambda%5E%7B(k)%7DI)%5E%7B-1%7D%20%5Cnabla%20F(%5Cmathbf%7Bx%7D%5E%7B(k)%7D)%5C%5C%0A&amp;=-(%5Cmathbf%7BJ%7D(%5Cmathbf%7Bx%7D%5E%7B(k)%7D)%5ET%20%5Cmathbf%7BJ%7D(%5Cmathbf%7Bx%7D)%5E%7B(k)%7D%20+%20%5Clambda%5E%7B(k)%7DI)%5E%7B-1%7D%20%5Cmathbf%7BJ%7D(%5Cmathbf%7Bx%7D%5E%7B(k)%7D)%20%5Cmathbf%7Br%7D(%5Cmathbf%7Bx%7D%5E%7B(k)%7D)%0A%5Cend%7Balign*%7D%0A%5Ctag%7B5%7D"></span></p>
<p>Our best estimate of the minima, is consequently:</p>
<p><span id="eq-lm-iteration"><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign*%7D%0A%5Cmathbf%7Bx%7D%5E%7B(k+1)%7D%20&amp;=%20%5Cmathbf%7Bx%7D%5E%7B(k)%7D%20+%20%5Cmathbf%7Bh%7D_%7Blm%7D%5C%5C%0A&amp;=%20%5Cmathbf%7Bx%7D%5E%7B(k)%7D%20-(%5Cmathbf%7BJ%7D(%5Cmathbf%7Bx%7D%5E%7B(k)%7D)%5ET%20%5Cmathbf%7BJ%7D(%5Cmathbf%7Bx%7D)%5E%7B(k)%7D%20+%20%5Clambda%5E%7B(k)%7DI)%5E%7B-1%7D%20%5Cmathbf%7BJ%7D(%5Cmathbf%7Bx%7D%5E%7B(k)%7D)%20%5Cmathbf%7Br%7D(%5Cmathbf%7Bx%7D%5E%7B(k)%7D)%0A%5Cend%7Balign*%7D%0A%5Ctag%7B6%7D"></span></p>
</section>
<section id="updating-lambdak" class="level2">
<h2 class="anchored" data-anchor-id="updating-lambdak">Updating <img src="https://latex.codecogs.com/png.latex?%5Clambda%5E%7B(k)%7D"></h2>
<p>A trust-region method, or restricted step method maintains a local model of the trust region. It depends on the success of the previous step. If the step <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7Bh%7D_%7Blm%7D"> results in a decrease in <img src="https://latex.codecogs.com/png.latex?%7C%7CF(%5Cmathbf%7Bx%7D)%7C%7C%5E2">, then we reduce <img src="https://latex.codecogs.com/png.latex?%5Clambda%5E%7B(k)%7D">, otherwise we increase the value of this parameter.</p>
<p>So, we can use the following update mechanism:</p>
<ul>
<li>If <img src="https://latex.codecogs.com/png.latex?%7C%7CF(%5Cmathbf%7Bx%7D%5E%7B(k+1)%7D)%7C%7C%5E2"> &lt; <img src="https://latex.codecogs.com/png.latex?%7C%7CF(%5Cmathbf%7Bx%7D%5E%7B(k)%7D)%7C%7C%5E2">, accept the new <img src="https://latex.codecogs.com/png.latex?x"> and reduce <img src="https://latex.codecogs.com/png.latex?%5Clambda"></li>
</ul>
<p><img src="https://latex.codecogs.com/png.latex?%20%5Clambda%5E%7B(k+1)%7D%20=%200.8%20%5Clambda%5E%7B(k)%7D"></p>
<ul>
<li>otherwise, we increase the <img src="https://latex.codecogs.com/png.latex?%5Clambda"> and do not update <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7Bx%7D">:</li>
</ul>
<p><img src="https://latex.codecogs.com/png.latex?%20%5Clambda%5E%7B(k+1)%7D%20=%202%20%5Clambda%5E%7Bk%7D,%20%5Cquad%20%5Cmathbf%7Bx%7D%5E%7B(k+1)%7D%20=%20%5Cmathbf%7Bx%7D%5E%7B(k)%7D"></p>
</section>
<section id="generic-implementation-in-julia" class="level2">
<h2 class="anchored" data-anchor-id="generic-implementation-in-julia">Generic implementation in Julia</h2>
<div id="2" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource julia number-lines code-with-copy"><code class="sourceCode julia"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">using</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">Pkg</span></span></code></pre></div>
</div>
</section>
</section>


<div id="quarto-appendix" class="default"><section id="references" class="level1 appendix"><h2 class="anchored quarto-appendix-heading">References</h2><div class="quarto-appendix-contents">

<ul>
<li><a href="https://www.youtube.com/watch?v=UQsOyMj9lnI">Levenberg Marquardt Iteration</a>, Professor Stephen Boyd, Stanford ENGR108</li>
</ul>


</div></section></div> ]]></description>
  <category>Numerical Methods</category>
  <guid>http://quantdev.blog/posts/levenberg-marquardt/index.html</guid>
  <pubDate>Sat, 01 Feb 2025 00:00:00 GMT</pubDate>
  <media:content url="http://quantdev.blog/posts/levenberg-marquardt/image.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>C++ Ranges</title>
  <dc:creator>Quasar </dc:creator>
  <link>http://quantdev.blog/posts/c++-ranges/index.html</link>
  <description><![CDATA[ 




<section id="c-ranges" class="level1">
<h1>C++ Ranges</h1>
<section id="what-is-a-range" class="level2">
<h2 class="anchored" data-anchor-id="what-is-a-range">What is a range?</h2>
<p>C++ <a href="https://en.cppreference.com/w/cpp/ranges">ranges</a> are a programmatic abstraction for any container/type <code>T</code> that allows iteration over its elements by providing <code>begin</code> and <code>end</code> iterators. A <code>std::ranges::range</code> is defined as a <code>concept</code> that requires a container type <code>T</code> satisfy 2 constraints: it has a <code>begin</code> and an <code>end</code>.</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp number-lines code-with-copy"><code class="sourceCode cpp"><span id="cb1-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">template</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> T <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb1-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">concept</span> range <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">requires</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span> T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> t <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb1-3">    ranges<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>begin<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>t<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// equality-preserving for forward iterators</span></span>
<span id="cb1-4">    ranges<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>end <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>t<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb1-5"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span></code></pre></div>
<p>The C++ ranges library also includes rangified algorithms which are applied to ranges eagerly, and range adaptors that are applied to views lazily.</p>
<p>There are three kind of ranges : they can be an abstraction on</p>
<ul>
<li>a pair of iterators</li>
<li>an iterator and a count</li>
<li>an iterator and a predicate</li>
</ul>
<p>Here’s a quick code example:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp number-lines code-with-copy"><code class="sourceCode cpp"><span id="cb2-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include</span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;iostream&gt;</span></span>
<span id="cb2-2"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include</span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;vector&gt;</span></span>
<span id="cb2-3"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include</span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;ranges&gt;</span></span>
<span id="cb2-4"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include</span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;type_traits&gt;</span></span>
<span id="cb2-5"></span>
<span id="cb2-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">template</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>ranges<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">::</span>input_range<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> </span>Rng<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb2-7"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">auto</span> sum<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>Rng<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;</span> rng<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">){</span></span>
<span id="cb2-8">    Rng result<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{};</span></span>
<span id="cb2-9">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">auto</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span>e <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> rng<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">){</span></span>
<span id="cb2-10">        result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> e<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-11">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb2-12">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> result<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-13"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb2-14"></span>
<span id="cb2-15"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> main<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span></span>
<span id="cb2-16"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb2-17">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>vector<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> </span>v<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb2-18">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">auto</span> result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sum<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>v<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb2-19"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p><a href="https://godbolt.org/z/xan8K49Ej">Play on Compiler Explorer</a></p>
</section>
<section id="using-universal-references-to-accept-ranges" class="level2">
<h2 class="anchored" data-anchor-id="using-universal-references-to-accept-ranges">Using universal references to accept ranges</h2>
<p>You always accept ranges using universal references. The motivation for this is as follows. Consider the function <code>find_second_occurrence</code> that finds the second occurrence of a character in the string.</p>
<p>The function call <code>find_second_occurrence( "Hello World", 'l')</code> invokes <code>find_second_occurrence</code> with a string literal. The string literal is copied to a temporary <code>std::string</code> instance. We can bind this to the <code>const</code> <em>lvalue</em> reference <code>str</code>. All good so far. In this instance, we even find the second occurrence of the character <code>l</code> at the index <code>3</code>. We return <code>str[3]</code>. Except, that once we return, the temporary goes out of scope and is destroyed. So, we have a dangling reference.</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp number-lines code-with-copy"><code class="sourceCode cpp"><span id="cb3-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include</span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;string&gt;</span></span>
<span id="cb3-2"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">char</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> find_second_occurrence<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>string<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> str<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">char</span> c<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">){</span></span>
<span id="cb3-3">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">static</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">char</span> not_found <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\0</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-4"></span>
<span id="cb3-5">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>size_t<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> </span>idx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> str<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>find<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>c<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb3-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>idx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>string<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">::</span>npos<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> not_found<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-7"></span>
<span id="cb3-8">    idx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> str<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>find<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>c<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> idx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb3-9">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>idx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>string<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">::</span>npos<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> not_found<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-10"></span>
<span id="cb3-11">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> str<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>idx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb3-12"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p>Something very interesting happens if we change the signature of the function to take a <code>string_view</code>. This function is no longer broken. We are kind of doing the same thing. We call the function with the string literal <code>Hello World</code>. We construct the temporary instance of the <code>string_view</code>. We bind the temporary instance of a <code>string</code> to a <code>const</code> reference. Then, we find the second instance of <code>l</code>. We return reference to that. We destroy the <code>string_view</code>. But, the important difference is that <code>string_view</code> doesn’t hold it’s own data. It just points to some place else. That some place else in this case is a global object - a string literal. Recall, string literals are <em>lvalue</em>s. So, we have a reference into a string literal.</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp number-lines code-with-copy"><code class="sourceCode cpp"><span id="cb4-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include</span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;string&gt;</span></span>
<span id="cb4-2"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">char</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> find_second_occurrence<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>string_view<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> str<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">char</span> c<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">){</span></span>
<span id="cb4-3">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">static</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">char</span> not_found <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\0</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-4"></span>
<span id="cb4-5">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>size_t<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> </span>idx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> str<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>find<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>c<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb4-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>idx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>string<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">::</span>npos<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> not_found<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-7"></span>
<span id="cb4-8">    idx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> str<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>find<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>c<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> idx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb4-9">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>idx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>string<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">::</span>npos<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> not_found<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-10"></span>
<span id="cb4-11">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> str<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>idx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb4-12"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p>This difference is something that is captured under the name <code>borrowed_range</code>. You probably know <code>std::string_view</code> and <code>std::span</code>. These are ranges that don’t hold their own data, but simply point to some place else. They are called <em>borrowed ranges</em>.</p>
<p>If you use range algorithms, they actually take this into account.</p>
<p>If you call <code>ranges_find()</code> with a <code>std::string_view</code>, it will work absolutely fine. You will get an iterator back.</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp number-lines code-with-copy"><code class="sourceCode cpp"><span id="cb5-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">auto</span> it1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>ranges<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">::</span>find<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>string_view<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Hello World!"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">),</span> <span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">'o'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb5-2"></span>
<span id="cb5-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// decltype(it1) == std::string_view::iterator</span></span></code></pre></div>
<p>If you call <code>ranges_find()</code> with a temporary <code>std::string</code> instance, you will get <code>std::ranges::dangling</code>, which is a special type and this is just a empty type, meaning if you try to do anything with it, you will get a compilation error, because it doesn’t support any operations.</p>
<p>But, importantly, if you call <code>ranges_find</code> with an <em>lvalue</em>, meaning that the lifetime of the argument is outside of the function call, well, then the type of the range in the function signature actually doesn’t matter; it would not lead to a dangling reference. It would be considered that the function is borrowing from the outside.</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp number-lines code-with-copy"><code class="sourceCode cpp"><span id="cb6-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>string<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> </span>str1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Hello World"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb6-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">auto</span> it3 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>ranges<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">::</span>find<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>str1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">'o'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb6-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// decltype(it3) == std::string::iterator</span></span>
<span id="cb6-4"></span>
<span id="cb6-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>string_view<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> </span>str2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Hello World!"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb6-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">auto</span> it4 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>ranges<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">::</span>find<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>str2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">'o'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb6-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// decltype(it4) == std::string_view::iterator</span></span></code></pre></div>
<p>This is precisely when <code>const</code> references break down, because we cannot actually distinguish which of these two situations we are actually in:</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp number-lines code-with-copy"><code class="sourceCode cpp"><span id="cb7-1"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> fun<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>string<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> rng<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span></span>
<span id="cb7-2"></span>
<span id="cb7-3">fun<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>string<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">));</span>   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// passing a temporary - we are taking ownership</span></span>
<span id="cb7-4"></span>
<span id="cb7-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>string<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> </span>str<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb7-6">fun<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>str<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span>               <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// passing an lvalue - we are borrowing</span></span></code></pre></div>
<p>If we switch to universal references, we can actually interrogate our argument inside of the function, to see if we are actually borrowing the data, and therefore it’s safe to return references and iterators from it without the danger of dangling or if you are actually taking ownership of the data, in which case, you better not.</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp number-lines code-with-copy"><code class="sourceCode cpp"><span id="cb8-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">template</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">typename</span> Rng<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb8-2"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> fun<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>Rng<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;</span> rng<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb8-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">constexpr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>ranges<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">::</span>borrowed_range<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">decltype</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>rng<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)&gt;)</span></span>
<span id="cb8-4">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb8-5">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//borrowed range</span></span>
<span id="cb8-6">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb8-7">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb8-8">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//taking ownership</span></span>
<span id="cb8-9">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb8-10"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb8-11"></span>
<span id="cb8-12">fun<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>string<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">));</span>       <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// taking ownership</span></span>
<span id="cb8-13"></span>
<span id="cb8-14"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>string<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> </span>str<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb8-15">fun<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>str<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span>                   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// borrowing</span></span>
<span id="cb8-16">fun<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span>                    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// borrowing</span></span>
<span id="cb8-17">fun<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>string_view<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">));</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// borrowing</span></span></code></pre></div>
<p>Universal references are also necessary, because of views.</p>
</section>
<section id="c-20-views" class="level2">
<h2 class="anchored" data-anchor-id="c-20-views">C++ 20 Views</h2>
<p>A view is a light-weight object. A view is a range that is:</p>
<ul>
<li>Cheap to move</li>
<li>Cheap to destroy when moved-from</li>
<li>Cheap to copy if copyable</li>
</ul>
<p>Let’s imagine that, we wish to code up a generic <code>print</code> function:</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp number-lines code-with-copy"><code class="sourceCode cpp"><span id="cb9-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include</span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;ranges&gt;</span></span>
<span id="cb9-2"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include</span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;iostream&gt;</span></span>
<span id="cb9-3"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include</span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;concepts&gt;</span></span>
<span id="cb9-4"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include</span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;vector&gt;</span></span>
<span id="cb9-5"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include</span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;list&gt;</span></span>
<span id="cb9-6"></span>
<span id="cb9-7"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">template</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>ranges<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">::</span>input_range<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> </span>Rng<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb9-8"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> print<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>Rng<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;</span> rng<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">){</span></span>
<span id="cb9-9">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>cout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> &lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb9-10">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">auto</span> elem <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> rng<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">){</span></span>
<span id="cb9-11">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>cout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> &lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"["</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"] = "</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> elem<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb9-12">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb9-13"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb9-14"></span>
<span id="cb9-15"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> main<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(){</span></span>
<span id="cb9-16">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>vector<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> </span>vec<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">47</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb9-17">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>list<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> </span>lst<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">47</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb9-18"></span>
<span id="cb9-19">    print<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>vec<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb9-20">    print<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>lst<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb9-21"></span>
<span id="cb9-22">    print<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>views<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">::</span>take<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>vec<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">));</span>    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//print first 3 elements</span></span>
<span id="cb9-23">    print<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>views<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">::</span>take<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>lst<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">));</span>    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//print first 3 elements</span></span>
<span id="cb9-24"></span>
<span id="cb9-25">    print<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>vec <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>views<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">::</span>take<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">));</span>   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//print first 3 elements</span></span>
<span id="cb9-26">    print<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>lst <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>views<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">::</span>take<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">));</span>   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//print first 3 elements</span></span>
<span id="cb9-27"></span>
<span id="cb9-28">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb9-29"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p><a href="https://godbolt.org/z/hr4aTv9s6">Play of Compiler Explorer</a></p>
<p>What you can do since C++ 20 is, you can say, I can take this <code>print</code> function and instead of printing the entire collection as a whole, we can say, well print a view on this collection.</p>
<p>So, I can, for example take the first 3 elements of the vector <code>vec</code> and pass them to the <code>print</code> function. And I can do the same for a list.</p>
<p>There is some nice syntax for this. You can pipe the vector or list into the view using the pipe symbol <code>|</code>.</p>
<p>We can have real pipelines doing consecutive specifications of what to do with the elements, which elements to use. In C++23, we have a <code>zip_view</code> which can zip the elements of two views.</p>
<p>A <code>std::views::iota(1)</code> view generates a sequence of values <img src="https://latex.codecogs.com/png.latex?%5C%7B1,2,3,4,5,%5Cldots%5C%7D">, its an infinite sequence and then we have a second collection, a <code>vector</code> <img src="https://latex.codecogs.com/png.latex?%5C%7B0,%208,%2015,%2047,%2011,%2042%5C%7D">. We can zip the elements of these two views together. The elements are then tuples where the first member is the index, the next one is the vector element.</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp number-lines code-with-copy"><code class="sourceCode cpp"><span id="cb10-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">auto</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>idx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> elem<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>views<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">::</span>zip<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>views<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">::</span>iota<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">),</span> vec<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">))</span></span>
<span id="cb10-2">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>cout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> &lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span>  idx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" : "</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> elem<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
</section>
<section id="member-functions-of-views" class="level2">
<h2 class="anchored" data-anchor-id="member-functions-of-views">Member functions of views</h2>
<p>Views do not provide expensive member functions.</p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp number-lines code-with-copy"><code class="sourceCode cpp"><span id="cb11-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include</span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;ranges&gt;</span></span>
<span id="cb11-2"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include</span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;iostream&gt;</span></span>
<span id="cb11-3"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include</span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;concepts&gt;</span></span>
<span id="cb11-4"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include</span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;vector&gt;</span></span>
<span id="cb11-5"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include</span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;list&gt;</span></span>
<span id="cb11-6"></span>
<span id="cb11-7"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> main<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(){</span></span>
<span id="cb11-8">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>vector<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> </span>vec<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb11-9">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>list<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> </span>lst<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb11-10"></span>
<span id="cb11-11">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">auto</span> vVec <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> vec <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>views<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">::</span>drop<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span>      </span>
<span id="cb11-12">    vVec<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>begin<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span>                               <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// fast: vec.begin() + n</span></span>
<span id="cb11-13">    vVec<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>empty<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span>                               <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// fast: vec.size() &lt;= n</span></span>
<span id="cb11-14">    vVec<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span>                                <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// fast: n &gt;= vec.size() ? 0 : vec.size() - n</span></span>
<span id="cb11-15">    vVec<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span>                                    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// vec[n + idx]</span></span>
<span id="cb11-16"></span>
<span id="cb11-17">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">auto</span> vLst <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> lst <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>views<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">::</span>drop<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb11-18">    vLst<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>begin<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span>                               <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// slow: lst.begin() and n times ++</span></span>
<span id="cb11-19">    vLst<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>empty<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span>                               <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// fast</span></span>
<span id="cb11-20">    vLst<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span>                                <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// fast</span></span>
<span id="cb11-21">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//vLst[2];                                  // Very slow, n + idx times ++</span></span>
<span id="cb11-22"></span>
<span id="cb11-23">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">auto</span> vFlt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> vec <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>views<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">::</span>filter<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">([](</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">){</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">});</span></span>
<span id="cb11-24">    vFlt<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>begin<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span>                               <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// slow: pred for all elements until first is true</span></span>
<span id="cb11-25">    vFlt<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>empty<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span>                               <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// slow: pred for all elements until first is true</span></span>
<span id="cb11-26">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//vFlt.size();                                // Not supported. </span></span>
<span id="cb11-27">                                                <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// slow: pred for all elements until first is true</span></span>
<span id="cb11-28">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//vFlt[2];                                    // Not supported. Slow.</span></span>
<span id="cb11-29">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb11-30"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<section id="example-of-pipeline-of-range-adapters" class="level3">
<h3 class="anchored" data-anchor-id="example-of-pipeline-of-range-adapters">Example of pipeline of range adapters</h3>
<p>Let’s say, we have a <code>map</code> of composers of classic music. We want to deal with that collection, but only those composers who were born after 1700.</p>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp number-lines code-with-copy"><code class="sourceCode cpp"><span id="cb12-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include</span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;map&gt;</span></span>
<span id="cb12-2"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include</span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;ranges&gt;</span></span>
<span id="cb12-3"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include</span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;concepts&gt;</span></span>
<span id="cb12-4"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include</span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;iostream&gt;</span></span>
<span id="cb12-5"></span>
<span id="cb12-6"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> main<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(){</span></span>
<span id="cb12-7">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>map<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>string<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> composers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb12-8">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Bach"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1685</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">},</span></span>
<span id="cb12-9">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Mozart"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1756</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">},</span></span>
<span id="cb12-10">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Beethoven"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1770</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">},</span></span>
<span id="cb12-11">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Tchaikovsky"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1840</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">},</span></span>
<span id="cb12-12">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Chopin"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1810</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">},</span></span>
<span id="cb12-13">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Vivaldi"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1678</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">},</span></span>
<span id="cb12-14">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb12-15"></span>
<span id="cb12-16">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">auto</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> elem <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> composers </span>
<span id="cb12-17">                            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>views<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">::</span>filter<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">([](</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>pair<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>string<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> composer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">){</span></span>
<span id="cb12-18">                                <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>get<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;(</span>composer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1700</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb12-19">                            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">})</span></span>
<span id="cb12-20">                            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>views<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">::</span>take<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb12-21">                            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>views<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">::</span>keys</span>
<span id="cb12-22"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> </span>   <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb12-23">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>cout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> &lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" - "</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> elem <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb12-24">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb12-25"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p><a href="https://godbolt.org/z/rj8cz48nG">Play on Compiler Explorer</a></p>
<p>Let’s only take the first 3 of those composers and we only need their keys, which are the names. And, let’s use that as the right hand side collection we iterate over in a range-based <code>for</code> loop. So, that’s the output of the program.</p>
</section>
</section>
<section id="numerical-sequences" class="level2">
<h2 class="anchored" data-anchor-id="numerical-sequences">Numerical sequences</h2>
<p>In numerical algorithms, one needs often sequences of numerical values. We can use ranges to implement numerical sequences, dynamical systems and numerical algorithms. The range becomes a proxy for the algorithm.</p>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp number-lines code-with-copy"><code class="sourceCode cpp"><span id="cb13-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include</span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;iostream&gt;</span></span>
<span id="cb13-2"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include</span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;type_traits&gt;</span></span>
<span id="cb13-3"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include</span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;concepts&gt;</span></span>
<span id="cb13-4"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include</span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;vector&gt;</span></span>
<span id="cb13-5"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include</span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;ranges&gt;</span></span>
<span id="cb13-6"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include</span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;cmath&gt;</span></span>
<span id="cb13-7"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include</span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;numbers&gt;</span></span>
<span id="cb13-8"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include</span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;functional&gt;</span></span>
<span id="cb13-9"></span>
<span id="cb13-10"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> printSequence<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">auto</span> seq<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb13-11">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>cout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> &lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb13-12">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">auto</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> seq<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb13-13">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>cout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> &lt;&lt;</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" "</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb13-14"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb13-15"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> main<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span></span>
<span id="cb13-16"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb13-17">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/* Generating numerical sequences */</span></span>
<span id="cb13-18">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1024</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb13-19">    </span>
<span id="cb13-20">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// 0, 1, 2, 3, ...</span></span>
<span id="cb13-21">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">auto</span> seq <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>ranges<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">::</span>iota_view<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb13-22">    printSequence<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>seq <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>views<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">::</span>take<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">));</span></span>
<span id="cb13-23"></span>
<span id="cb13-24">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Let's say we are interested to sample a continuous function F</span></span>
<span id="cb13-25">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// at x_0 = 0.0, x_1 = 0.1, x_2 = 0.2, x_3 = 0.3, ....</span></span>
<span id="cb13-26">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// We can generate the sampling domain as:</span></span>
<span id="cb13-27">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">double</span> sampling <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb13-28">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">auto</span> seq2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> seq <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>views<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">::</span>transform<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">([</span>sampling<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">](</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">double</span> i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb13-29">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> sampling <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb13-30">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">});</span></span>
<span id="cb13-31"></span>
<span id="cb13-32">    printSequence<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>seq2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>views<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">::</span>take<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">));</span></span>
<span id="cb13-33"></span>
<span id="cb13-34">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// f_n = sin(2x_n) + 0.1</span></span>
<span id="cb13-35">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">auto</span> seq3 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> seq2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>views<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">::</span>transform<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">([](</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">double</span> x_n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb13-36">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> sin<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> x_n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb13-37">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">});</span></span>
<span id="cb13-38"></span>
<span id="cb13-39">    printSequence<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>seq3 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>views<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">::</span>take<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">));</span></span>
<span id="cb13-40"></span>
<span id="cb13-41">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// We can wrap this logic into a lambda that accepts a sampling (frequency),</span></span>
<span id="cb13-42">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// an arbitrary function F and generates the sequence F(x[0]), F(x[1]), ...</span></span>
<span id="cb13-43">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">auto</span> sequence <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[](</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">double</span> sampling<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">auto</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;</span> F<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb13-44">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">auto</span> seq <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>ranges<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">::</span>iota_view<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb13-45">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> seq <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>views<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">::</span>transform<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">([</span>sampling<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> F<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">](</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">double</span> i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb13-46">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> F<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>sampling <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb13-47">            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">});</span></span>
<span id="cb13-48">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb13-49"></span>
<span id="cb13-50">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/* Great for scientific computing! */</span></span>
<span id="cb13-51">    printSequence<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>sequence<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1024</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[](</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">double</span> x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> sin<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;})</span></span>
<span id="cb13-52">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>views<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">::</span>take<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">));</span></span>
<span id="cb13-53"></span>
<span id="cb13-54">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/* Custom break conditions */</span></span>
<span id="cb13-55">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">auto</span> identity <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[](</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">double</span> x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;};</span></span>
<span id="cb13-56">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">auto</span> seq4 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>views<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">::</span>take_while<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>sequence<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1024</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> identity<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">),</span></span>
<span id="cb13-57">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[](</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">double</span> x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;}</span></span>
<span id="cb13-58">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb13-59"></span>
<span id="cb13-60">    printSequence<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>seq4<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb13-61"></span>
<span id="cb13-62">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/* Combine sequences : You get a sequence of tuples */</span></span>
<span id="cb13-63">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">auto</span> result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>ranges<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">::</span>zip_view<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>sequence<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1024</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> identity<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">),</span> sequence<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1024</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> identity<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">));</span></span>
<span id="cb13-64"></span>
<span id="cb13-65">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb13-66"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p><a href="https://godbolt.org/z/nEcjYzv97">Play on Compiler Explorer</a></p>
<pre><code>0 1 2 3 4 
0 0.1 0.2 0.3 0.4 
0.1 0.298669 0.489418 0.664642 0.817356 
0.1 0.298669 0.489418 0.664642 0.817356 
0 0.1 0.2 0.3 0.4 </code></pre>
</section>
<section id="custom-ranges" class="level2">
<h2 class="anchored" data-anchor-id="custom-ranges">Custom Ranges</h2>
<p>Consider the <a href="https://en.wikipedia.org/wiki/Newton%27s_method">Newton</a>’s root-finding algorithm. The Newton’s algorithm is:</p>
<ul>
<li>Choose <img src="https://latex.codecogs.com/png.latex?x_0">.</li>
<li>Iterate <img src="https://latex.codecogs.com/png.latex?x_%7Bn+1%7D%20=%20x_n%20-%20%5Cfrac%7Bf(x_n)%7D%7Bf'(x_n)%7D"></li>
</ul>
<p>To implement numerical schemes like Newton’s, we can hand roll-out a custom range called <code>map_range</code>. A <code>map_range</code> represents the fixed-point iteration algorithm. Given an initial-value <img src="https://latex.codecogs.com/png.latex?x_0"> and a function <img src="https://latex.codecogs.com/png.latex?f">, <code>map_range</code> represents the recursive sequence</p>
<p><img src="https://latex.codecogs.com/png.latex?x_%7Bn+1%7D%20=%20f(x_n)"></p>
<p>that is</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5C%7Bx_0,%20f(x_0),%20f(f(x_0)),%20%5Cldots,%20%5C%7D%0A"></p>
<p>From basic analysis, it is a well-known fact, that if <img src="https://latex.codecogs.com/png.latex?f"> is a contraction, then the sequence <img src="https://latex.codecogs.com/png.latex?(y_n)_%7Bn=0%7D%5E%7B%5Cinfty%7D">, where <img src="https://latex.codecogs.com/png.latex?y_%7Bn+1%7D%20=%20f(x_n)"> converges to a finite value.</p>
<p><code>map_range</code> holds three member-variables : the current state <code>m_x</code>, the function <code>m_f</code> and the break condition <code>m_break_condition</code>. <code>map_range</code> must satisfy the <code>std::ranges::range</code> concept.</p>
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp number-lines code-with-copy"><code class="sourceCode cpp"><span id="cb15-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include</span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;iostream&gt;</span></span>
<span id="cb15-2"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include</span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;type_traits&gt;</span></span>
<span id="cb15-3"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include</span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;concepts&gt;</span></span>
<span id="cb15-4"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include</span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;vector&gt;</span></span>
<span id="cb15-5"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include</span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;ranges&gt;</span></span>
<span id="cb15-6"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include</span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;cmath&gt;</span></span>
<span id="cb15-7"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include</span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;numbers&gt;</span></span>
<span id="cb15-8"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include</span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;functional&gt;</span></span>
<span id="cb15-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/* </span></span>
<span id="cb15-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">We write a new type map_range that will be used to implement fixed-point iteration in C++.</span></span>
<span id="cb15-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">Beginning with the initial value x[0], map_range represents the recursive sequence</span></span>
<span id="cb15-12"></span>
<span id="cb15-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">x[n+1] = F(x[n])</span></span>
<span id="cb15-14"></span>
<span id="cb15-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">that is {x[0], F(x[0]), F(F(x[0])), F(F(F(x[0]))), ...</span></span>
<span id="cb15-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*/</span></span>
<span id="cb15-17"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">template</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">typename</span> T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">typename</span> Func<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">typename</span> Cond<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb15-18"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> map_range<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb15-19"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">private</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb15-20">    T <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_x</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb15-21">    Func <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_f</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb15-22">    Cond <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_break_condition</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb15-23"></span>
<span id="cb15-24">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> iterator <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb15-25">        map_range<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> r<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb15-26"></span>
<span id="cb15-27">        iterator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>map_range <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">r_</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> r<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">r_</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span></span>
<span id="cb15-28"></span>
<span id="cb15-29">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/* Compute the next iterate x[n+1] = f(x[n]) */</span></span>
<span id="cb15-30">        iterator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">operator</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb15-31">            r<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_x</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> r<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_f</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>r<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_x</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb15-32">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>r<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_break_condition</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>r<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_x</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">))</span></span>
<span id="cb15-33">                r <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">nullptr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb15-34">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(*</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">this</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb15-35">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb15-36"></span>
<span id="cb15-37">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/* Dereference the iterator and return the current state x[n]*/</span></span>
<span id="cb15-38">        T <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">operator</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb15-39">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> r<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_x</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb15-40">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb15-41"></span>
<span id="cb15-42">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">bool</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">operator</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==(</span>iterator <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> o<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb15-43">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>o<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>r <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> r<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb15-44">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb15-45"></span>
<span id="cb15-46">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">bool</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">operator</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=(</span>iterator <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> o<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span>  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb15-47">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!(</span>o <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">this</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb15-48">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb15-49">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb15-50"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb15-51">    map_range<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>T x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> Func func<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> Cond cond <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb15-52">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_x</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb15-53">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_f</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>func<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb15-54">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_break_condition</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>cond<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb15-55">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb15-56"></span>
<span id="cb15-57">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// begin() and end() methods which return iterators</span></span>
<span id="cb15-58">    iterator begin<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> iterator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">this</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb15-59">    iterator end<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span>  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> iterator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">nullptr</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb15-60">    T value<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_x</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb15-61"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb15-62"></span>
<span id="cb15-63"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">template</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">typename</span> T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">typename</span> Func<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">typename</span> Cond<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb15-64"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">auto</span> make_range_map<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>T value<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> Func func<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> Cond cond<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb15-65">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> map_range<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>value<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> func<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> cond<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb15-66"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb15-67"></span>
<span id="cb15-68"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> main<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(){</span></span>
<span id="cb15-69">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/* Let's solve exp(-x^2 / 2 ) = 0 */</span></span>
<span id="cb15-70">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>function<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">double</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">double</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)&gt;</span> f <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[](</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">auto</span> x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> exp<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb15-71">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>function<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">double</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">double</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)&gt;</span> df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[](</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">auto</span> x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> exp<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb15-72">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">auto</span> cond <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>f<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">](</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">double</span> x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>abs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>f<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">))</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0e-12</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb15-73">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">auto</span> range <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> newton_range<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> f<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> df<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> cond <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb15-74"></span>
<span id="cb15-75">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>cout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> &lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Solving f(x) = exp(-0.5 * x * x) = 0"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb15-76">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">auto</span> r <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> range<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb15-77">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>cout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> &lt;&lt;</span> r <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" "</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb15-78">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb15-79"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p><a href="https://godbolt.org/z/7q6PK361v">Play on Compiler Explorer</a></p>
</section>
</section>


<div id="quarto-appendix" class="default"><section id="references" class="level1 appendix"><h2 class="anchored quarto-appendix-heading">References</h2><div class="quarto-appendix-contents">

<ul>
<li><em><a href="https://youtu.be/qXdPFj-FTcA?si=3xX3r8eIF4TlWXwr">Ranges and Iterators for numerical Problems</a>, Karsten Ahnert at Meeting C++ 2014</em></li>
<li><em><a href="https://www.youtube.com/watch?v=UsyA7zEC0DE&amp;t=989s">What is a range in C++</a>, Simon Toth, C++ on the Sea, 2024</em></li>
</ul>


</div></section></div> ]]></description>
  <category>C++</category>
  <guid>http://quantdev.blog/posts/c++-ranges/index.html</guid>
  <pubDate>Fri, 31 Jan 2025 00:00:00 GMT</pubDate>
  <media:content url="http://quantdev.blog/posts/c++-ranges/cpp.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Collateralized Discounting</title>
  <dc:creator>Quasar </dc:creator>
  <link>http://quantdev.blog/posts/pricing-under-collateral/index.html</link>
  <description><![CDATA[ 




<section id="collateralized-discounting" class="level1">
<h1>Collateralized Discounting</h1>
<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<p>In the past, standard derivatives pricing theory assumed the existence of a <strong>risk-free rate</strong> for derivatives discounting. Until the global financial crisis(GFC), this assumption worked well, but has since been replaced by <em>Collateral adjusted valuation</em>(CAV). <strong>Collateralized discounting</strong> is standard practice on derivatives trading desks.</p>
<p>A risk-neutral measure can still be defined and much of the pricing technology developed in the traditional setting can be reused.</p>
<p>The theoretical foundations of collateralized discounting are the papers <a href="http://janroman.dhis.org/finance/Kreditrisk/Risk_Cooking%20with%20collateralpdf.pdf">Cooking with collateral</a> and <a href="https://www.researchgate.net/profile/Vladimir-Piterbarg-2/publication/284078682_Funding_beyond_Discounting_Collateral_Agreements_and_Derivatives_Pricing/links/614c85a9a595d06017e55b0e/Funding-beyond-Discounting-Collateral-Agreements-and-Derivatives-Pricing.pdf">Funding beyond Discounting</a> by Piterbarg. I summarize the main arguments here.</p>
</section>
<section id="pricing-under-collateral" class="level2">
<h2 class="anchored" data-anchor-id="pricing-under-collateral">Pricing under collateral</h2>
<p>We replicate the derivative worth <img src="https://latex.codecogs.com/png.latex?V(t)">, by an amount <img src="https://latex.codecogs.com/png.latex?%5Ctheta_1"> of the underlying <img src="https://latex.codecogs.com/png.latex?X">, an amount <img src="https://latex.codecogs.com/png.latex?%5Ctheta_2"> of funding account <img src="https://latex.codecogs.com/png.latex?B_f(t)"> and an amount <img src="https://latex.codecogs.com/png.latex?%5Ctheta_3"> of collateral account <img src="https://latex.codecogs.com/png.latex?B_c(t)">. The value of the portfolio at time <img src="https://latex.codecogs.com/png.latex?t"> is:</p>
<p><span id="eq-replicating-portfolio"><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign*%7D%0AV(t)%20=%20%5Ctheta_1(t)%20X(t)%20+%20%5Ctheta_2(t)%20B_f(t)%20+%20%5Ctheta_3(t)%20B_c(t)%0A%5Cend%7Balign*%7D%0A%5Ctag%7B1%7D"></span></p>
<p>The self-financing assumption implies that:</p>
<p><span id="eq-derivative-of-portfolio-price"><img src="https://latex.codecogs.com/png.latex?%0AdV(t)%20=%20%5Ctheta_1%20dX_t%20+%20%5Ctheta_2%20dB_f(t)%20+%20%5Ctheta_3%20dB_c(t)%0A%5Ctag%7B2%7D"></span></p>
<p>Assume that the dynamics of the three assets is as follows:</p>
<p><span id="eq-dynamics-of-asset-prices"><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign*%7D%0AdX(t)%20&amp;=%20%5Cmu%5E%7B%5Cmathbb%7BP%7D%7D(t)%20X(t)%20dt%20+%20%5Csigma(t)X(t)dW%5E%5Cmathbb%7BP%7D(t)%5C%5C%0AdB_f(t)%20&amp;=%20r_f(t)B_f(t)%20dt%5C%5C%0AdB_c(t)%20&amp;=%20r_c(t)B_c(t)%20dt%0A%5Cend%7Balign*%7D%0A%5Ctag%7B3%7D"></span></p>
<p>The derivative’s price dynamics <img src="https://latex.codecogs.com/png.latex?dV(t,X_t)"> is obtained by the Ito’s lemma as:</p>
<p><span id="eq-dynamics-of-the-derivative-price"><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Baligned%7D%0AdV(%20t,X)%20&amp;%20=%5Cfrac%7B%5Cpartial%20V%7D%7B%5Cpartial%20t%7D%20dt+%5Cfrac%7B%5Cpartial%20V%7D%7B%5Cpartial%20X%7D%20dX_%7Bt%7D%20+%5Cfrac%7B1%7D%7B2%7D%5Cfrac%7B%5Cpartial%20%5E%7B2%7D%20V%7D%7B%5Cpartial%20X%5E%7B2%7D%7D(%20dX_%7Bt%7D)%5E%7B2%7D%5C%5C%0A&amp;%20=%5Cfrac%7B%5Cpartial%20V%7D%7B%5Cpartial%20t%7D%20dt+%5Cfrac%7B%5Cpartial%20V%7D%7B%5Cpartial%20X%7D%5Cleft(%20%5Cmu%20%5E%7B%5Cmathbb%7BP%7D%7D%20X_%7Bt%7D%20dt+%5Csigma%20_%7Bt%7D%20X_%7Bt%7D%20dW_%7Bt%7D%5E%7B%5Cmathbb%7BP%7D%7D%5Cright)%20+%5Cfrac%7B1%7D%7B2%7D%20%5Csigma%20_%7Bt%7D%5E%7B2%7D%20X_%7Bt%7D%5E%7B2%7D%20dt%5C%5C%0A&amp;%20=%5Cleft(%5Cfrac%7B%5Cpartial%20V%7D%7B%5Cpartial%20t%7D%20+%5Cmu%20%5E%7B%5Cmathbb%7BP%7D%7D%20X_%7Bt%7D%5Cfrac%7B%5Cpartial%20V%7D%7B%5Cpartial%20X%7D%20+%5Cfrac%7B1%7D%7B2%7D%20%5Csigma%20_%7Bt%7D%5E%7B2%7D%20X_%7Bt%7D%5E%7B2%7D%5Cfrac%7B%5Cpartial%20%5E%7B2%7D%20V%7D%7B%5Cpartial%20X%5E%7B2%7D%7D%5Cright)%20dt+%5Csigma%20_%7Bt%7D%20X_%7Bt%7D%5Cfrac%7B%5Cpartial%20V%7D%7B%5Cpartial%20X%7D%20dW_%7Bt%7D%5E%7B%5Cmathbb%7BP%7D%7D%0A%5Cend%7Baligned%7D%0A%5Ctag%7B4%7D"></span></p>
<p>Substituting Equation&nbsp;3 and Equation&nbsp;4 in Equation&nbsp;2, we have:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Baligned%7D%0A%5Cleft(%5Cfrac%7B%5Cpartial%20V%7D%7B%5Cpartial%20t%7D%20+%5Cmu%20%5E%7B%5Cmathbb%7BP%7D%7D%20X_%7Bt%7D%5Cfrac%7B%5Cpartial%20V%7D%7B%5Cpartial%20X%7D%20+%5Cfrac%7B1%7D%7B2%7D%20%5Csigma%20_%7Bt%7D%5E%7B2%7D%20X_%7Bt%7D%5E%7B2%7D%5Cfrac%7B%5Cpartial%20%5E%7B2%7D%20V%7D%7B%5Cpartial%20X%5E%7B2%7D%7D%5Cright)%20dt+%5Csigma%20_%7Bt%7D%20X_%7Bt%7D%5Cfrac%7B%5Cpartial%20V%7D%7B%5Cpartial%20X%7D%20dW_%7Bt%7D%5E%7B%5Cmathbb%7BP%7D%7D%20&amp;%20=%5Ctheta%20_%7B1%7D%5Cleft(%20%5Cmu%20%5E%7B%5Cmathbb%7BP%7D%7D%20X_%7Bt%7D%20dt+%5Csigma%20_%7Bt%7D%20X_%7Bt%7D%20dW_%7Bt%7D%5E%7B%5Cmathbb%7BP%7D%7D%5Cright)%5C%5C%0A&amp;%20+%5Ctheta%20_%7B2%7D(%20r_%7Bf%7D(%20t)%20B_%7Bf%7D(%20t)%20dt)%20+%5Ctheta%20_%7B3%7D(%20r_%7Bc%7D(%20t)%20B_%7Bc%7D(%20t)%20dt)%0A%5Cend%7Baligned%7D%0A"></p>
<p>The perfect collateral condition implies that the collateral held at any time equals the mark-to-market(MtM) value of the derivative. So, <img src="https://latex.codecogs.com/png.latex?B_c(t)%20=%20V(t)">. So, we have:</p>
<p><span id="eq-price-pde"><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Baligned%7D%0A%5Cleft(%5Cfrac%7B%5Cpartial%20V%7D%7B%5Cpartial%20t%7D%20+%5Cmu%20%5E%7B%5Cmathbb%7BP%7D%7D%20X_%7Bt%7D%5Cfrac%7B%5Cpartial%20V%7D%7B%5Cpartial%20X%7D%20+%5Cfrac%7B1%7D%7B2%7D%20%5Csigma%20_%7Bt%7D%5E%7B2%7D%20X_%7Bt%7D%5E%7B2%7D%5Cfrac%7B%5Cpartial%20%5E%7B2%7D%20V%7D%7B%5Cpartial%20X%5E%7B2%7D%7D%5Cright)%20dt+%5Csigma%20_%7Bt%7D%20X_%7Bt%7D%5Cfrac%7B%5Cpartial%20V%7D%7B%5Cpartial%20X%7D%20dW_%7Bt%7D%5E%7B%5Cmathbb%7BP%7D%7D%20&amp;%20=%5Ctheta%20_%7B1%7D%5Cleft(%20%5Cmu%20%5E%7B%5Cmathbb%7BP%7D%7D%20X_%7Bt%7D%20dt+%5Csigma%20_%7Bt%7D%20X_%7Bt%7D%20dW_%7Bt%7D%5E%7B%5Cmathbb%7BP%7D%7D%5Cright)%5C%5C%0A&amp;%20+%5Ctheta%20_%7B2%7D(%20r_%7Bf%7D(%20t)%20B_%7Bf%7D(%20t)%20dt)%20+%5Ctheta%20_%7B3%7D(%20r_%7Bc%7D(%20t)%20V(%20t)%20dt)%0A%5Cend%7Baligned%7D%0A%5Ctag%7B5%7D"></span></p>
<p>Setting <img src="https://latex.codecogs.com/png.latex?%5Ctheta_3(t)%20=%201"> in Equation&nbsp;1, we get :</p>
<p><span id="eq-rel-between-theta1-and-theta2"><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign*%7D%0A%5Ctheta_2(t)B_f(t)%20=%20%5Ctheta_1(t)X(t)%0A%5Cend%7Balign*%7D%0A%5Ctag%7B6%7D"></span></p>
<p>Substituting Equation&nbsp;6 in Equation&nbsp;5, we get:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign*%7D%0A%5Cleft(%5Cfrac%7B%5Cpartial%20V%7D%7B%5Cpartial%20t%7D%20+%5Cmu%20%5E%7B%5Cmathbb%7BP%7D%7D%20X_%7Bt%7D%5Cfrac%7B%5Cpartial%20V%7D%7B%5Cpartial%20X%7D%20+%5Cfrac%7B1%7D%7B2%7D%20%5Csigma%20_%7Bt%7D%5E%7B2%7D%20X_%7Bt%7D%5E%7B2%7D%5Cfrac%7B%5Cpartial%20%5E%7B2%7D%20V%7D%7B%5Cpartial%20X%5E%7B2%7D%7D%5Cright)%20dt+%5Csigma%20_%7Bt%7D%20X_%7Bt%7D%5Cfrac%7B%5Cpartial%20V%7D%7B%5Cpartial%20X%7D%20dW_%7Bt%7D%5E%7B%5Cmathbb%7BP%7D%7D%20&amp;%20=%5Ctheta%20_%7B1%7D%5Cleft(%20%5Cmu%20%5E%7B%5Cmathbb%7BP%7D%7D%20X_%7Bt%7D%20dt+%5Csigma%20_%7Bt%7D%20X_%7Bt%7D%20dW_%7Bt%7D%5E%7B%5Cmathbb%7BP%7D%7D%5Cright)%5C%5C%0A&amp;%20-%5Ctheta%20_%7B1%7D(%20r_%7Bf%7D(%20t)%20X(%20t)%20dt)%20+(%20r_%7Bc%7D(%20t)%20V(%20t)%20dt)%0A%5Cend%7Balign*%7D%0A"></p>
<p>Re-arranging the terms, we get:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign*%7D%0A%5Cleft(%5Cfrac%7B%5Cpartial%20V%7D%7B%5Cpartial%20t%7D%20-%5Cmu%20%5E%7B%5Cmathbb%7BP%7D%7D%20X_%7Bt%7D%5Cleft(%20%5Ctheta%20_%7B1%7D%20-%5Cfrac%7B%5Cpartial%20V%7D%7B%5Cpartial%20X%7D%5Cright)%20+r_%7Bf%7D(%20t)%20%5Ctheta%20_%7B1%7D(%20t)%20X(%20t)%20+%5Cfrac%7B1%7D%7B2%7D%20%5Csigma%20_%7Bt%7D%5E%7B2%7D%20X_%7Bt%7D%5E%7B2%7D%5Cfrac%7B%5Cpartial%20%5E%7B2%7D%20V%7D%7B%5Cpartial%20X%5E%7B2%7D%7D%5Cright)%20dt%20&amp;%20=%5Csigma%20_%7Bt%7D%20X_%7Bt%7D%5Cleft(%20%5Ctheta%20_%7B1%7D(%20t)%20-%5Cfrac%7B%5Cpartial%20V%7D%7B%5Cpartial%20X%7D%5Cright)%20dW_%7Bt%7D%5E%7B%5Cmathbb%7BP%7D%7D%5C%5C%0A&amp;%20+(%20r_%7Bc%7D(%20t)%20V(%20t)%20dt)%0A%5Cend%7Balign*%7D%0A"></p>
<p>Setting <img src="https://latex.codecogs.com/png.latex?%5Ctheta_(t)%20=%20%5Cfrac%7B%5Cpartial%20V(t)%7D%7B%5Cpartial%20X%7D">, we get:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign*%7D%0A%5Cleft(%5Cfrac%7B%5Cpartial%20V%7D%7B%5Cpartial%20t%7D%20+r_%7Bf%7D(%20t)%20X(%20t)%5Cfrac%7B%5Cpartial%20V%7D%7B%5Cpartial%20X%7D%20+%5Cfrac%7B1%7D%7B2%7D%20%5Csigma%20_%7Bt%7D%5E%7B2%7D%20X_%7Bt%7D%5E%7B2%7D%5Cfrac%7B%5Cpartial%20%5E%7B2%7D%20V%7D%7B%5Cpartial%20X%5E%7B2%7D%7D%5Cright)%20dt%20&amp;%20=r_%7Bc%7D(%20t)%20V(%20t)%20dt%0A%5Cend%7Balign*%7D%0A"></p>
<p>or equivalently:</p>
<p><span id="eq-pricing-pde-collateralized-derivative"><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign*%7D%0A%5Cleft(%5Cfrac%7B%5Cpartial%20V%7D%7B%5Cpartial%20t%7D%20+r_%7Bf%7D(%20t)%20X(%20t)%5Cfrac%7B%5Cpartial%20V%7D%7B%5Cpartial%20X%7D%20+%5Cfrac%7B1%7D%7B2%7D%20%5Csigma%20_%7Bt%7D%5E%7B2%7D%20X_%7Bt%7D%5E%7B2%7D%5Cfrac%7B%5Cpartial%20%5E%7B2%7D%20V%7D%7B%5Cpartial%20X%5E%7B2%7D%7D%5Cright)%20&amp;%20=r_%7Bc%7D(%20t)%20V(%20t)%0A%5Cend%7Balign*%7D%0A%5Ctag%7B7%7D"></span></p>
<p>This is the pricing PDE. Applying <a href="https://quantdev.blog/posts/the_markov_property/#the-feynman-kac-formula">Feynman-Kac</a>, the solution to this PDE for the boundary condition:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0AV(T,x)%20=%20g(x)%0A"></p>
<p>has the stochastic representation:</p>
<p><span id="eq-pricing-formula"><img src="https://latex.codecogs.com/png.latex?%0AV(t,x)%20=%20%5Cmathbb%7BE%7D%5E%7B%5Cmathbb%7BQ%7D%5Ef%7D%5Be%5E%7B-%5Cint_t%5ET%20r_c(t)%20dt%20%7D%20g(X_T)%7C%5Cmathcal%7BF%7D_t%5D%0A%5Ctag%7B8%7D"></span></p>
<p>where <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%7BQ%7D%5Ef"> is the measure associated with the funding account numeraire <img src="https://latex.codecogs.com/png.latex?B_f(t)"> and the underlying risky asset has the dynamics:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0AdX_t%20=%20r_f(t)X(t)dt+%20%5Csigma(t)X(t)dW%5E%7B%5Cmathbb%7BQ%7D%5Ef%7D(t)%0A"></p>
</section>
</section>


<div id="quarto-appendix" class="default"><section id="references" class="level1 appendix"><h2 class="anchored quarto-appendix-heading">References</h2><div class="quarto-appendix-contents">

<ul>
<li><em><a href="http://janroman.dhis.org/finance/Kreditrisk/Risk_Cooking%20with%20collateralpdf.pdf">Cooking with collateral</a>, Vladimir Piterbarg</em></li>
<li><em><a href="https://www.researchgate.net/profile/Vladimir-Piterbarg-2/publication/284078682_Funding_beyond_Discounting_Collateral_Agreements_and_Derivatives_Pricing/links/614c85a9a595d06017e55b0e/Funding-beyond-Discounting-Collateral-Agreements-and-Derivatives-Pricing.pdf">Funding beyond Discounting</a>, Vladimir Piterbarg</em></li>
</ul>


</div></section></div> ]]></description>
  <category>Back to the basics</category>
  <guid>http://quantdev.blog/posts/pricing-under-collateral/index.html</guid>
  <pubDate>Mon, 27 Jan 2025 00:00:00 GMT</pubDate>
  <media:content url="http://quantdev.blog/posts/pricing-under-collateral/image.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>IRS, Caps, Floors and Swaptions</title>
  <dc:creator>Quasar </dc:creator>
  <link>http://quantdev.blog/posts/irs_caps_floors_and_swaptions/index.html</link>
  <description><![CDATA[ 




<section id="irs-caps-floors-and-swaptions" class="level1">
<h1>IRS, Caps, Floors and Swaptions</h1>
<section id="fundamentals" class="level2">
<h2 class="anchored" data-anchor-id="fundamentals">Fundamentals</h2>
<p>I review here a few basic definitions relevant to the interest-rate world.</p>
<div id="def-zero-coupon-bond" class="theorem definition">
<p><span class="theorem-title"><strong>Definition 1 (Zero-coupon bond.) </strong></span>A <img src="https://latex.codecogs.com/png.latex?T">-maturity zero-coupon bond (pure discount bond) is a contract that guarantees its holder the payment of <img src="https://latex.codecogs.com/png.latex?1%5C$"> at time <img src="https://latex.codecogs.com/png.latex?T">, with no intermediate payments. The contract value at time <img src="https://latex.codecogs.com/png.latex?t%20%3C%20T"> is denoted by <img src="https://latex.codecogs.com/png.latex?P(t,T)">. Clearly, <img src="https://latex.codecogs.com/png.latex?P(T,T)%20=%201"> <img src="https://latex.codecogs.com/png.latex?%5Cforall%20T%5Cin%5B0,%5Cinfty)">.</p>
</div>
<div id="def-continuously-compounded-spot-interest-rate" class="theorem definition">
<p><span class="theorem-title"><strong>Definition 2 (Continuously-compounded spot interest rate.) </strong></span>The continuously-compounded spot interest rate prevailing at time <img src="https://latex.codecogs.com/png.latex?t"> for the maturity <img src="https://latex.codecogs.com/png.latex?T"> is denoted by <img src="https://latex.codecogs.com/png.latex?R(t,T)"> and is the constant rate at which an investment of <img src="https://latex.codecogs.com/png.latex?P(t,T)"> units of currency at time <img src="https://latex.codecogs.com/png.latex?t"> accrues continuously to yield a unit amount of currency at maturity <img src="https://latex.codecogs.com/png.latex?T">.</p>
<p><span id="eq-continuously-compounded-spot-interest-rate"><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign*%7D%0AR(t,T)%20:=%20-%20%5Cfrac%7B%5Cln%20P(t,T)%7D%7B%5Ctau(t,T)%7D%0A%5Cend%7Balign*%7D%0A%5Ctag%7B1%7D"></span></p>
<p>The continuously-compounded interest rate is therefore a constant rate that is consistent with the zero-coupon-bond prices such that:</p>
<p><span id="eq-zero-coupon-bond-price-equation-1"><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign*%7D%0Ae%5E%7BR(t,T)%5Ctau(t,T)%7DP(t,T)%20=%201%0A%5Cend%7Balign*%7D%0A%5Ctag%7B2%7D"></span></p>
<p>from which we can express the bond price in terms of the continuously compounded rate <img src="https://latex.codecogs.com/png.latex?R">:</p>
<p><span id="eq-zero-coupon-bond-price-equation-2"><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign*%7D%0AP(t,T)%20=%20e%5E%7B-R(t,T)%5Ctau(t,T)%7D%0A%5Cend%7Balign*%7D%0A%5Ctag%7B3%7D"></span></p>
</div>
<div id="def-simply-compounded-spot-interest-rate" class="theorem definition">
<p><span class="theorem-title"><strong>Definition 3 (Simply-compounded spot interest rate.) </strong></span>The simply-compounded spot interest rate prevailing at time <img src="https://latex.codecogs.com/png.latex?t"> for the maturity <img src="https://latex.codecogs.com/png.latex?T"> is denoted <img src="https://latex.codecogs.com/png.latex?L(t,T)"> and is the constant rate at which an investment has to be made to produce an amount of one unit of currency at maturity, starting from <img src="https://latex.codecogs.com/png.latex?P(t,T)"> units of currency at time <img src="https://latex.codecogs.com/png.latex?t">, when accruing occurs proportionally to the investment time.</p>
<p><span id="eq-simply-compounded-spot-interest-rate"><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign*%7D%0AP(t,T)(1%20+%20L(t,T)%5Ctau(t,T))%20=%201%0A%5Cend%7Balign*%7D%0A%5Ctag%7B4%7D"></span></p>
<p>So, the bond price can be expressed in terms of <img src="https://latex.codecogs.com/png.latex?L"> as:</p>
<p><span id="eq-bond-price-in-terms-of-a-simply-compounded-spot-rate"><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign*%7D%0AP(t,T)%20=%20%5Cfrac%7B1%7D%7B1%20+%20L(t,T)%5Ctau(t,T)%7D%0A%5Cend%7Balign*%7D%0A%5Ctag%7B5%7D"></span></p>
</div>
<div id="def-annually-compounded-spot-interest-rate" class="theorem definition">
<p><span class="theorem-title"><strong>Definition 4 (Annually-compounded spot interest rate.) </strong></span>The annually-compounded spot interest rate prevailing at time <img src="https://latex.codecogs.com/png.latex?t"> for the maturity <img src="https://latex.codecogs.com/png.latex?T"> is denoted by <img src="https://latex.codecogs.com/png.latex?Y(t,T)"> and is the constant (annualized) rate at which an investment has to be made to produce an amount of one unit of currency at maturity, starting from <img src="https://latex.codecogs.com/png.latex?P(t,T)"> units of currency at time <img src="https://latex.codecogs.com/png.latex?t">, reinvesting the obtained amounts once a year. We have:</p>
<p><span id="eq-annually-compounded-spot-interest-rate"><img src="https://latex.codecogs.com/png.latex?%0AP(t,T)(1+Y(t,T))%5E%7B%5Ctau(t,T)%7D%20=%201%0A%5Ctag%7B6%7D"></span></p>
</div>
<p>Equivalently,</p>
<p><span id="eq-annually-compounded-spot-interest-rate-as-func-of-bond-price"><img src="https://latex.codecogs.com/png.latex?%0AY(t,T)%20=%20%5Cleft%5B%5Cfrac%7B1%7D%7BP(t,T)%7D%5Cright%5D%5E%7B%5Cfrac%7B1%7D%7B%5Ctau(t,T)%7D%7D%20-%201%0A%5Ctag%7B7%7D"></span></p>
<div id="def-zero-coupon-curve" class="theorem definition">
<p><span class="theorem-title"><strong>Definition 5 (Zero-coupon curve.) </strong></span>The zero-coupon curve(sometimes also referred to as the <em>yield curve</em>) at time <img src="https://latex.codecogs.com/png.latex?t"> is the graph of the function</p>
<p><span id="eq-zero-coupon-curve"><img src="https://latex.codecogs.com/png.latex?%0AT%20%5Cmapsto%20%5Cbegin%7Bcases%7D%0AL(t,T)%20&amp;%20t%20%3C%20T%20%5Cleq%20t%20+%201%20%5Ctext%7B%20years%20%7D%5C%5C%0AY(t,T)%20&amp;%20T%20%5Cgeq%20t%20+%201%5Ctext%7B%20years%20%7D%0A%5Cend%7Bcases%7D%0A%5Ctag%7B8%7D"></span></p>
</div>
<div id="def-discounting-curve" class="theorem definition">
<p><span class="theorem-title"><strong>Definition 6 (Discounting Curve.) </strong></span>The discounting curve at time <img src="https://latex.codecogs.com/png.latex?t"> is the plot of the function:</p>
<p><span id="eq-discounting-curve"><img src="https://latex.codecogs.com/png.latex?%0AT%20%5Cmapsto%20P(t,T),%20%5Cquad%20T%20%3E%20t%0A%5Ctag%7B9%7D"></span></p>
<p>Such a curve is also referred to as the term structure of discount factors.</p>
</div>
<div id="def-simply-compounded-forward-rate" class="theorem definition">
<p><span class="theorem-title"><strong>Definition 7 (Simply-compounded forward interest rate.) </strong></span>The simply compounded forward interest rate prevailing at time <img src="https://latex.codecogs.com/png.latex?t"> for the expiry <img src="https://latex.codecogs.com/png.latex?T%20%3E%20t">, maturity <img src="https://latex.codecogs.com/png.latex?S%20%3E%20T"> and is defined by:</p>
<p><span id="eq-simply-compounded-forward-interest-rate"><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign*%7D%0AF(t;T,S)%20:=%20%5Cfrac%7B1%7D%7B%5Ctau(T,S)%7D%5Cleft(%5Cfrac%7BP(t,T)%7D%7BP(t,S)%7D%20-%201%5Cright)%0A%5Cend%7Balign*%7D%0A%5Ctag%7B10%7D"></span></p>
</div>
<div id="def-instantaneous-forward-rate" class="theorem definition">
<p><span class="theorem-title"><strong>Definition 8 (Instantaneous forward rate.) </strong></span>The instantaneous forward interest rate prevailing at time <img src="https://latex.codecogs.com/png.latex?t"> for the maturity <img src="https://latex.codecogs.com/png.latex?T%20%3E%20t"> is denoted by <img src="https://latex.codecogs.com/png.latex?f(t,T)"> and is defined by:</p>
<p><span id="eq-instantaneous-forward-rate"><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign*%7D%0Af(t,T)%20&amp;=%20%5Clim_%7BS%20%5Cto%20T%5E+%7D%20F(t;T,S)%20%5C%5C%0A&amp;=%20%5Clim_%7BS%20%5Cto%20T%5E+%7D%20%5Cfrac%7B1%7D%7B%5Ctau(T,S)%7D%5Cfrac%7BP(t,T)%20-%20P(t,S)%7D%7BP(t,T)%7D%20%5C%5C%0A&amp;=%20-%5Cfrac%7B1%7D%7BP(t,T)%7D%5Clim_%7BS%20%5Cto%20T%5E+%7D%20%5Cfrac%7BP(t,S)%20-%20P(t,T)%7D%7B%5Ctau(T,S)%7D%5C%5C%0A&amp;=%20-%5Cfrac%7B1%7D%7BP(t,T)%7D%5Clim_%7Bh%5Cto%200%7D%20%5Cfrac%7BP(t,T+h)%20-%20P(t,T)%7D%7Bh%7D%5C%5C%0A&amp;=%20-%5Cfrac%7B1%7D%7BP(t,T)%7D%20%5Cfrac%7B%5Cpartial%7D%7BT%7D(P(t,T))%5C%5C%0A&amp;=%20-%20%5Cfrac%7B%5Cpartial%7D%7B%5Cpartial%20T%7D(%5Cln%20P(t,T))%0A%5Cend%7Balign*%7D%0A%5Ctag%7B11%7D"></span></p>
<p>so we also have:</p>
<p><span id="eq-discount-curve-and-instantaneous-forward-rate"><img src="https://latex.codecogs.com/png.latex?%0AP(t,T)%20=%20%5Cexp%5Cleft(-%5Cint_%7Bt%7D%5ET%20f(t,u)du%5Cright)%0A%5Ctag%7B12%7D"></span></p>
</div>
</section>
<section id="classical-libor-rate-model" class="level2">
<h2 class="anchored" data-anchor-id="classical-libor-rate-model">Classical LIBOR Rate Model</h2>
<p>Let’s start with the classical LIBOR rate model. Suppose that bank B enters into a contract at time <img src="https://latex.codecogs.com/png.latex?t"> with bank A, to borrow 1 EUR at time <img src="https://latex.codecogs.com/png.latex?T_0"> and return 1 EUR plus the interest cost at time <img src="https://latex.codecogs.com/png.latex?T_1">. What’s the fair interest rate, that bank A and bank B can agree on? The MTM value to bank A is:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign*%7D%0AV(t)%20&amp;=%20P(t,T_0)%20%5Cmathbb%7BE%7D%5E%7BT_0%7D%5B-1%7C%5Cmathcal%7BF%7D_t%5D%20+%20P(t,T_1)%5Cmathbb%7BE%7D%5E%7BT_1%7D%5B1+%5Ctau%20K%7C%5Cmathcal%7BF%7D_t%5D%5C%5C%0A0%20&amp;=%20-P(t,T_0)%20+%20P(t,T_1)(1+%5Ctau%20K)%0A%5Cend%7Balign*%7D%0A"></p>
<p>where <img src="https://latex.codecogs.com/png.latex?%5Ctau=%5Ctau(T_0,T_1)"> is the day-count fraction between <img src="https://latex.codecogs.com/png.latex?%5BT_0,T_1%5D"></p>
</section>
<section id="spot-libor-rate" class="level2">
<h2 class="anchored" data-anchor-id="spot-libor-rate">Spot LIBOR Rate</h2>
<p>The fair rate for an interbank lending deal with trade date <img src="https://latex.codecogs.com/png.latex?t">, starting date <img src="https://latex.codecogs.com/png.latex?T_0"> (typically 0d or 2d after <img src="https://latex.codecogs.com/png.latex?T">) and maturity date <img src="https://latex.codecogs.com/png.latex?T_1"> is:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign*%7D%0AL(t;T_0,T_1)%20=%20%5Cfrac%7B1%7D%7B%5Ctau%7D%5Cleft%5B%5Cfrac%7BP(t,T_0)%7D%7BP(t,T_1)%20-%201%7D%5Cright%5D%0A%5Cend%7Balign*%7D%0A"></p>
<p>Panel banks submit daily estimates for interbank lending rates to the calculation agent. The relevant periods <img src="https://latex.codecogs.com/png.latex?%5BT_0,T_1%5D"> considered are <img src="https://latex.codecogs.com/png.latex?1m">, <img src="https://latex.codecogs.com/png.latex?3m">, <img src="https://latex.codecogs.com/png.latex?6m"> and <img src="https://latex.codecogs.com/png.latex?12m">. LIBOR rate fixings used to be the most important reference rates for interest rate derivatives. Nowadays, overnight rates have become the key reference rates.</p>
</section>
</section>


<div id="quarto-appendix" class="default"><section id="references" class="level1 appendix"><h2 class="anchored quarto-appendix-heading">References</h2><div class="quarto-appendix-contents">

<ul>
<li><em>Chapter 1, <a href="https://www.amazon.co.uk/Interest-Rate-Models-Practice-Inflation/dp/3540221492">Interest Rate Models - Theory and Practice</a>, Damiano Brigo and Fabio Mercurio.</em></li>
</ul>


</div></section></div> ]]></description>
  <category>Rates Modelling</category>
  <guid>http://quantdev.blog/posts/irs_caps_floors_and_swaptions/index.html</guid>
  <pubDate>Fri, 24 Jan 2025 00:00:00 GMT</pubDate>
  <media:content url="http://quantdev.blog/posts/irs_caps_floors_and_swaptions/image.jpg" medium="image" type="image/jpeg"/>
</item>
</channel>
</rss>
